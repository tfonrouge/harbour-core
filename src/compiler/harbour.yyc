/* A Bison parser, made by GNU Bison 3.0.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         hb_comp_yyparse
#define yylex           hb_comp_yylex
#define yyerror         hb_comp_yyerror
#define yydebug         hb_comp_yydebug
#define yynerrs         hb_comp_yynerrs


/* Copy the first part of user declarations.  */
#line 5 "harbour.y" /* yacc.c:339  */

/*
 * Compiler YACC rules and actions
 *
 * Copyright 1999 Antonio Linares <alinares@fivetech.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA (or visit
 * their website at https://www.gnu.org/).
 *
 */

/* TODO list
 * 1) Change the pcode generated by ::cVar from Self:cVar to QSELF():cVar
 *    The major problem to solve is how to support QSELF() inside a codeblock.
 */


#include "hbcomp.h"

/* Compile using: bison -d -v harbour.y */

/* to pacify some meaningless warnings */
#if defined( __BORLANDC__ )
#  if ! defined( __STDC__ )
#     define __STDC__
#  endif
#  pragma warn -aus
#  pragma warn -ccc
#  pragma warn -rch
#elif defined( __WATCOMC__ )
#  pragma warning 13 9
#  pragma warning 368 9
#elif defined( _MSC_VER )
#  pragma warning( disable : 4244 )
#  pragma warning( disable : 4702 )
#endif

#undef alloca
#define alloca  hb_xgrab
#undef malloc
#define malloc  hb_xgrab
#undef realloc
#define realloc hb_xrealloc
#undef free
#define free    hb_xfree

/* NOTE: these symbols are used internally in bison.simple
 */
#undef YYFREE
#define YYFREE hb_xfree
#undef YYMALLOC
#define YYMALLOC hb_xgrab

#define NO_YYERROR

/* NOTE: these symbols are defined explicitly to pacify warnings */
#define YYENABLE_NLS          0
#define YYLTYPE_IS_TRIVIAL    0

/* NOTE: increase the maximum size of bison stack size */
#define YYMAXDEPTH 100000

static void hb_compLoopStart( HB_COMP_DECL, HB_BOOL );
static void hb_compLoopEnd( HB_COMP_DECL );
static void hb_compLoopLoop( HB_COMP_DECL );
static void hb_compLoopExit( HB_COMP_DECL );
static void hb_compLoopHere( HB_COMP_DECL );
static long hb_compLoopCount( HB_COMP_DECL );

static void * hb_compElseIfGen( HB_COMP_DECL, void * pFirstElseIf, HB_SIZE nOffset ); /* generates a support structure for elseifs pcode fixups */
static void hb_compElseIfFix( HB_COMP_DECL, void * pIfElseIfs ); /* implements the ElseIfs pcode fixups */

static void hb_compRTVariableAdd( HB_COMP_DECL, PHB_EXPR, HB_BOOL );
static void hb_compRTVariableGen( HB_COMP_DECL, const char * );

static PHB_EXPR hb_compArrayDimPush( PHB_EXPR pInitValue, HB_COMP_DECL );
static void hb_compVariableDim( const char *, PHB_EXPR, HB_COMP_DECL );

static void hb_compForStart( HB_COMP_DECL, const char *szVarName, int iForEachDir );
static void hb_compForEnd( HB_COMP_DECL, const char *szVarName );
static void hb_compEnumStart( HB_COMP_DECL, PHB_EXPR pVars, PHB_EXPR pExprs, int descend );
static void hb_compEnumNext( HB_COMP_DECL, PHB_EXPR pExpr, int descend );
static void hb_compEnumEnd( HB_COMP_DECL, PHB_EXPR pExpr );

static void hb_compSwitchStart( HB_COMP_DECL, PHB_EXPR );
static void hb_compSwitchAdd( HB_COMP_DECL, PHB_EXPR );
static void hb_compSwitchEnd( HB_COMP_DECL );

static PHB_EXPR hb_compCheckMethod( HB_COMP_DECL, PHB_EXPR pExpr );
static PHB_EXPR hb_compCheckPassByRef( HB_COMP_DECL, PHB_EXPR pExpr );

static void hb_compErrStru( HB_COMP_DECL, int iError );

#ifdef HB_YYDEBUG
   #define YYDEBUG        1 /* Parser debug information support */
#endif

/* Controls if passing by reference '@' is allowed */
#define HB_PASSBYREF_OFF      0
#define HB_PASSBYREF_FUNCALL  1
#define HB_PASSBYREF_ARRAY    2

static void hb_compDebugStart( void ) { }


#line 190 "harboury.c" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "harboury.h".  */
#ifndef YY_HB_COMP_YY_HARBOURY_H_INCLUDED
# define YY_HB_COMP_YY_HARBOURY_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int hb_comp_yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    FUNCTION = 258,
    PROCEDURE = 259,
    IDENTIFIER = 260,
    RETURN = 261,
    NIL = 262,
    NUM_DOUBLE = 263,
    INASSIGN = 264,
    NUM_LONG = 265,
    LOCAL = 266,
    STATIC = 267,
    IIF = 268,
    IF = 269,
    ELSE = 270,
    ELSEIF = 271,
    END = 272,
    ENDIF = 273,
    LITERAL = 274,
    TRUEVALUE = 275,
    FALSEVALUE = 276,
    ANNOUNCE = 277,
    EXTERN = 278,
    DYNAMIC = 279,
    INIT = 280,
    EXIT = 281,
    AND = 282,
    OR = 283,
    NOT = 284,
    PUBLIC = 285,
    EQ = 286,
    NE1 = 287,
    NE2 = 288,
    INC = 289,
    DEC = 290,
    ALIASOP = 291,
    DOCASE = 292,
    CASE = 293,
    OTHERWISE = 294,
    ENDCASE = 295,
    ENDDO = 296,
    MEMVAR = 297,
    WHILE = 298,
    LOOP = 299,
    FOR = 300,
    NEXT = 301,
    TO = 302,
    STEP = 303,
    LE = 304,
    GE = 305,
    FIELD = 306,
    IN = 307,
    PARAMETERS = 308,
    PLUSEQ = 309,
    MINUSEQ = 310,
    MULTEQ = 311,
    DIVEQ = 312,
    POWER = 313,
    EXPEQ = 314,
    MODEQ = 315,
    PRIVATE = 316,
    BEGINSEQ = 317,
    BREAK = 318,
    RECOVER = 319,
    RECOVERUSING = 320,
    ALWAYS = 321,
    ENDSEQ = 322,
    DO = 323,
    WITH = 324,
    SELF = 325,
    LINE = 326,
    MACROVAR = 327,
    MACROTEXT = 328,
    AS_ARRAY = 329,
    AS_BLOCK = 330,
    AS_CHARACTER = 331,
    AS_CLASS = 332,
    AS_DATE = 333,
    AS_LOGICAL = 334,
    AS_NUMERIC = 335,
    AS_OBJECT = 336,
    AS_VARIANT = 337,
    AS_ARRAY_ARRAY = 338,
    AS_BLOCK_ARRAY = 339,
    AS_CHARACTER_ARRAY = 340,
    AS_CLASS_ARRAY = 341,
    AS_DATE_ARRAY = 342,
    AS_LOGICAL_ARRAY = 343,
    AS_NUMERIC_ARRAY = 344,
    AS_OBJECT_ARRAY = 345,
    DECLARE = 346,
    OPTIONAL = 347,
    DECLARE_CLASS = 348,
    DECLARE_MEMBER = 349,
    PROCREQ = 350,
    CBSTART = 351,
    DOIDENT = 352,
    FOREACH = 353,
    DESCEND = 354,
    DOSWITCH = 355,
    ENDSWITCH = 356,
    WITHOBJECT = 357,
    ENDWITH = 358,
    NUM_DATE = 359,
    TIMESTAMP = 360,
    EPSILON = 361,
    HASHOP = 362,
    THREAD = 363,
    POST = 364,
    UNARY = 365,
    PRE = 366
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE YYSTYPE;
union YYSTYPE
{
#line 124 "harbour.y" /* yacc.c:355  */

   const char * string; /* to hold a string returned by lex */
   int     iNumber;     /* to hold a temporary integer number */
   HB_SIZE sNumber;     /* to hold a temporary HB_SIZE values */
   HB_MAXINT lNumber;   /* to hold a temporary long number */
   HB_BOOL bTrue;
   PHB_EXPR asExpr;
   void * pVoid;        /* to hold any memory structure we may need */
   struct
   {
      HB_MAXINT lNumber;   /* to hold a long number returned by lex */
      HB_UCHAR  bWidth;    /* to hold the width of the value */
   } valLong;
   struct
   {
      double   dNumber;    /* to hold a double number returned by lex */
      HB_UCHAR bWidth;     /* to hold the width of the value */
      HB_UCHAR bDec;       /* to hold the number of decimal points in the value */
   } valDouble;
   struct
   {
      long     date;
      long     time;
   } valTimeStamp;
   struct
   {
      char *   string;
      HB_SIZE  length;
      HB_BOOL  dealloc;
   } valChar;
   struct
   {
      char *   string;
      HB_SIZE  length;
      int      flags;   /* Flag for early {|| &macro} (1) or late {|| &(macro)} (2) binding */
   } asCodeblock;
   PHB_VARTYPE asVarType;

#line 381 "harboury.c" /* yacc.c:355  */
};
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif



int hb_comp_yyparse (PHB_COMP pComp);

#endif /* !YY_HB_COMP_YY_HARBOURY_H_INCLUDED  */

/* Copy the second part of user declarations.  */
#line 163 "harbour.y" /* yacc.c:358  */

/* This must be placed after the above union - the union is
 * typedef-ined to YYSTYPE
 */
extern int  yylex( YYSTYPE *, HB_COMP_DECL );    /* main lex token function, called by yyparse() */
extern void yyerror( HB_COMP_DECL, const char * );     /* parsing error management function */

#line 402 "harboury.c" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  280
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   8378

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  134
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  247
/* YYNRULES -- Number of rules.  */
#define YYNRULES  653
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  986

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   366

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     123,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,   113,   118,   121,     2,
     126,   127,   116,   114,   125,   115,     2,   117,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   130,   124,
     111,   110,   112,     2,   122,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   132,     2,   131,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   128,   133,   129,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   119,   120
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   291,   291,   292,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   309,   312,   317,   325,
     325,   326,   326,   327,   327,   328,   328,   331,   332,   333,
     334,   337,   338,   339,   340,   343,   344,   347,   348,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   373,   374,   382,
     383,   384,   385,   386,   387,   393,   394,   395,   396,   397,
     398,   399,   400,   402,   402,   408,   409,   410,   423,   423,
     444,   446,   444,   450,   452,   450,   456,   457,   458,   459,
     460,   461,   461,   467,   470,   478,   497,   497,   500,   501,
     502,   503,   504,   505,   518,   519,   522,   523,   526,   527,
     530,   531,   534,   535,   536,   537,   538,   539,   540,   541,
     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,   557,   558,   561,   564,   567,   568,   573,   576,   581,
     587,   592,   597,   598,   601,   606,   609,   620,   623,   628,
     631,   634,   635,   638,   641,   642,   647,   650,   655,   656,
     659,   664,   667,   670,   671,   678,   679,   684,   685,   686,
     687,   688,   689,   690,   691,   692,   693,   694,   695,   696,
     697,   700,   701,   704,   705,   706,   707,   708,   709,   710,
     711,   712,   713,   714,   715,   716,   717,   718,   719,   720,
     721,   722,   723,   732,   733,   734,   735,   736,   737,   742,
     743,   744,   745,   746,   747,   748,   749,   750,   751,   752,
     753,   754,   755,   756,   757,   758,   759,   762,   766,   769,
     770,   774,   777,   780,   781,   784,   785,   788,   789,   790,
     791,   792,   795,   796,   801,   802,   803,   809,   810,   813,
     816,   821,   824,   833,   834,   835,   836,   837,   838,   839,
     840,   841,   842,   843,   844,   845,   846,   847,   848,   849,
     850,   851,   852,   853,   854,   855,   856,   857,   858,   859,
     860,   861,   862,   863,   864,   867,   868,   869,   870,   871,
     872,   875,   876,   879,   880,   883,   884,   885,   886,   887,
     888,   889,   896,   897,   898,   899,   900,   901,   902,   903,
     904,   905,   906,   907,   908,   909,   910,   911,   912,   913,
     914,   915,   916,   922,   923,   926,   929,   930,   933,   934,
     935,   938,   941,   944,   947,   950,   953,   956,   959,   962,
     963,   964,   965,   966,   967,   970,   971,   972,   973,   974,
     975,   978,   979,   982,   983,   984,   985,   986,   987,   988,
     989,   990,   993,   999,  1000,  1001,  1004,  1005,  1008,  1008,
    1014,  1015,  1016,  1017,  1020,  1021,  1024,  1025,  1029,  1032,
    1028,  1035,  1034,  1076,  1077,  1079,  1082,  1091,  1095,  1098,
    1098,  1100,  1100,  1102,  1102,  1104,  1104,  1114,  1115,  1118,
    1119,  1127,  1128,  1130,  1134,  1141,  1159,  1159,  1188,  1194,
    1197,  1198,  1199,  1202,  1202,  1209,  1210,  1213,  1214,  1217,
    1217,  1220,  1221,  1224,  1224,  1243,  1243,  1244,  1245,  1246,
    1247,  1247,  1250,  1251,  1254,  1255,  1256,  1257,  1260,  1260,
    1279,  1279,  1334,  1335,  1336,  1337,  1340,  1341,  1342,  1343,
    1344,  1345,  1346,  1349,  1350,  1353,  1356,  1357,  1358,  1359,
    1360,  1361,  1364,  1365,  1366,  1367,  1368,  1369,  1372,  1373,
    1374,  1375,  1376,  1377,  1378,  1379,  1382,  1385,  1388,  1391,
    1394,  1397,  1400,  1403,  1404,  1405,  1406,  1410,  1412,  1409,
    1417,  1417,  1421,  1423,  1421,  1431,  1433,  1431,  1442,  1450,
    1451,  1452,  1453,  1454,  1455,  1456,  1457,  1460,  1464,  1468,
    1471,  1477,  1484,  1485,  1486,  1487,  1488,  1489,  1490,  1491,
    1494,  1494,  1497,  1498,  1506,  1507,  1506,  1518,  1519,  1518,
    1531,  1531,  1531,  1533,  1533,  1538,  1543,  1537,  1557,  1566,
    1570,  1571,  1572,  1573,  1574,  1575,  1576,  1577,  1581,  1594,
    1599,  1580,  1647,  1648,  1651,  1652,  1655,  1663,  1664,  1665,
    1666,  1667,  1668,  1669,  1670,  1671,  1674,  1675,  1678,  1679,
    1682,  1683,  1686,  1687,  1692,  1698,  1708,  1691,  1727,  1728,
    1732,  1731,  1744,  1751,  1759,  1760,  1761,  1762,  1763,  1764,
    1765,  1766,  1770,  1769,  1780,  1781,  1790,  1790,  1793,  1793,
    1796,  1798,  1801,  1801,  1801,  1806,  1814,  1825,  1835,  1805,
    1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,  1876,  1877,
    1885,  1886,  1889,  1898,  1899,  1900,  1903,  1914,  1932,  1936,
    1944,  1945,  1948,  1949,  1950,  1951,  1952,  1955,  1956,  1957,
    1958,  1959,  1963,  1962,  1985,  1986,  1987,  1988,  1989,  1990,
    1991,  1992,  1995,  1996
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "FUNCTION", "PROCEDURE", "IDENTIFIER",
  "RETURN", "NIL", "NUM_DOUBLE", "INASSIGN", "NUM_LONG", "LOCAL", "STATIC",
  "IIF", "IF", "ELSE", "ELSEIF", "END", "ENDIF", "LITERAL", "TRUEVALUE",
  "FALSEVALUE", "ANNOUNCE", "EXTERN", "DYNAMIC", "INIT", "EXIT", "AND",
  "OR", "NOT", "PUBLIC", "EQ", "NE1", "NE2", "INC", "DEC", "ALIASOP",
  "DOCASE", "CASE", "OTHERWISE", "ENDCASE", "ENDDO", "MEMVAR", "WHILE",
  "LOOP", "FOR", "NEXT", "TO", "STEP", "LE", "GE", "FIELD", "IN",
  "PARAMETERS", "PLUSEQ", "MINUSEQ", "MULTEQ", "DIVEQ", "POWER", "EXPEQ",
  "MODEQ", "PRIVATE", "BEGINSEQ", "BREAK", "RECOVER", "RECOVERUSING",
  "ALWAYS", "ENDSEQ", "DO", "WITH", "SELF", "LINE", "MACROVAR",
  "MACROTEXT", "AS_ARRAY", "AS_BLOCK", "AS_CHARACTER", "AS_CLASS",
  "AS_DATE", "AS_LOGICAL", "AS_NUMERIC", "AS_OBJECT", "AS_VARIANT",
  "AS_ARRAY_ARRAY", "AS_BLOCK_ARRAY", "AS_CHARACTER_ARRAY",
  "AS_CLASS_ARRAY", "AS_DATE_ARRAY", "AS_LOGICAL_ARRAY",
  "AS_NUMERIC_ARRAY", "AS_OBJECT_ARRAY", "DECLARE", "OPTIONAL",
  "DECLARE_CLASS", "DECLARE_MEMBER", "PROCREQ", "CBSTART", "DOIDENT",
  "FOREACH", "DESCEND", "DOSWITCH", "ENDSWITCH", "WITHOBJECT", "ENDWITH",
  "NUM_DATE", "TIMESTAMP", "EPSILON", "HASHOP", "THREAD", "POST", "'='",
  "'<'", "'>'", "'$'", "'+'", "'-'", "'*'", "'/'", "'%'", "UNARY", "PRE",
  "'&'", "'@'", "'\\n'", "';'", "','", "'('", "')'", "'{'", "'}'", "':'",
  "']'", "'['", "'|'", "$accept", "Main", "Source", "Line", "Function",
  "$@1", "$@2", "$@3", "$@4", "FunScope", "Params", "AsType",
  "AsArrayType", "StrongType", "AsArray", "ParamList", "Statement", "$@5",
  "$@6", "$@7", "$@8", "$@9", "$@10", "$@11", "CompTimeStr", "CrlfStmnt",
  "$@12", "LineStat", "Statements", "EmptyStats", "ExtList", "DynList",
  "IdentName", "NumValue", "DateValue", "TimeStampValue", "NumAlias",
  "NilValue", "NilAlias", "LiteralValue", "LiteralAlias", "CodeBlockAlias",
  "Logical", "LogicalAlias", "SelfValue", "SelfAlias", "Array",
  "ArrayAlias", "ArrayAt", "ArrayAtAlias", "Hash", "HashAlias", "HashList",
  "Variable", "VarAlias", "MacroVar", "MacroVarAlias", "MacroExpr",
  "MacroExprAlias", "MacroAny", "FieldAlias", "FieldVarAlias", "AliasId",
  "AliasVar", "AliasExpr", "VariableAt", "VariableAtAlias", "FunIdentCall",
  "FunCall", "FunRef", "FunCallAlias", "ArgList", "Argument",
  "RefArgument", "ExtArgument", "ObjectData", "SendId", "ObjectRef",
  "ObjectDataAlias", "ObjectMethod", "ObjectMethodAlias",
  "SimpleExpression", "Expression", "ExtExpression", "EmptyExpression",
  "LValue", "LeftExpression", "PostOp", "ExprPostOp", "ExprPreOp",
  "ExprUnary", "ExprEqual", "ExprAssign", "ExprPlusEq", "ExprMinusEq",
  "ExprMultEq", "ExprDivEq", "ExprModEq", "ExprExpEq", "ExprOperEq",
  "ExprMath", "ExprBool", "ExprRelation", "ArrayIndex", "IndexList",
  "ElemList", "BlockHead", "@13", "BlockVars", "BlockVarList",
  "BlockExpList", "CodeBlock", "@14", "$@15", "@16", "ExpList",
  "PareExpList", "PareExpListAlias", "IfInline", "IfInlineAlias",
  "VarDefs", "$@17", "$@18", "$@19", "$@20", "VarList", "ExtVarList",
  "ExtVarDef", "VarDef", "@21", "DimList", "DimIndex", "FieldsDef", "$@22",
  "FieldList", "InAlias", "MemvarDef", "$@23", "MemvarList", "Declaration",
  "$@24", "$@25", "$@26", "DecDataList", "ClassInfo", "DecMethod", "$@27",
  "DecData", "$@28", "DecList", "DecListExt", "DummyArgList",
  "DummyArgument", "FormalList", "OptList", "ExecFlow", "ErrEndFor",
  "ErrEndCase", "ErrEndIf", "ErrEndWith", "ErrEndSeq", "ErrEndWhile",
  "ErrEndSwitch", "IfEndif", "IfBegin", "$@29", "@30", "IfElse", "$@31",
  "IfElseIf", "$@32", "@33", "$@34", "@35", "EndIf", "EndIfID", "DoCase",
  "EndCase", "EndCaseID", "DoCaseStart", "$@36", "DoCaseBegin", "Cases",
  "$@37", "@38", "$@39", "@40", "Otherwise", "$@41", "$@42", "$@43",
  "DoWhile", "@44", "$@45", "WhileBegin", "EndWhile", "EndWhileID",
  "ForNext", "@46", "@47", "@48", "ForAssign", "StepExpr", "ForStatements",
  "EndForID", "ForVar", "ForList", "ForExpr", "ForArgs", "ForEach", "$@49",
  "@50", "@51", "Descend", "DoSwitch", "$@52", "EndSwitch", "EndSwitchID",
  "SwitchStart", "$@53", "SwitchBegin", "SwitchCases", "$@54", "$@55",
  "SwitchDefault", "$@56", "$@57", "BeginSeq", "@58", "@59", "$@60",
  "$@61", "EndSeqID", "BlockSeq", "AlwaysSeq", "Always", "RecoverSeq",
  "RecoverEmpty", "RecoverUsing", "DoProc", "DoArgs", "DoArgList",
  "DoArgument", "WithObject", "@62", "EndWithID", "Crlf", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
      61,    60,    62,    36,    43,    45,    42,    47,    37,   365,
     366,    38,    64,    10,    59,    44,    40,    41,   123,   125,
      58,    93,    91,   124
};
# endif

#define YYPACT_NINF -660

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-660)))

#define YYTABLE_NINF -642

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
    4362,   158,  -660,   292,  -660,   -22,    10,   948,   207,   -83,
    6750,  -660,  -660,  -660,  8270,  8270,  8270,  -660,    79,   960,
    6750,  6750,  -660,  1135,  -660,   292,  7246,  -660,  -660,    57,
    -660,  1340,  1433,  -660,   292,   -33,  -660,   112,  -660,  -660,
    8270,  -660,  8270,  2475,   148,  -660,    29,  7246,  -660,  -660,
    6750,  -660,  -660,   135,    62,  -660,  -660,  6874,  6254,  7910,
     206,  4590,  -660,  -660,   360,  -660,   -12,   136,   136,   136,
    3114,    45,  7910,    50,  7910,  7910,    97,  7910,   115,  7910,
     118,  7910,   241,  7910,   120,  7910,   136,  3114,   261,  3114,
     267,  3114,   403,  7358,  7910,   136,   188,   273,  7910,  -660,
      61,  7910,    88,   205,  7910,   113,  7910,   235,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,   158,
     151,   156,  3114,   183,  7910,  -660,  -660,  -660,  -660,  -660,
    -660,  1113,  -660,  4976,   546,  -660,  6750,  -660,  -660,  -660,
    5104,  1641,  -660,  -660,  -660,  -660,  -660,  6750,  -660,   158,
    -660,  -660,  8270,  8270,  6750,  -660,  -660,  -660,  -660,  -660,
    -660,  6750,  -660,  -660,  -660,    57,  -660,  -660,  -660,  -660,
    6750,  6750,  8270,   439,  1307,  2826,  1701,  1800,  1968,  3893,
    2378,   542,  2386,  7531,   674,  1187,    -3,  2834,  2918,   844,
    4056,  -660,  3723,  7413,  -660,  7281,  1573,  -660,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  2634,   193,  7472,  2673,  -660,
     256,  -660,   285,  -660,  -660,  7964,  -660,  -660,   158,  8270,
    -660,    55,    38,    53,   155,   136,    69,   154,    68,   161,
      25,   211,    83,   172,   278,  8270,  8270,  7964,   306,  6750,
    -660,  -660,  -660,    29,    17,   269,  3345,  6379,   279,   158,
     312,   302,  8018,  6378,  -660,   382,   155,   199,  -660,     1,
    6750,  4212,  -660,  6750,  -660,  8270,   219,  -660,   304,  7246,
     -57,  -660,  -660,  -660,  4419,  -660,   128,  -660,  -660,  -660,
    -660,   158,  -660,  -660,  -660,  -660,  -660,  8270,  8270,  -660,
    6502,  6626,  -660,   140,  -660,  -660,  -660,  -660,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,
    6502,  -660,  -660,   -22,    10,   400,  -660,   407,  -660,   418,
    -660,  -660,   420,  -660,   424,  -660,   118,  -660,   241,  -660,
     426,  -660,  -660,  -660,  -660,  -660,   429,   432,  -660,   440,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,
    -660,  -660,  6502,  -660,  7910,  -660,  -660,  -660,  -660,  -660,
    6750,  -660,  -660,  6750,  6750,  6750,  6750,  6750,  6750,  6750,
    7910,  -660,  -660,  -660,  -660,  -660,  -660,  6750,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,
    -660,   158,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  1866,  1491,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,  5232,  -660,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,
    -660,  -660,  1786,   515,   297,  5360,  -660,  -660,  -660,  -660,
    -660,  -660,  -660,  -660,   466,  -660,  -660,  -660,  4212,  -660,
    3228,   347,  -660,   347,  3149,  1603,  -660,  -660,   359,  -660,
    -660,  -660,  -660,  8270,  -660,  -660,  -660,  -660,  -660,  -660,
    -660,  -660,  8270,  -660,  -660,  -660,  -660,  -660,  -660,  -660,
    -660,  -660,  -660,  6750,  6750,  6750,  6750,  6750,  6750,  6750,
    6750,  6750,  6750,  6750,  6750,  6750,  6750,  6750,  6750,  6750,
    6750,   158,  -660,   158,  8270,  -660,  8270,  -660,  3228,   357,
    -660,  -660,  -660,  6379,   356,  -660,  -660,  6750,  -660,  6379,
       2,   356,   357,  6750,   158,  4212,  -660,   423,  -660,  -660,
    8270,   158,  -660,  -660,  -660,  -660,  -660,   468,   158,  -660,
    6379,   358,   364,  6998,   316,   442,  -660,   449,  7281,  2952,
     372,  -660,  7122,  7246,  4212,  -660,  8270,   396,  -660,  -660,
      98,   101,   155,    69,   116,    68,  6750,  -660,  6750,  6502,
    -660,  -660,   375,   383,   224,  -660,  7281,  -660,  7281,  -660,
    6626,   379,   234,   259,  -660,  7281,  7281,  7281,  7281,  7281,
    7281,  7281,  7281,  -660,  7281,   395,  6128,  -660,  6750,  -660,
    -660,  1866,  -660,  -660,  6750,   158,  -660,  -660,   515,  -660,
    -660,  -660,  6750,  -660,  1833,  -660,  -660,  6750,   519,   548,
     174,  8270,  -660,  -660,  6998,  -660,  -660,   732,  7281,  1603,
    1603,  1603,  1298,  1298,   467,  1603,  1298,  1298,  1298,   399,
     399,   240,   240,   240,  7281,  -660,  -660,  -660,  -660,   522,
     548,  7964,   158,  -660,  8270,  -660,  7281,  -660,  8270,  8270,
     158,  -660,   158,  7281,  4848,  -660,   524,  -660,  3653,   279,
    3345,  -660,  -660,  -660,  8270,  7618,  -660,  -660,  -660,  -660,
    8081,  -660,  6998,  8270,  7281,  -660,   416,  -660,  -660,  6000,
     347,  -660,  7406,  -660,  -660,   158,   431,   158,   453,  6502,
    -660,  -660,  6626,  -660,  -660,  6750,   446,  4718,   454,  6000,
     297,  6750,  -660,   297,  -660,  6750,  -660,   158,  6000,  7281,
     158,  6750,  -660,  -660,  7281,   543,  -660,  -660,  6750,   436,
    -660,   464,  5488,  6750,  -660,  -660,  -660,  6379,   544,  -660,
    6379,  -660,  -660,  -660,   158,  7744,  8270,  6379,   463,   470,
     478,  6379,  -660,  -660,  -660,  -660,   129,  -660,  -660,   481,
     479,   478,  -660,  6379,  -660,   359,  7122,   494,  1885,  -660,
    6750,  -660,  8144,  -660,  8144,  -660,  -660,  7281,  -660,  -660,
    -660,  -660,   297,  -660,  5744,   297,  5744,  -660,   158,  -660,
    7281,  6750,  7281,  6750,  6998,  -660,  7281,  -660,  6750,  -660,
     516,  -660,  8270,  6379,  3246,  -660,  6379,  7802,   513,  -660,
    8270,   158,  6379,  7681,  -660,  -660,  -660,  -660,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,   484,
     487,  6379,   492,  5488,  -660,  5616,  -660,  -660,  -660,  1905,
    5616,  5616,   158,  7281,  7281,   493,    -4,  -660,  8270,  -660,
     158,   158,  3782,  -660,  6750,  -660,   158,  8270,  6379,   478,
    7856,  -660,  -660,  -660,  -660,   496,   158,   158,  8207,  -660,
     158,  -660,  5488,  -660,  5616,  -660,  -660,  -660,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  5616,  -660,  6750,
    -660,  -660,   559,  5872,  5872,  6750,  -660,  -660,   266,  -660,
    -660,  4466,  -660,  8270,  6379,   134,  -660,  -660,  -660,  6379,
    -660,  -660,  -660,  -660,   193,   158,  -660,  -660,   158,  -660,
    -660,   274,  6750,  -660,  6750,  -660,  6255,  -660,  -660,  6000,
    -660,  -660,  2038,  6000,  -660,  -660,   322,  6750,  -660,  2077,
    -660,  6000,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,
    -660,  -660,  -660,   325,  -660,  8270,  -660,  -660,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,     0,   112,    78,   137,   131,   132,   389,   391,     0,
       0,   139,   142,   143,   121,   119,   120,    29,   116,    80,
       0,     0,   520,   419,   538,   115,     0,   114,   113,   413,
     117,   395,    83,   605,    73,     0,   145,     0,   158,   159,
       0,   118,     0,     0,   128,   368,   630,     0,   129,   592,
       0,   133,   134,   130,     0,   652,   653,     0,   293,     0,
       0,     0,     8,     6,     0,     7,   156,   302,   304,   305,
       0,   303,     0,   306,     0,     0,   308,     0,   309,     0,
     310,     0,   311,     0,   312,     0,   316,     0,   163,     0,
     164,     0,   315,     0,     0,   313,   314,   317,     0,   229,
     319,     0,   321,     0,     0,   322,     0,     0,    96,    96,
      96,    96,   339,   340,   341,   342,   343,   344,    96,   378,
     307,   318,     0,   320,     0,    86,    87,    88,     5,    96,
     468,     0,   469,     0,     0,   470,     0,   471,   473,   474,
       0,   580,   472,    96,   475,     4,     9,     0,    77,     0,
     136,   135,     0,     0,     0,   122,   124,   121,   119,   120,
     116,     0,   126,   123,   115,     0,   127,   125,   128,   130,
       0,     0,     0,   253,   255,   256,   254,   257,   259,   260,
     262,   263,   264,   286,   267,   268,   315,   265,   266,   269,
     270,   290,   273,   275,   285,   383,     0,   279,   280,   281,
     277,   278,   282,   283,   284,   258,   487,   287,   272,    91,
       0,   108,     0,   110,    75,     0,   326,   327,     0,     0,
      76,   156,   163,   164,   296,   314,   300,   319,   299,   322,
       0,     0,   301,   320,   165,     0,     0,     0,   618,     0,
      72,   163,   164,   630,     0,   425,     0,    35,     0,     0,
      94,     0,   370,     0,   629,   156,   567,   318,   568,     0,
       0,     0,   393,     0,   161,     0,     0,   242,     0,     0,
       0,   243,   236,   366,   294,   235,     0,   247,   248,   246,
       1,     0,    14,    12,    13,    11,    10,     0,     0,   157,
     293,     0,   209,     0,   211,   212,   181,   182,   183,   203,
     138,   210,   187,   140,   213,   188,   190,   144,   215,   189,
     146,   217,   192,   148,   149,   193,   150,   194,   153,   216,
     191,   218,   200,   204,   160,   184,   205,   162,   185,   206,
     293,    64,   221,     0,     0,   181,   168,     0,   172,     0,
     173,   175,     0,   174,     0,   176,     0,   177,     0,   178,
       0,   179,   167,   170,   171,   201,     0,   208,   169,     0,
     180,   202,   219,    62,   220,   227,   195,   232,    61,   224,
     197,   250,   293,   222,     0,   198,   252,    63,   223,   199,
       0,   323,   324,     0,     0,     0,     0,     0,     0,     0,
       0,   325,    67,    66,    69,    70,    68,     0,   381,   141,
     214,   386,    65,   226,   186,   207,   388,    60,   225,   196,
      59,     0,   492,   500,   499,   477,   481,   476,   480,   482,
     479,   501,   502,   504,   505,   503,   506,     0,     0,   483,
     498,   103,   101,   102,    99,   104,     0,   100,    98,   513,
     478,   524,   530,   512,   515,   514,   517,   518,   516,   519,
     509,   511,     0,     0,     0,     0,   585,   584,   587,   588,
     586,   590,   591,   589,     0,   582,   583,    71,     0,    97,
      35,     0,   397,     0,     0,   328,   330,   329,     0,   231,
      48,    43,    40,     0,    41,    42,    39,    44,    46,    53,
      54,    50,     0,    51,    52,    49,    55,   261,    47,   288,
     271,   274,   276,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   289,     0,     0,    89,     0,    90,    35,    81,
     399,   401,   521,    35,     0,   553,   552,     0,   166,    35,
     417,     0,    84,     0,     0,     0,   628,     0,    16,   423,
       0,     0,   427,   430,    36,   438,   429,     0,     0,   371,
      35,     0,   372,   632,   156,   290,   638,   285,     0,   287,
     631,   634,     0,     0,     0,   642,     0,     0,   385,   151,
     237,   238,   239,   241,   231,   240,     0,   152,   293,   293,
     147,    15,    19,    21,     0,   233,   294,   291,   292,   363,
       0,   362,     0,     0,   245,   332,   333,   334,   335,   336,
     338,   337,   331,   244,   376,   379,     0,   490,     0,   484,
     495,     0,   485,   105,     0,     0,   527,   507,     0,   533,
     508,   535,     0,   602,     0,   600,    79,     0,   405,    37,
       0,     0,   390,   392,   293,    45,    56,   351,   352,   353,
     358,   359,   356,   357,   350,   361,   354,   355,   360,   345,
     346,   347,   348,   349,   384,   488,    92,   109,   111,   402,
      37,     0,     0,   421,     0,   420,   548,   415,     0,     0,
       0,   396,     0,   619,     0,    74,     0,    17,   442,   440,
       0,   434,   436,   428,     0,   446,    95,    93,   374,   369,
       0,   633,   635,     0,   571,   572,   574,   569,   593,     0,
       0,   249,     0,   154,   367,     0,     0,     0,     0,   293,
     228,   364,     0,   230,   251,     0,     0,     0,     0,     0,
       0,     0,   486,     0,   531,     0,   510,     0,     0,   596,
       0,     0,   581,   601,   410,     0,   408,    38,     0,   409,
     398,     0,     0,     0,   404,   400,    82,    35,     0,   418,
      35,   414,    85,   606,     0,   118,     0,    35,     0,   443,
     444,    35,   435,   437,   426,   440,     0,   432,   449,     0,
     447,   448,   373,    35,   636,   570,     0,   578,     0,   394,
     293,    20,    31,    22,    31,   234,   365,   377,   380,   382,
     491,   493,     0,   525,     0,     0,     0,   536,     0,   603,
     598,     0,   411,     0,   293,   489,   403,   422,     0,   416,
     623,    18,     0,    35,    35,   456,    35,     0,     0,   441,
       0,     0,    35,     0,   375,   573,   579,   575,   645,   644,
     647,   648,   646,   650,   649,   651,   643,   155,    32,     0,
      33,    35,     0,     0,   496,     0,   532,   528,   534,     0,
       0,     0,     0,   407,   412,     0,   554,   626,     0,   607,
       0,     0,    35,   462,   293,   457,     0,     0,    35,   445,
       0,   433,   431,   439,   450,   451,     0,     0,     0,    57,
       0,   494,     0,   526,     0,   541,   540,   543,   544,   542,
     545,   546,   547,   537,   539,   597,   604,     0,   387,     0,
     549,   627,   620,     0,     0,   293,   463,   455,     0,   453,
     424,    35,   459,     0,    35,     0,   576,    24,    34,    35,
      26,   497,   529,   599,   555,     0,   622,   608,     0,   624,
     625,     0,   293,   458,   293,   460,    35,   465,   452,     0,
      58,   550,     0,     0,   464,   454,     0,   293,   466,     0,
     577,     0,   611,   610,   613,   614,   612,   616,   615,   617,
     609,   621,   461,     0,   559,   557,   561,   560,   563,   564,
     562,   565,   556,   551,   467,   558
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -660,  -660,  -660,    70,   143,  -660,  -660,  -660,  -660,  -660,
    -168,  1445,   -42,  -141,  -561,  -660,   173,  -660,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,     7,  -660,  -425,   -38,  -246,
    -660,  -660,   -14,  1458,  1599,  1679,   536,   477,   547,   696,
     549,   550,   724,   551,   815,   552,   888,   558,  1138,   560,
    1212,   562,  -660,  1752,   566,    85,   569,   249,   570,   313,
     437,  -660,  3914,  1893,  2107,  2110,  -660,  -169,  2194,  -247,
    -660,  -113,  -634,  -238,   -50,  2335,  -114,  -660,  -660,  2494,
    -660,  -236,  3771,  -577,  -512,  -660,  2610,  -660,  2675,  2737,
    -660,  -660,  2802,  -660,  -660,  -660,  -660,  -660,  -660,  2984,
    -660,  -660,  -660,  4001,  -660,  -660,  -660,  -660,  -660,  -660,
    -660,  1331,  -660,  -660,  -660,     6,   397,   577,  1393,   580,
    -660,  -660,  -660,  -660,  -660,  -149,   404,   -19,  -210,  -660,
     147,  -660,  -660,  -660,  -660,  -660,  -660,  -660,   441,   195,
    -660,  -660,  -660,  -660,  -660,  -537,  -660,  -659,  -660,  -660,
    -660,  -643,  -264,   -16,  -658,  -660,   -28,  -134,  -132,   -84,
     -86,   -40,   -75,  -660,  -660,  -660,  -660,   254,  -660,  -660,
    -660,  -660,  -660,  -660,  -409,  -660,  -660,  -432,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,   232,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,
    -660,  -660,  -660,  -271,  -660,   119,  -660,   -95,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,    59,  -660,  -660,  -660,
    -660,  -660,  -660,  -660,    60,  -660,  -660,  -660,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,
     452,  -660,  -541,  -660,  -660,  -660,  3365
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    60,    61,   432,   433,   715,   717,   716,   718,    64,
     849,   553,   746,   554,   498,   850,   434,   239,   147,   215,
     672,   237,   682,   523,   251,   148,   149,   435,   727,   959,
     210,   212,    66,   173,   174,   175,    70,   176,    72,   177,
      74,    75,   178,    77,   179,    79,   180,    81,   181,    83,
     182,    85,   270,   183,    87,   184,    89,   185,    91,   186,
      93,    94,   298,   187,   188,   189,    98,    99,   190,   191,
     101,   594,   271,   272,   595,   192,   279,   103,   104,   193,
     106,   194,   596,   599,   275,   230,   196,   391,   197,   198,
     199,   110,   200,   112,   113,   114,   115,   116,   117,   201,
     202,   203,   204,   362,   293,   276,   119,   252,   561,   562,
     615,   205,   397,   726,   616,   266,   207,   122,   208,   124,
     125,   152,   153,   576,   236,   471,   529,   530,   472,   745,
     639,   640,   126,   235,   540,   680,   127,   219,   534,   437,
     688,   550,   694,   776,   690,   249,   695,   692,   771,   768,
     779,   918,   919,   769,   770,   129,   421,   422,   445,   423,
     424,   425,   426,   130,   131,   521,   752,   427,   729,   428,
     618,   853,   731,   892,   429,   430,   132,   450,   451,   133,
     218,   134,   452,   624,   855,   735,   894,   453,   625,   804,
     737,   135,   738,   859,   136,   903,   904,   137,   758,   935,
     961,   537,   910,   960,   982,   258,   259,   705,   706,   138,
     787,   886,   949,   837,   139,   464,   465,   466,   140,   260,
     141,   634,   808,   862,   635,   740,   861,   142,   238,   820,
     912,   952,   970,   544,   937,   938,   869,   870,   871,   143,
     254,   570,   571,   144,   709,   846,   438
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     209,   211,   213,   479,   473,   531,   565,   459,   273,   460,
     751,   623,   221,   691,   150,   566,   206,   567,   619,   622,
     627,   630,   701,   721,   289,   214,   245,   531,   246,   248,
     623,   773,   220,   255,   535,   777,   547,   781,   497,    38,
      39,   240,   499,   154,   909,   277,   151,  -297,   447,   500,
     446,   501,   502,   572,   678,   462,   296,   461,   296,   449,
     296,   296,  -298,   296,  -295,   296,   522,   296,   586,   296,
      62,   296,   587,   296,   324,   296,   713,   296,   747,   335,
     296,   300,   -30,   -30,   296,    88,   303,   296,    54,   327,
     296,   289,   296,   234,   448,   436,   479,   367,   253,   331,
     584,   463,   455,   363,   371,   365,   444,   368,   296,   747,
     296,   222,   377,   458,   290,   392,   393,   394,   395,   401,
     241,   520,   244,   330,   371,   396,   573,   679,   402,   291,
     407,   282,    88,   307,   289,   536,   410,   324,   470,   470,
      55,    56,   454,    63,   241,   796,    88,   262,  -297,   376,
     467,   310,  -229,   772,   313,   241,   318,   241,   478,   241,
     241,   784,   241,  -298,   241,  -295,   241,   250,   241,   879,
     241,   881,   241,    65,   241,   885,   241,   291,    88,   241,
     865,   290,   291,   241,   -96,   -96,   241,   399,   263,   241,
     367,   241,   401,   291,   372,   128,   736,   376,  -321,  -317,
     291,   470,   -96,   -96,   283,   533,   280,   241,   406,   241,
     -28,   -28,   732,  -318,   372,   291,  -124,   602,    88,   406,
     291,   539,   533,   470,   290,    88,   880,  -163,  -156,   291,
    -156,  -163,   551,  -163,   284,   401,   -96,   -96,   560,   564,
     948,  -124,  -124,  -124,   380,   291,  -229,   291,  -229,    90,
     291,   577,   291,   589,   830,   580,   285,   590,   831,   603,
     604,  -124,  -124,  -124,  -124,   600,  -124,  -124,   291,   381,
     382,   601,   941,   592,   593,   223,   613,   316,   847,   -96,
     -96,    55,    56,   291,   242,  -313,   291,   291,   291,   383,
     384,   385,   386,   291,   387,   388,    90,   324,   510,   748,
     528,   956,   623,   327,   291,   749,   -96,   -96,   242,   365,
      90,   -96,   -96,    92,   973,   291,   565,  -124,   520,   242,
     291,   242,   528,   242,   242,   566,   242,   567,   242,   165,
     242,   291,   242,  -124,   242,   374,   242,  -124,   242,  -124,
     242,   390,    90,   242,   520,   389,   578,   242,   243,   719,
     242,   720,   289,   242,   581,   242,   517,   518,   519,   719,
     277,   723,   917,   287,   288,   390,   447,   447,   446,   446,
     728,   242,   278,   242,    92,   543,   277,   449,   449,    55,
      56,   524,    90,   297,   719,   297,   724,   297,   297,    90,
     297,   942,   297,   943,   297,   549,   297,   121,   297,   942,
     297,   954,   297,   917,   297,   555,   297,   297,    55,    56,
     526,   297,   448,   448,   297,   -96,   -96,   297,   289,   297,
      55,    56,   520,   232,   444,   444,   557,   710,   522,   558,
     917,   750,   917,   579,  -566,   297,   289,   297,   763,  -637,
    -637,  -637,   290,   300,   257,   917,    92,   942,  -302,   972,
     942,   264,   984,    92,   303,   565,   307,   510,   121,   241,
     310,   531,   318,   788,   566,   399,   567,   299,   401,   645,
      55,    56,   641,  -302,  -302,   241,   406,    71,   646,    55,
      56,   674,   671,   800,   323,   290,   326,   696,   329,   700,
     357,   699,   807,  -302,  -302,  -302,  -302,   702,  -302,  -302,
     459,   -23,   460,    71,   632,   633,   815,  -566,   290,   -25,
     667,   722,   668,   515,   516,   517,   518,   519,    90,   405,
     725,    88,   290,   711,    71,   510,   -96,   -96,  -406,   330,
     121,   753,   439,   440,   479,   291,   689,   121,    71,   714,
      88,   786,   447,   764,   446,   686,    55,    56,   462,   564,
     461,  -311,   811,   449,   629,   443,   416,   792,   856,   255,
     858,   417,   470,   439,   440,  -639,  -639,  -639,   813,  -302,
     337,   291,  -640,  -640,  -640,   798,  -311,  -311,   316,   794,
     867,   868,   418,   799,   441,   442,   443,   416,   448,   814,
     826,   818,   417,   836,   463,   827,  -311,  -311,  -311,  -311,
     444,  -311,  -311,   828,   833,   880,   458,   891,   832,   893,
      71,   887,   888,   418,   905,   906,   419,    71,   420,   890,
     908,   925,   480,   242,   730,   936,   852,   470,   754,   336,
     733,   489,   490,   491,   492,   493,   494,   495,   496,   242,
     338,   542,   340,   341,   343,   345,   931,   419,   932,   420,
     569,   347,   755,   349,   841,   351,   842,   470,    88,   352,
     757,   933,   353,   354,   759,   760,   257,   939,   940,   795,
     358,   538,  -311,   360,   767,   670,   689,   541,   955,   780,
     775,   767,   621,  -163,   628,    90,   783,   278,   564,   785,
     983,   835,   707,   742,   743,   546,    73,     0,     0,     0,
       0,    88,   843,   278,    90,     0,     0,   971,  -163,  -163,
     324,     0,     0,   845,     0,     0,     0,     0,     0,     0,
       0,     0,    73,     0,    76,   898,     0,   899,  -163,  -163,
    -163,  -163,     0,  -163,  -163,     0,     0,   802,     0,     0,
       0,   805,     0,    73,     0,     0,    71,     0,   844,    92,
      76,   823,   824,     0,     0,     0,   528,    73,     0,   503,
     840,     0,     0,   505,   506,   507,     0,     0,    92,    88,
       0,    76,     0,   901,     0,   900,     0,     0,   851,     0,
     851,   508,   509,     0,   902,    76,     0,     0,     0,   339,
     510,     0,     0,     0,    88,     0,     0,     0,     0,     0,
    -163,     0,     0,     0,  -163,     0,  -163,     0,   872,     0,
       0,     0,    88,   878,    88,    78,   775,   342,   965,   878,
     966,     0,    90,    88,   866,   976,     0,   977,     0,    73,
       0,   897,     0,   121,     0,     0,    73,    88,     0,     0,
       0,    78,   511,   512,   513,   514,   515,   516,   517,   518,
     519,     0,   121,  -317,   911,     0,     0,    76,     0,     0,
       0,     0,    78,   921,    76,    90,   924,     0,   967,     0,
       0,     0,     0,   979,   929,   978,    78,   969,  -317,  -317,
     365,     0,     0,     0,   981,     0,     0,     0,    80,    88,
       0,    88,     0,     0,     0,     0,     0,     0,  -317,  -317,
    -317,  -317,     0,  -317,  -317,     0,     0,     0,   344,   946,
       0,     0,   968,    71,    80,   934,     0,     0,     0,   980,
       0,     0,     0,     0,   964,     0,     0,     0,     0,    92,
       0,     0,    71,    90,     0,    80,     0,     0,    88,     0,
      88,     0,     0,     0,     0,    88,    88,     0,    78,    80,
       0,     0,     0,     0,     0,    78,     0,  -122,    90,     0,
     569,   985,     0,     0,     0,    73,     0,     0,     0,  -126,
     257,     0,     0,     0,  -317,     0,    90,    88,    90,    88,
       0,   346,  -122,  -122,  -122,     0,     0,    90,     0,     0,
       0,     0,    88,    76,  -126,  -126,  -126,    92,    88,    88,
       0,    90,  -122,  -122,  -122,  -122,     0,  -122,  -122,     0,
       0,     0,     0,   121,  -126,  -126,  -126,  -126,     0,  -126,
    -126,    80,    92,     0,     0,     0,     0,     0,    80,     0,
       0,     0,     0,     0,    88,     0,     0,     0,    88,     0,
      92,     0,    92,     0,     0,     0,    88,     0,     0,     0,
      71,    92,     0,    90,     0,    90,     0,     0,  -122,     0,
       0,     0,     0,     0,     0,    92,     0,     0,     0,     0,
    -126,     0,     0,     0,  -122,     0,     0,     0,  -122,     0,
    -122,   121,     0,     0,    78,     0,  -126,     0,     0,     0,
    -126,     0,  -126,    71,     0,     0,     0,     0,     0,   569,
       0,     0,    90,     0,    90,     0,   121,     0,     0,    90,
      90,     0,     0,     0,     0,     0,     0,    92,     0,    92,
       0,     0,     0,     0,   121,     0,   121,     0,   411,   412,
     413,   414,    73,     0,     0,   121,     0,     0,    82,     0,
       0,    90,     0,    90,  -123,     0,     0,     0,     0,   121,
       0,    73,     0,   415,   416,     0,    90,    80,     0,   417,
      76,    71,    90,    90,    82,     0,    92,     0,    92,  -123,
    -123,  -123,     0,    92,    92,     0,     0,     0,     0,    76,
     418,     0,     0,     0,     0,    82,    71,     0,     0,  -123,
    -123,  -123,  -123,     0,  -123,  -123,  -164,     0,    90,    82,
       0,   121,    90,   121,    71,    92,    71,    92,     0,     0,
      90,     0,    84,     0,   419,    71,   420,     0,     0,     0,
      92,  -164,  -164,   327,     0,     0,    92,    92,     0,    71,
       0,   348,     0,     0,     0,     0,     0,     0,    84,     0,
       0,  -164,  -164,  -164,  -164,  -123,  -164,  -164,     0,     0,
     121,    78,   121,     0,     0,     0,     0,   121,   121,    84,
       0,  -123,    92,     0,     0,  -123,    92,  -123,     0,    73,
      78,    82,     0,    84,    92,     0,     0,     0,    82,     0,
       0,    71,     0,    71,     0,     0,     0,     0,     0,   121,
       0,   121,     0,     0,     0,     0,     0,    76,     0,     0,
       0,     0,     0,     0,   121,   350,     0,     0,     0,     0,
     121,   121,    73,  -164,     0,     0,  -304,  -164,     0,  -164,
       0,     0,     0,     0,    80,     0,     0,     0,     0,     0,
      71,   120,    71,     0,     0,     0,     0,    71,    71,     0,
      76,  -304,  -304,    80,     0,    84,   121,   508,   509,  -127,
     121,     0,    84,     0,     0,     0,   510,   120,   121,     0,
       0,  -304,  -304,  -304,  -304,     0,  -304,  -304,     0,    71,
       0,    71,     0,     0,  -127,  -127,  -127,     0,   120,     0,
      73,     0,     0,     0,    71,     0,     0,     0,    78,     0,
      71,    71,   120,   123,  -127,  -127,  -127,  -127,     0,  -127,
    -127,     0,     0,     0,     0,    73,     0,    82,    76,   512,
     513,   514,   515,   516,   517,   518,   519,     0,     0,   233,
       0,     0,     0,    73,   356,    73,    71,     0,     0,     0,
      71,    78,     0,    76,    73,     0,     0,  -304,    71,   291,
     233,     0,  -125,     0,     0,     0,     0,     0,    73,     0,
    -127,    76,     0,    76,   123,     0,     0,     0,    67,     0,
       0,    80,    76,     0,   120,     0,  -127,  -125,  -125,  -125,
    -127,   120,  -127,     0,     0,     0,    76,     0,     0,     0,
       0,    84,     0,     0,    67,     0,   359,  -125,  -125,  -125,
    -125,     0,  -125,  -125,     0,     0,     0,     0,     0,    78,
      73,     0,    73,     0,    80,    67,   411,   620,   413,   414,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    67,
       0,     0,     0,     0,    78,     0,   123,     0,    76,     0,
      76,   415,   416,   123,     0,     0,     0,   417,     0,     0,
       0,     0,    78,  -125,    78,     0,     0,     0,     0,    73,
       0,    73,     0,    78,     0,     0,    73,    73,   418,  -125,
       0,     0,     0,  -125,     0,  -125,     0,    78,     0,     0,
       0,     0,    80,     0,    82,     0,     0,    76,     0,    76,
       0,     0,   380,     0,    76,    76,     0,     0,    73,     0,
      73,    67,   419,    82,   420,     0,     0,    80,    67,    68,
     120,     0,     0,    73,     0,     0,     0,   381,   382,    73,
      73,     0,     0,     0,     0,    80,    76,    80,    76,    78,
       0,    78,     0,     0,     0,    68,    80,   383,   384,   385,
     386,    76,   387,   388,   505,   506,   507,    76,    76,     0,
      80,     0,     0,     0,     0,    73,    68,     0,    84,    73,
       0,     0,   508,   509,     0,     0,     0,    73,   456,   440,
      68,   510,   233,     0,     0,     0,     0,    84,    78,     0,
      78,     0,     0,    76,     0,    78,    78,    76,     0,    69,
       0,   415,   416,     0,     0,    76,     0,   417,     0,     0,
       0,     0,    80,     0,    80,     0,     0,     0,     0,     0,
       0,     0,     0,   390,     0,    69,     0,    78,   418,    78,
    -303,    82,     0,   511,   512,   513,   514,   515,   516,   517,
     518,   519,    78,     0,     0,     0,    69,    67,    78,    78,
       0,     0,    68,     0,     0,  -303,  -303,   300,     0,    68,
      69,    80,   457,    80,   420,     0,     0,     0,    80,    80,
       0,     0,    86,     0,    82,  -303,  -303,  -303,  -303,     0,
    -303,  -303,     0,     0,    78,     0,     0,   120,    78,     0,
       0,     0,     0,     0,     0,     0,    78,     0,    86,     0,
      80,     0,    80,     0,     0,    84,   120,     0,     0,     0,
       0,     0,     0,     0,     0,    80,     0,     0,     0,    86,
       0,    80,    80,   439,   440,     0,     0,     0,     0,  -306,
       0,     0,    69,    86,     0,     0,     0,     0,     0,    69,
       0,     0,    82,     0,   626,   442,   443,   416,    84,   123,
       0,  -303,   417,   291,  -306,  -306,   303,    80,     0,     0,
       0,    80,     0,     0,     0,     0,     0,    82,   123,    80,
     456,   440,     0,   418,  -306,  -306,  -306,  -306,     0,  -306,
    -306,     0,     0,     0,     0,    82,     0,    82,    68,     0,
       0,   741,   633,   415,   416,     0,    82,     0,     0,   417,
       0,     0,     0,   413,   414,    86,     0,   419,     0,   420,
      82,     0,    86,    95,    67,     0,    84,     0,     0,     0,
     418,     0,   838,   440,   120,     0,   415,   416,     0,     0,
       0,     0,   417,    67,     0,   638,     0,     0,     0,   224,
       0,    84,   895,   440,     0,   415,   416,     0,     0,     0,
    -306,   417,   291,   418,   457,     0,   420,     0,     0,    84,
     256,    84,    82,     0,    82,   415,   896,   120,    69,     0,
      84,   417,   418,     0,    95,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    84,     0,   233,   419,     0,   420,
       0,     0,   418,   669,     0,     0,     0,  -308,   673,     0,
       0,     0,     0,     0,   677,     0,   419,     0,   839,     0,
       0,    82,     0,    82,     0,     0,     0,     0,    82,    82,
       0,     0,  -308,  -308,   307,   698,   419,     0,   420,   123,
       0,     0,     0,     0,     0,   120,    84,     0,    84,     0,
       0,    86,  -308,  -308,  -308,  -308,    95,  -308,  -308,     0,
      82,    67,    82,    95,     0,    68,     0,     0,     0,     0,
     120,     0,     0,     0,     0,    82,     0,     0,     0,     0,
       0,    82,    82,     0,    68,   962,   440,     0,   120,     0,
     120,     0,     0,     0,     0,    84,     0,    84,     0,   120,
       0,     0,    84,    84,    67,     0,     0,   123,   415,   416,
       0,     0,     0,   120,   417,     0,     0,    82,     0,     0,
       0,    82,     0,     0,   974,   440,     0,     0,  -308,    82,
     291,     0,   123,     0,    84,   963,    84,    96,     0,     0,
      97,     0,     0,     0,     0,    69,     0,   415,   416,    84,
     123,     0,   123,   975,     0,    84,    84,     0,     0,     0,
       0,   123,     0,   225,    69,   120,   226,   120,     0,   419,
       0,   420,    67,     0,   418,   123,     0,     0,     0,     0,
       0,     0,     0,     0,   225,     0,     0,    97,     0,     0,
       0,    84,   582,     0,     0,    84,     0,    67,    96,     0,
       0,    97,    68,    84,     0,     0,     0,     0,   419,     0,
     420,     0,     0,     0,   120,    67,   120,    67,    86,     0,
       0,   120,   120,     0,   100,     0,    67,   123,     0,   123,
       0,     0,   817,     0,     0,   819,     0,    86,     0,     0,
      67,     0,   825,     0,     0,    68,   829,     0,     0,     0,
     227,     0,     0,   120,     0,   120,     0,     0,   834,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   120,     0,
      96,   227,     0,    97,   120,   120,   123,    96,   123,     0,
      97,     0,    69,   123,   123,   100,     0,     0,     0,     0,
       0,     0,    67,     0,    67,     0,     0,     0,   873,   875,
       0,   876,     0,     0,     0,     0,     0,   883,     0,     0,
     120,     0,     0,    68,   120,   123,     0,   123,     0,     0,
       0,     0,   120,     0,     0,    69,   889,     0,     0,     0,
     123,     0,     0,     0,     0,     0,   123,   123,    68,     0,
       0,    67,     0,    67,     0,     0,     0,   916,    67,    67,
       0,     0,     0,   922,     0,    86,    68,   100,    68,    95,
       0,     0,     0,     0,   100,   102,     0,    68,     0,     0,
       0,     0,   123,     0,     0,     0,   123,     0,    95,     0,
      67,    68,    67,     0,   123,     0,     0,     0,     0,     0,
       0,   228,     0,    69,     0,    67,   945,     0,    86,   947,
       0,    67,    67,     0,   950,     0,   225,     0,     0,   583,
       0,     0,   102,     0,     0,     0,     0,  -310,    69,     0,
       0,   958,     0,     0,     0,  -312,   102,     0,     0,     0,
       0,     0,     0,    68,     0,    68,    69,    67,    69,     0,
       0,    67,  -310,  -310,   313,     0,     0,    69,     0,    67,
    -312,  -312,   318,     0,     0,     0,     0,     0,     0,     0,
       0,    69,  -310,  -310,  -310,  -310,    86,  -310,  -310,     0,
    -312,  -312,  -312,  -312,     0,  -312,  -312,     0,     0,     0,
       0,     0,    68,     0,    68,     0,     0,     0,     0,    68,
      68,    86,     0,   227,     0,     0,   256,     0,   102,     0,
       0,     0,     0,     0,     0,   102,     0,     0,     0,    86,
       2,    86,     0,    69,     0,    69,   155,   156,     0,     0,
      86,    68,     0,    68,   105,     0,     0,   157,   158,   159,
       0,   160,     0,     0,    86,   162,    68,     0,  -310,    95,
     291,     0,    68,    68,     0,     0,  -312,   163,   291,   164,
     229,     0,    27,    28,     0,     0,     0,    30,   166,     0,
       0,     0,    69,     0,    69,     0,   167,     0,     0,    69,
      69,   229,     0,    96,     0,     0,    97,     0,    68,     0,
       0,     0,    68,     0,     0,   105,    86,     0,    86,     0,
      68,     0,    96,     0,     0,    97,     0,    41,     0,     0,
     168,    69,     0,    69,    48,     0,     0,    95,     0,     0,
       0,     0,     0,   169,     0,     0,    69,     0,     0,     0,
       0,     0,    69,    69,     0,     0,     0,     0,     0,     0,
       0,     0,    95,   247,   585,    86,     0,    86,     0,     0,
     107,     0,    86,    86,     0,     0,     0,     0,     0,     0,
      95,     0,    95,     0,     0,     0,     0,   105,    69,     0,
     100,    95,    69,     0,   105,     0,   231,     0,     0,     0,
      69,     0,     0,  -307,    86,    95,    86,     0,     0,   100,
       0,     0,     0,     0,     0,     0,     0,   231,     0,    86,
       0,     0,     0,     0,     0,    86,    86,     0,  -307,  -307,
     399,   107,     0,     0,     0,   108,     0,     0,     0,     0,
     225,     0,  -320,    97,     0,     0,     0,     0,  -307,  -307,
    -307,  -307,     0,  -307,  -307,     0,     0,    95,     0,    95,
       0,    86,     0,     0,     0,    86,     0,  -320,  -320,   406,
       0,     0,     0,    86,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    96,     0,     0,    97,  -320,  -320,  -320,
    -320,     0,  -320,  -320,     0,     0,   108,   109,     0,     0,
       0,     0,     0,   107,     0,     0,    95,     0,    95,     0,
     107,     0,     0,    95,    95,     0,     0,     0,     0,     0,
       0,     0,     0,   229,  -307,     0,   291,   227,     0,     0,
       0,   102,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    95,     0,    95,     0,     0,
     102,    96,     0,     0,    97,     0,     0,     0,   109,     0,
      95,     0,   111,  -320,     0,   291,    95,    95,   108,     0,
     100,     0,     0,     0,     0,   108,    96,     0,     0,    97,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    96,  -305,    96,    97,     0,    97,
       0,     0,    95,  -313,     0,    96,    95,     0,    97,     0,
       0,     0,     0,     0,    95,     0,     0,     0,     0,    96,
    -305,  -305,    97,   111,     0,     0,     0,     0,  -313,  -313,
     109,     0,     0,     0,     0,     0,     0,   109,   100,   231,
    -305,  -305,  -305,  -305,     0,  -305,  -305,     0,  -313,  -313,
    -313,  -313,     0,  -313,  -313,     0,     0,     0,     0,     0,
       0,     0,     0,   100,     0,     0,     0,     0,   102,     0,
       0,    96,     0,    96,    97,     0,    97,     0,     0,     0,
       0,   100,     0,   100,     0,     0,     0,  -314,     0,     0,
     105,     0,   100,     0,     0,   111,     0,     0,     0,     0,
       0,     0,   111,     0,     0,     0,   100,     0,     0,   105,
       0,   102,  -314,  -314,     0,     0,  -305,     0,   291,     0,
      96,  -318,    96,    97,  -313,    97,   291,    96,    96,     0,
      97,    97,  -314,  -314,  -314,  -314,     0,  -314,  -314,     0,
       0,     0,     0,     0,   118,     0,  -318,  -318,   401,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   100,    96,
     100,    96,    97,     0,    97,     0,  -318,  -318,  -318,  -318,
       0,  -318,  -318,     0,    96,     0,     0,    97,     0,   102,
      96,    96,     0,    97,    97,     0,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,     0,   102,   118,   107,   100,  -314,   100,
     291,     0,     0,     0,   100,   100,    96,     0,     0,    97,
      96,     0,   102,    97,   102,   107,     0,   229,    96,     0,
       0,    97,     0,   102,     0,  -641,  -641,  -641,     0,     0,
       0,     0,  -318,     0,   291,     0,   100,   102,   100,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   100,     0,     0,     0,     0,     0,   100,   100,     0,
     105,   108,     0,     0,     0,     0,     0,   118,     0,     2,
       0,     0,     0,     0,   118,   155,   156,     0,     0,     0,
     108,     0,     0,     0,     0,     0,   157,   158,   159,   102,
     160,   102,     0,   100,   162,     0,     0,   100,     0,     0,
       0,     0,     0,     0,     0,   100,   163,     0,   164,     0,
       0,    27,    28,     0,     0,     0,    30,   166,     0,     0,
       0,     0,     0,   109,     0,   167,   503,   504,   105,     0,
     505,   506,   507,   231,     0,     0,    38,    39,   102,     0,
     102,     0,   109,     0,     0,   102,   102,     0,   508,   509,
       0,     0,     0,   105,     0,     0,    41,   510,     0,   168,
       0,     0,     0,    48,     0,     0,     0,     0,     0,     0,
       0,   105,   169,   105,     0,     0,   107,   102,     0,   102,
       0,     0,   105,     0,     0,    54,     0,     0,   111,     0,
     263,     0,   102,     0,     0,     0,   105,     0,   102,   102,
       0,     0,     0,     0,     0,     0,     0,   111,     0,   511,
     512,   513,   514,   515,   516,   517,   518,   519,     0,     0,
       0,     0,     0,     0,   644,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   102,     0,     0,     0,   102,     0,
       0,   108,     0,     0,   107,     0,   102,     0,   105,     0,
     105,     0,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   107,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   107,     0,   107,
       0,     0,     0,     0,     0,     0,     0,   105,   107,   105,
       2,     0,     0,   109,   105,   105,   155,   156,     0,   108,
     637,     0,   107,     0,     0,   145,   146,   157,   158,   159,
       0,   160,   874,     0,     0,   162,     0,     0,     0,     0,
       0,     0,     0,     0,   108,     0,   105,   163,   105,   164,
       0,     0,    27,    28,     0,     0,     0,    30,   166,     0,
       0,   105,   108,     0,   108,     0,   167,   105,   105,     0,
       0,     0,     0,   108,   107,     0,   107,     0,   111,     0,
     118,   109,     0,     0,     0,     0,   286,   108,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    41,     0,   118,
     168,     0,     0,   105,    48,     0,   109,   105,     0,     0,
       0,     0,     0,   169,     0,   105,     0,     0,     0,     0,
       0,     0,     0,   107,   109,   107,   109,     0,    55,    56,
     107,   107,     0,     0,     0,   109,     0,     0,     0,   108,
       0,   108,     0,     0,   398,     0,   111,     0,     0,   109,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   107,     0,   107,     0,     0,     0,     0,     0,
       0,   111,     0,     0,   469,     0,     0,   107,     0,     0,
       0,     0,     0,   107,   107,     0,     0,     0,   108,   111,
     108,   111,     0,     0,     0,   108,   108,     0,     0,     0,
     111,   109,     0,   109,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,     0,     0,     0,     0,   107,
       0,     0,     0,   107,     0,     0,     0,   108,     0,   108,
       0,   107,     0,     0,     0,   525,     0,   527,     0,     0,
       0,     0,   108,   532,     0,     0,     0,     0,   108,   108,
     109,     0,   109,     0,     0,     0,     0,   109,   109,     0,
     118,     0,     0,     0,     0,     0,   111,     0,   111,   548,
       0,   552,     0,     0,   556,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   108,     0,   575,     0,   108,   109,
       0,   109,     0,     0,     0,     0,   108,     0,     0,     0,
       0,     0,     0,     0,   109,     0,   591,     0,     0,     0,
     109,   109,     0,     0,     0,   111,     0,   111,     2,     0,
       0,     0,   111,   111,   155,   156,     0,     0,   118,     0,
       0,     0,     0,     0,     0,   157,   158,   159,     0,   160,
       0,     0,     0,   162,     0,     0,   109,     0,     0,     0,
     109,     0,     0,   118,   111,   163,   111,   164,   109,     0,
      27,    28,     0,     0,     0,    30,   166,     0,     0,   111,
       0,   118,     0,   118,   167,   111,   111,     0,     0,     0,
       0,     0,   118,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -321,     0,     0,     0,   118,     0,     0,     0,
       0,     0,     0,     0,     0,   765,     0,     0,   168,     0,
       0,   111,    48,     0,     0,   111,     0,  -321,  -321,   371,
       0,   169,     0,   111,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   766,   617,  -321,  -321,  -321,
    -321,   195,  -321,  -321,     0,     0,     0,     0,   118,     0,
     118,   216,   217,     0,     0,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,     0,     0,     0,     0,     0,   631,
       0,   261,     0,     0,     0,     0,     0,     0,   195,   274,
       0,     0,     0,   636,     0,     0,   642,   118,   643,   118,
       0,     0,     0,     0,   118,   118,     0,     0,     0,   372,
       0,     0,     0,  -321,     0,   291,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,     0,     0,     0,   118,     0,   118,     0,
       0,     0,     0,     0,     0,     0,   665,     0,   666,     0,
       0,   118,     0,     0,     0,     0,     0,   118,   118,   675,
       0,     0,  -309,     0,     0,     0,   681,   195,   915,   684,
     685,     0,   687,     0,     0,     0,   693,     0,   468,     0,
       0,     0,     0,   697,     0,   474,     0,  -309,  -309,   310,
       0,     0,   475,   118,     0,     0,     0,   118,     0,   708,
       0,   476,   477,     0,     0,   118,     0,  -309,  -309,  -309,
    -309,     0,  -309,  -309,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,     0,     0,   302,     0,   305,   306,
     734,   309,     0,   312,     0,   315,     0,   317,     0,   320,
       0,   322,     0,   325,     0,   328,     0,   355,   361,     0,
     545,     0,   366,     0,     0,   370,     0,     0,   375,     0,
     379,     0,     0,  -309,   568,   291,     0,     0,     0,     0,
       0,   574,     0,     0,   195,     0,   404,   756,   409,     0,
       0,     0,     0,     0,     0,   761,     0,   762,     0,     0,
       0,     0,     0,     0,     0,   774,     0,     0,     0,     0,
       0,     0,   598,     0,     0,  -319,     0,     0,   292,   294,
     295,     0,   301,     0,   304,   789,     0,   308,     0,   311,
     791,   314,   793,     0,     0,   319,     0,   321,     0,     0,
    -319,  -319,   367,   332,     0,   801,     0,   364,   803,     0,
       0,   369,   806,   373,     0,   809,   378,     0,     0,     0,
    -319,  -319,  -319,  -319,     0,  -319,  -319,     0,     0,     0,
       0,   400,   403,     0,   408,     0,     0,     0,     0,   821,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,     0,     0,     0,
       0,   605,     0,     0,   606,   607,   608,   609,   610,   611,
     612,     0,     0,     0,     0,     0,     0,   854,   614,     0,
     857,     0,     0,   860,   292,   294,   295,   301,   304,   308,
     311,   314,     0,   319,   321,     0,  -319,   332,   291,   364,
       0,   369,     0,   373,   378,     0,   882,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   400,     0,   403,   408,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   364,   907,   369,   373,
     378,     0,     0,   403,   408,   913,   914,     0,     0,   503,
     504,   920,     0,   505,   506,   507,     0,     0,     0,     0,
       0,   926,   927,     0,     0,   930,     0,     0,   403,     0,
       0,   508,   509,     0,     0,     0,     0,     0,     0,     0,
     510,     0,     0,     0,   647,   648,   649,   650,   651,   652,
     653,   654,   655,   656,   657,   658,   659,   660,   661,   662,
     663,   664,     0,     0,     0,     0,     0,     0,     0,     0,
     951,     0,     0,   953,     0,     0,     0,     0,   676,     0,
       0,     0,     0,     0,   683,     0,     0,     0,     0,     0,
       0,     0,   511,   512,   513,   514,   515,   516,   517,   518,
     519,     0,     0,     0,   568,    55,    56,     0,     0,     0,
       0,     0,     0,   704,     0,     0,     0,   314,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   712,     0,     0,
       0,     0,    -3,     1,     0,   -27,   -27,     2,     3,     4,
       5,   598,     6,     7,     8,     9,    10,     0,     0,     0,
       0,    11,    12,    13,    14,    15,    16,    17,    18,   195,
       0,     0,    19,     0,     0,   195,    20,    21,     0,    22,
       0,     0,     0,   739,    23,    24,    25,    26,   744,    27,
      28,     0,     0,    29,    30,    31,     0,     0,     0,     0,
       0,     0,     0,    32,    33,    34,     0,     0,     0,     0,
      35,     0,    36,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   503,   504,     0,     0,
     505,   506,   507,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,     0,    50,     0,    51,    52,   508,   509,
      53,     0,     0,   568,     0,     0,     0,   510,     0,     0,
       0,     0,     0,    54,     0,    55,    56,     0,    57,     0,
      58,     0,    59,   598,     0,     0,   797,     0,     0,     0,
       0,     0,   195,     0,     0,     0,   195,     0,     0,     0,
       0,     0,   810,     0,     0,     0,     0,     0,     0,   812,
       0,     0,     0,     0,   816,     0,   588,     0,     0,   511,
     512,   513,   514,   515,   516,   517,   518,   519,     0,     0,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   704,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     403,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   863,     0,   864,     0,   373,     0,     0,   195,
      -2,   281,   944,   -27,   -27,     2,     3,     4,     5,     0,
       6,     7,     8,     9,    10,     0,     0,     0,     0,    11,
      12,    13,    14,    15,    16,    17,    18,     0,     0,     0,
      19,     0,     0,     0,    20,    21,     0,    22,     0,     0,
       0,     0,    23,    24,    25,    26,     0,    27,    28,     0,
       0,    29,    30,    31,     0,     0,     0,     0,     0,     0,
       0,    32,    33,    34,     0,     0,     0,     0,    35,     0,
      36,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     195,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,     0,    50,     0,    51,    52,     0,     0,    53,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    54,     0,    55,    56,     0,    57,     0,    58,   431,
      59,   -27,   -27,     2,     3,     4,     5,     0,     6,     7,
       8,     9,    10,  -107,  -107,  -107,  -107,    11,    12,    13,
      14,    15,    16,    17,    18,     0,     0,     0,    19,     0,
       0,     0,    20,    21,     0,    22,  -107,  -107,  -107,  -107,
      23,    24,    25,    26,  -107,    27,    28,     0,     0,    29,
      30,    31,     0,     0,     0,     0,     0,     0,     0,    32,
      33,    34,  -107,  -107,  -107,  -107,    35,     0,    36,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,  -107,
      50,  -107,    51,    52,     0,     0,    53,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
       0,    55,    56,     0,    57,     0,    58,  -107,    59,   431,
       0,   -27,   -27,     2,     3,     4,     5,     0,     6,     7,
       8,     9,    10,     0,     0,  -106,  -106,    11,    12,    13,
      14,    15,    16,    17,    18,     0,     0,     0,    19,     0,
       0,     0,    20,    21,     0,    22,     0,     0,  -106,  -106,
      23,    24,    25,    26,  -106,    27,    28,     0,     0,    29,
      30,    31,     0,     0,     0,     0,     0,     0,     0,    32,
      33,    34,  -106,  -106,  -106,  -106,    35,     0,    36,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,  -106,
      50,  -106,    51,    52,     0,     0,    53,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
       0,    55,    56,     0,    57,     0,    58,   431,    59,   -27,
     -27,     2,     3,     4,     5,     0,     6,     7,     8,     9,
      10,     0,     0,  -522,  -522,    11,    12,    13,    14,    15,
      16,    17,    18,     0,     0,     0,    19,     0,     0,     0,
      20,    21,     0,    22,  -522,  -522,  -522,  -522,    23,    24,
      25,    26,  -522,    27,    28,     0,     0,    29,    30,    31,
       0,     0,     0,     0,     0,     0,     0,    32,    33,    34,
       0,     0,     0,  -522,    35,     0,    36,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,  -522,    50,  -522,
      51,    52,     0,     0,    53,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,    55,
      56,     0,    57,     0,    58,   431,    59,   -27,   -27,     2,
       3,     4,     5,     0,     6,     7,     8,     9,    10,     0,
       0,  -594,  -594,    11,    12,    13,    14,    15,    16,    17,
      18,     0,     0,     0,    19,     0,     0,     0,    20,    21,
       0,    22,  -594,  -594,  -594,  -594,    23,    24,    25,    26,
    -594,    27,    28,     0,     0,    29,    30,    31,     0,     0,
       0,     0,     0,     0,     0,    32,    33,    34,     0,     0,
       0,  -594,    35,     0,    36,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,  -594,    50,  -594,    51,    52,
       0,     0,    53,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    54,     0,    55,    56,     0,
      57,     0,    58,   431,    59,   -27,   -27,     2,     3,     4,
       5,     0,     6,     7,     8,     9,    10,     0,     0,  -523,
    -523,    11,    12,    13,    14,    15,    16,    17,    18,     0,
       0,     0,    19,     0,     0,     0,    20,    21,     0,    22,
    -523,  -523,  -523,  -523,    23,    24,    25,    26,  -523,    27,
      28,     0,     0,    29,    30,    31,     0,     0,     0,     0,
       0,     0,     0,    32,    33,    34,     0,     0,     0,  -523,
      35,     0,    36,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,  -523,    50,  -523,    51,    52,     0,     0,
      53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    54,     0,    55,    56,     0,    57,     0,
      58,   431,    59,   -27,   -27,     2,     3,     4,     5,     0,
       6,     7,     8,     9,    10,     0,     0,  -595,  -595,    11,
      12,    13,    14,    15,    16,    17,    18,     0,     0,     0,
      19,     0,     0,     0,    20,    21,     0,    22,  -595,  -595,
    -595,  -595,    23,    24,    25,    26,  -595,    27,    28,     0,
       0,    29,    30,    31,     0,     0,     0,     0,     0,     0,
       0,    32,    33,    34,     0,     0,     0,  -595,    35,     0,
      36,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,  -595,    50,  -595,    51,    52,     0,     0,    53,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    54,     0,    55,    56,     0,    57,     0,    58,   431,
      59,   -27,   -27,     2,     3,     4,     5,     0,     6,     7,
       8,     9,    10,  -106,  -106,  -106,  -106,    11,    12,    13,
      14,    15,    16,    17,    18,     0,     0,     0,    19,     0,
       0,     0,    20,    21,     0,    22,     0,     0,  -106,  -106,
      23,    24,    25,    26,  -106,    27,    28,     0,     0,    29,
      30,    31,     0,     0,     0,     0,     0,     0,     0,    32,
      33,    34,     0,     0,     0,  -106,    35,     0,    36,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,  -106,
      50,  -106,    51,    52,     0,     0,    53,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
       0,    55,    56,     0,    57,     0,    58,   431,    59,   -27,
     -27,     2,     3,     4,     5,     0,     6,     7,     8,     9,
      10,     0,     0,  -106,  -106,    11,    12,    13,    14,    15,
      16,    17,    18,     0,     0,     0,    19,     0,     0,     0,
      20,    21,     0,    22,  -106,  -106,  -106,  -106,    23,    24,
      25,    26,  -106,    27,    28,     0,     0,    29,    30,    31,
       0,     0,     0,     0,     0,     0,     0,    32,    33,    34,
       0,     0,     0,  -106,    35,     0,    36,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,  -106,    50,  -106,
      51,    52,     0,     0,    53,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,    55,
      56,     0,    57,     0,    58,   431,    59,   -27,   -27,     2,
       3,     4,     5,     0,     6,     7,     8,     9,    10,     0,
       0,  -106,  -106,    11,    12,    13,    14,    15,    16,    17,
      18,     0,     0,     0,    19,     0,     0,     0,    20,    21,
       0,    22,     0,  -106,  -106,  -106,    23,    24,    25,    26,
    -106,    27,    28,     0,     0,    29,    30,    31,     0,     0,
       0,     0,     0,     0,     0,    32,    33,    34,     0,     0,
       0,  -106,    35,     0,    36,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,  -106,    50,  -106,    51,    52,
       0,     0,    53,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    54,     0,    55,    56,     0,
      57,     0,    58,   431,    59,   -27,   -27,     2,     3,     4,
       5,     0,     6,     7,     8,     9,    10,     0,     0,  -106,
    -106,    11,    12,    13,    14,    15,    16,    17,    18,     0,
       0,     0,    19,     0,     0,     0,    20,    21,     0,    22,
       0,     0,  -106,  -106,    23,    24,    25,    26,  -106,    27,
      28,     0,     0,    29,    30,    31,     0,     0,     0,     0,
       0,     0,     0,    32,    33,    34,     0,     0,  -106,  -106,
      35,     0,    36,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,  -106,    50,  -106,    51,    52,     0,     0,
      53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    54,     0,    55,    56,     0,    57,     0,
      58,   431,    59,   -27,   -27,     2,     3,     4,     5,     0,
       6,     7,     8,     9,    10,     0,     0,  -106,  -106,    11,
      12,    13,    14,    15,    16,    17,    18,     0,     0,     0,
      19,     0,     0,     0,    20,    21,     0,    22,     0,     0,
    -106,  -106,    23,    24,    25,    26,  -106,    27,    28,     0,
       0,    29,    30,    31,     0,     0,     0,     0,     0,     0,
       0,    32,    33,    34,     0,     0,     0,  -106,    35,     0,
      36,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,  -106,    50,  -106,    51,    52,     0,     0,    53,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    54,     0,    55,    56,     0,    57,     0,    58,   431,
      59,   -27,   -27,     2,     3,     4,     5,     0,     6,     7,
       8,     9,    10,     0,     0,     0,     0,    11,    12,    13,
      14,    15,    16,    17,    18,     0,     0,     0,    19,     0,
       0,     0,    20,    21,     0,    22,     0,     0,     0,     0,
      23,    24,    25,    26,     0,    27,    28,     0,     0,    29,
      30,    31,     0,     0,     0,     0,     0,     0,     0,    32,
      33,    34,     0,     0,     0,     0,    35,     0,    36,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,     0,
      50,     0,    51,    52,     0,     0,    53,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
       0,    55,    56,     0,    57,     0,    58,  -106,    59,     2,
       0,     4,     5,     0,     6,   155,   156,     9,     0,     0,
       0,     0,     0,    11,    12,    13,   157,   158,   159,     0,
     160,     0,     0,   161,   162,     0,     0,     0,    20,    21,
       0,     0,     0,     0,     0,     0,   163,     0,   164,     0,
       0,    27,    28,     0,     0,   165,    30,   166,     0,     0,
       0,     0,     0,     0,     0,   167,     0,     0,     0,     0,
       0,     0,     0,     0,    36,     0,    38,    39,     0,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,    41,     0,     0,   168,
      45,     0,     0,    48,     0,     0,     0,     0,    51,    52,
     267,   268,   169,     0,     0,     0,     0,     0,   170,   171,
       0,     0,     0,     0,     0,    54,   269,     0,     0,     0,
      57,   957,    58,     2,    59,     4,     5,     0,     6,   155,
     156,     9,     0,     0,     0,     0,     0,    11,    12,    13,
     157,   158,   159,     0,   160,     0,     0,   161,   162,     0,
       0,     0,    20,    21,     0,     0,     0,     0,     0,     0,
     163,     0,   164,     0,     0,    27,    28,     0,     0,   165,
      30,   166,     0,     0,     0,     0,     0,     0,     0,   167,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
      38,    39,     0,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
      41,     0,     0,   168,    45,     0,     0,    48,     0,     0,
       0,     0,    51,    52,     0,     0,   169,     0,     0,     0,
       0,     0,   170,   171,     0,     0,     0,     0,     0,    54,
     269,     0,     0,   563,    57,     0,    58,     2,    59,     4,
       5,     0,     6,   155,   156,     9,     0,     0,     0,     0,
       0,    11,    12,    13,   157,   158,   159,     0,   160,     0,
       0,   161,   162,     0,     0,     0,    20,    21,     0,     0,
       0,     0,     0,     0,   163,     0,   164,     0,     0,    27,
      28,     0,     0,   165,    30,   166,     0,     0,     0,     0,
       0,     0,     0,   167,     0,     0,     0,     0,     0,     0,
       0,     0,    36,     0,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,     0,     0,   168,    45,     0,
       0,    48,     0,     0,     0,     0,    51,    52,   267,     0,
     169,     0,     0,     0,     0,     0,   170,   171,     0,     0,
       0,     0,     0,    54,   269,     0,     0,     0,    57,     0,
      58,     2,    59,     4,     5,     0,     6,   155,   156,     9,
       0,     0,     0,     0,     0,    11,    12,    13,   157,   158,
     159,     0,   160,     0,     0,   161,   162,     0,     0,     0,
      20,    21,     0,     0,     0,     0,     0,     0,   163,     0,
     164,     0,     0,    27,    28,     0,     0,   165,    30,   166,
       0,     0,     0,     0,     0,     0,     0,   167,     0,     0,
       0,     0,     0,     0,     0,     0,    36,     0,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    41,     0,
       0,   168,    45,     0,     0,    48,     0,     0,     0,     0,
      51,    52,   597,     0,   169,     0,     0,     0,     0,     0,
     170,   171,     0,     0,     0,     0,     0,    54,   172,     0,
       0,     0,    57,     0,    58,     2,    59,     4,     5,     0,
       6,   155,   156,     9,     0,     0,     0,     0,     0,    11,
      12,    13,   157,   158,   159,     0,   160,     0,     0,   161,
     162,     0,     0,     0,    20,    21,     0,     0,     0,     0,
       0,     0,   163,     0,   164,     0,     0,    27,    28,     0,
       0,   165,    30,   166,     0,     0,     0,     0,     0,     0,
       0,   167,     0,     0,     0,     0,     0,     0,     0,     0,
      36,     0,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,     0,     0,   168,    45,     0,     0,    48,
       0,     0,     0,     0,    51,    52,     0,     0,   169,     0,
       0,     0,     0,     0,   170,   171,     0,     0,     0,     0,
       0,    54,   172,     0,     0,     0,    57,     0,    58,     2,
      59,     4,     5,     0,     6,   155,   156,     9,     0,     0,
       0,     0,     0,    11,    12,    13,   157,   158,   159,     0,
     160,     0,     0,   161,   162,     0,     0,     0,    20,    21,
       0,     0,     0,     0,     0,     0,   163,     0,   164,     0,
       0,    27,    28,     0,     0,   165,    30,   166,     0,     0,
       0,     0,     0,     0,     0,   167,     0,     0,     0,     0,
       0,     0,     0,     0,    36,     0,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,     0,     0,   168,
      45,     0,     0,    48,     0,     0,     0,     0,    51,    52,
       0,     0,   169,     0,     0,     0,     0,     0,   170,   171,
       0,     0,     0,     0,     0,    54,   265,     0,     0,     0,
      57,     0,    58,     2,    59,     4,     5,     0,     6,   155,
     156,     9,     0,     0,     0,     0,     0,    11,    12,    13,
     157,   158,   159,     0,   160,     0,     0,   161,   162,     0,
       0,     0,    20,    21,     0,     0,     0,     0,     0,     0,
     163,     0,   164,     0,     0,    27,    28,     0,     0,   165,
      30,   166,     0,     0,     0,     0,     0,     0,     0,   167,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      41,     0,     0,   168,    45,     0,     0,    48,     0,     0,
       0,     0,    51,    52,     0,     0,   169,     0,     0,     0,
       0,     0,   170,   171,     0,     0,     0,     0,     0,    54,
     269,     0,     0,     0,    57,     0,    58,     2,    59,     4,
       5,     0,     6,   155,   156,     9,     0,     0,     0,     0,
       0,    11,    12,    13,   157,   158,   159,     0,   160,     0,
       0,   161,   162,     0,     0,     0,    20,    21,     0,     0,
       0,     0,     0,     0,   163,     0,   164,     0,     0,    27,
      28,     0,     0,   165,    30,   166,     0,     0,     0,     0,
       0,     0,     0,   167,     0,     0,     0,     0,     0,     0,
       0,     0,    36,     0,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,     0,     0,   168,    45,     0,
       0,    48,     0,     0,     0,     0,    51,    52,     0,     0,
     169,     0,     0,     0,     0,     0,   170,   171,     0,     0,
       0,     0,     0,    54,   703,     0,     0,     0,    57,     0,
      58,     2,    59,     4,     5,     0,     6,   155,   156,     9,
       0,     0,     0,     0,     0,    11,    12,    13,   157,   158,
     159,     0,   160,     0,     0,     0,   162,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   163,     0,
     164,     0,     0,    27,    28,     0,     0,   165,    30,   166,
       0,     0,     0,     0,     0,     0,     0,   167,   503,   504,
       0,     0,   505,   506,   507,     0,    36,     0,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     508,   509,     0,     0,     0,     0,     0,     0,    41,   510,
       0,   168,    45,     0,     0,    48,     0,     0,     0,     0,
      51,    52,     0,     0,   169,     0,     0,     0,     0,     0,
       0,     0,     0,     2,     0,     4,   333,    54,   334,   155,
     156,     9,    57,     0,    58,     0,    59,    11,    12,    13,
     157,   158,   159,     0,   160,     0,     0,     0,   162,     0,
       0,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     163,     0,   164,     0,     0,    27,    28,     0,     0,     0,
      30,   166,     0,     0,     0,     0,     0,     0,     0,   167,
       0,     0,  -322,     0,     0,     0,     0,     0,    36,     0,
      38,    39,     0,   503,   504,     0,     0,   505,   506,   507,
       0,     0,     0,     0,     0,     0,     0,  -322,  -322,   376,
      41,     0,     0,   168,    45,   508,   509,    48,     0,     0,
       0,     0,     0,     0,   510,     0,   169,  -322,  -322,  -322,
    -322,     0,  -322,  -322,     0,     0,     0,     0,     0,    54,
       0,  -318,     0,     0,   263,     0,    58,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,     0,     0,  -318,  -318,   401,     0,
       0,     0,     0,   790,     0,     0,   511,   512,   513,   514,
     515,   516,   517,   518,   519,     0,  -318,  -318,  -318,  -318,
       0,  -318,  -318,     0,     0,     0,     0,     0,     0,     0,
    -316,     0,     0,  -322,     0,   291,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,     0,     0,  -316,  -316,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -316,  -316,  -316,  -316,     0,
    -316,  -316,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -318,     0,   291,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,     0,     2,     0,     0,     0,     0,     0,   155,
     156,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     157,   158,   159,     0,   160,     0,     0,     0,   162,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     163,  -316,   164,   291,     0,    27,    28,     0,     0,     0,
      30,   166,     0,     0,     0,     0,     0,     0,     0,   167,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,   155,   156,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   157,   158,   159,     0,   160,     0,     0,
     765,   162,     0,   168,     0,     0,     0,    48,     0,     0,
       0,     0,     0,   163,   778,   164,   169,     0,    27,    28,
       0,     0,     0,    30,   166,     0,     0,     0,     0,     0,
     766,     0,   167,     0,     0,     0,     0,     0,     0,     2,
       0,     0,     0,     0,     0,   155,   156,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   157,   158,   159,     0,
     160,     0,     0,   765,   162,     0,   168,     0,     0,     0,
      48,     0,     0,     0,     0,     0,   163,   884,   164,   169,
       0,    27,    28,     0,     0,     0,    30,   166,     0,     0,
       0,     0,     0,   877,     0,   167,     0,     2,     0,     0,
       0,     0,     0,   155,   156,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   157,   158,   159,     0,   160,     0,
       0,     0,   162,     0,     0,     0,    41,     0,     0,   168,
       0,     0,     0,    48,   163,     0,   164,     0,     0,    27,
      28,     0,   169,     0,    30,   166,     0,     0,     0,     0,
       0,     2,     0,   167,     0,     0,   822,   155,   156,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   157,   158,
     159,     0,   160,     0,     0,     0,   162,     0,     0,     0,
       0,     0,     0,     0,   765,     0,     0,   168,   163,     0,
     164,    48,     0,    27,    28,     0,     0,     0,    30,   166,
     169,     0,     0,     0,     0,     2,     0,   167,     0,     0,
       0,   155,   156,     0,   877,     0,     0,     0,     0,     0,
       0,     0,   157,   158,   159,     0,   160,     0,     0,     0,
     162,     0,     0,     0,     0,     0,     0,     0,    41,     0,
       0,   168,   163,     0,   164,    48,     0,    27,    28,     0,
       0,     0,    30,   166,   169,     0,     0,     0,     0,     2,
       0,   167,     0,     0,     0,   155,   156,     0,   923,     0,
       0,     0,    38,    39,     0,     0,   157,   158,   159,     0,
     160,     0,     0,     0,   162,     0,     0,     0,     0,     0,
       0,     0,    41,     0,     0,   168,   163,     0,   164,    48,
       0,    27,    28,     0,     0,     0,    30,   166,   169,     0,
       0,     0,     0,     2,     0,   167,     0,     0,     0,   155,
     156,    54,     0,     0,     0,     0,    38,    39,     0,     0,
     157,   158,   159,     0,   160,     0,     0,     0,   162,     0,
       0,     0,     0,     0,     0,     0,    41,     0,     0,   168,
     163,     0,   164,    48,     0,    27,    28,     0,     0,     0,
      30,   166,   169,     0,     0,     0,     0,     0,     0,   167,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,   155,   156,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   157,   158,   159,     0,   160,     0,     0,
      41,   162,     0,   168,     0,     0,     0,    48,     0,     0,
       0,     0,     0,   163,   559,   164,   169,     0,    27,    28,
       0,     0,     0,    30,   166,     0,     0,     0,     0,     0,
       0,     0,   167,     0,     0,     0,     0,     0,     0,     2,
       0,     0,     0,     0,     0,   155,   156,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   157,   158,   159,     0,
     160,     0,     0,    41,   162,     0,   168,     0,     0,     0,
      48,     0,     0,     0,     0,     0,   163,   782,   164,   169,
       0,    27,    28,     0,     0,     0,    30,   166,     0,     0,
       0,     0,     0,     0,     0,   167,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,     0,   155,   156,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   157,
     158,   159,     0,   160,     0,     0,    41,   162,     0,   168,
       0,     0,     0,    48,     0,     0,     0,     0,     0,   163,
     848,   164,   169,     0,    27,    28,     0,     0,     0,    30,
     166,     0,     0,     0,     0,     0,     0,     0,   167,     0,
       0,     0,     0,     0,     0,     2,     0,     0,     0,     0,
       0,   155,   156,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   157,   158,   159,     0,   160,     0,     0,    41,
     162,     0,   168,     0,     0,     0,    48,     0,     0,     0,
       0,     0,   163,   928,   164,   169,     0,    27,    28,     0,
       0,     0,    30,   166,     0,     0,     0,     0,     0,     0,
       0,   167,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,     0,     0,   168,     0,     0,     0,    48,
       0,     0,     0,     0,     0,     0,     0,     0,   169
};

static const yytype_int16 yycheck[] =
{
      14,    15,    16,   172,   153,   215,   253,   141,    58,   141,
     644,   436,    26,   550,    36,   253,    10,   253,   427,   428,
     452,   453,   563,   600,    36,    18,    40,   237,    42,    43,
     455,   690,    25,    47,     9,   694,    19,   695,   179,    72,
      73,    34,   183,   126,    48,    59,    36,     9,   134,   190,
     134,   192,   193,    52,    52,   141,    70,   141,    72,   134,
      74,    75,     9,    77,     9,    79,   207,    81,   125,    83,
       0,    85,   129,    87,    36,    89,   588,    91,   639,    93,
      94,    36,     3,     4,    98,     0,    36,   101,   121,    36,
     104,    36,   106,    36,   134,   133,   265,    36,    69,    92,
     269,   141,   140,    96,    36,    36,   134,   100,   122,   670,
     124,    26,   105,   141,   126,   108,   109,   110,   111,    36,
      35,   125,    10,   126,    36,   118,   125,   125,   121,   132,
     123,    61,    47,    36,    36,   110,   129,    36,   152,   153,
     123,   124,   136,     0,    59,   722,    61,    12,   110,    36,
     143,    36,    36,   690,    36,    70,    36,    72,   172,    74,
      75,   702,    77,   110,    79,   110,    81,    19,    83,   827,
      85,   830,    87,     0,    89,   833,    91,   132,    93,    94,
     814,   126,   132,    98,   123,   124,   101,    36,   126,   104,
      36,   106,    36,   132,   126,     0,   628,    36,   130,   130,
     132,   215,   123,   124,    61,   219,     0,   122,    36,   124,
       3,     4,   621,   130,   126,   132,     9,   330,   133,    36,
     132,   235,   236,   237,   126,   140,    92,   126,   130,   132,
     132,   130,   246,   132,    61,    36,   123,   124,   252,   253,
     106,    34,    35,    36,     9,   132,   130,   132,   132,     0,
     132,   265,   132,   125,   125,   269,    61,   129,   129,   372,
     374,    54,    55,    56,    57,   125,    59,    60,   132,    34,
      35,   131,   915,   287,   288,    26,   390,    36,   790,   123,
     124,   123,   124,   132,    35,   130,   132,   132,   132,    54,
      55,    56,    57,   132,    59,    60,    47,    36,    58,   125,
     215,   944,   727,    36,   132,   131,   123,   124,    59,    36,
      61,   123,   124,     0,   957,   132,   563,   110,   125,    70,
     132,    72,   237,    74,    75,   563,    77,   563,    79,    51,
      81,   132,    83,   126,    85,   130,    87,   130,    89,   132,
      91,   130,    93,    94,   125,   110,   127,    98,    35,   125,
     101,   127,    36,   104,   269,   106,   116,   117,   118,   125,
     374,   127,   874,     3,     4,   130,   452,   453,   452,   453,
     616,   122,    59,   124,    61,    69,   390,   452,   453,   123,
     124,   125,   133,    70,   125,    72,   127,    74,    75,   140,
      77,   125,    79,   127,    81,   126,    83,     0,    85,   125,
      87,   127,    89,   915,    91,   126,    93,    94,   123,   124,
     125,    98,   452,   453,   101,   123,   124,   104,    36,   106,
     123,   124,   125,    26,   452,   453,   114,   576,   569,   127,
     942,   641,   944,   129,    52,   122,    36,   124,   684,   123,
     124,   125,   126,    36,    47,   957,   133,   125,     9,   127,
     125,    54,   127,   140,    36,   702,    36,    58,    61,   374,
      36,   671,    36,   709,   702,    36,   702,    70,    36,   483,
     123,   124,   125,    34,    35,   390,    36,     0,   492,   123,
     124,   125,   125,   729,    87,   126,    89,    19,    91,   125,
      93,   133,   738,    54,    55,    56,    57,   125,    59,    60,
     634,   126,   634,    26,    38,    39,   752,   125,   126,   126,
     524,   132,   526,   114,   115,   116,   117,   118,   269,   122,
     125,   436,   126,   127,    47,    58,   123,   124,     9,   126,
     133,     9,    17,    18,   703,   132,   550,   140,    61,   589,
     455,   125,   628,    19,   628,   122,   123,   124,   634,   563,
     634,     9,     9,   628,    39,    40,    41,   126,   804,   573,
     806,    46,   576,    17,    18,   123,   124,   125,   132,   130,
      93,   132,   123,   124,   125,   129,    34,    35,    36,   126,
      64,    65,    67,   129,    38,    39,    40,    41,   628,   125,
     127,    47,    46,    99,   634,   125,    54,    55,    56,    57,
     628,    59,    60,   125,   125,    92,   634,   853,   127,   855,
     133,   127,   125,    67,   860,   861,   101,   140,   103,   127,
     127,   125,    74,   374,   618,    66,   794,   641,   670,    93,
     624,    83,    84,    85,    86,    87,    88,    89,    90,   390,
      93,   237,    93,    93,    93,    93,   892,   101,   894,   103,
     253,    93,   671,    93,   788,    93,   788,   671,   573,    93,
     674,   907,    93,    93,   678,   679,   269,   913,   914,   719,
      93,   234,   130,    93,   688,   528,   690,   236,   942,   695,
     694,   695,   428,     9,   452,   436,   700,   374,   702,   703,
     961,   786,   573,   634,   634,   243,     0,    -1,    -1,    -1,
      -1,   616,   788,   390,   455,    -1,    -1,   953,    34,    35,
      36,    -1,    -1,   788,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    26,    -1,     0,   859,    -1,   859,    54,    55,
      56,    57,    -1,    59,    60,    -1,    -1,   731,    -1,    -1,
      -1,   735,    -1,    47,    -1,    -1,   269,    -1,   788,   436,
      26,   765,   766,    -1,    -1,    -1,   671,    61,    -1,    27,
     788,    -1,    -1,    31,    32,    33,    -1,    -1,   455,   684,
      -1,    47,    -1,   859,    -1,   859,    -1,    -1,   792,    -1,
     794,    49,    50,    -1,   859,    61,    -1,    -1,    -1,    93,
      58,    -1,    -1,    -1,   709,    -1,    -1,    -1,    -1,    -1,
     126,    -1,    -1,    -1,   130,    -1,   132,    -1,   822,    -1,
      -1,    -1,   727,   827,   729,     0,   830,    93,   952,   833,
     952,    -1,   573,   738,   818,   959,    -1,   959,    -1,   133,
      -1,   859,    -1,   436,    -1,    -1,   140,   752,    -1,    -1,
      -1,    26,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   455,     9,   868,    -1,    -1,   133,    -1,    -1,
      -1,    -1,    47,   877,   140,   616,   880,    -1,   952,    -1,
      -1,    -1,    -1,   959,   888,   959,    61,   952,    34,    35,
      36,    -1,    -1,    -1,   959,    -1,    -1,    -1,     0,   804,
      -1,   806,    -1,    -1,    -1,    -1,    -1,    -1,    54,    55,
      56,    57,    -1,    59,    60,    -1,    -1,    -1,    93,   923,
      -1,    -1,   952,   436,    26,   909,    -1,    -1,    -1,   959,
      -1,    -1,    -1,    -1,   952,    -1,    -1,    -1,    -1,   616,
      -1,    -1,   455,   684,    -1,    47,    -1,    -1,   853,    -1,
     855,    -1,    -1,    -1,    -1,   860,   861,    -1,   133,    61,
      -1,    -1,    -1,    -1,    -1,   140,    -1,     9,   709,    -1,
     563,   975,    -1,    -1,    -1,   269,    -1,    -1,    -1,     9,
     573,    -1,    -1,    -1,   130,    -1,   727,   892,   729,   894,
      -1,    93,    34,    35,    36,    -1,    -1,   738,    -1,    -1,
      -1,    -1,   907,   269,    34,    35,    36,   684,   913,   914,
      -1,   752,    54,    55,    56,    57,    -1,    59,    60,    -1,
      -1,    -1,    -1,   616,    54,    55,    56,    57,    -1,    59,
      60,   133,   709,    -1,    -1,    -1,    -1,    -1,   140,    -1,
      -1,    -1,    -1,    -1,   949,    -1,    -1,    -1,   953,    -1,
     727,    -1,   729,    -1,    -1,    -1,   961,    -1,    -1,    -1,
     573,   738,    -1,   804,    -1,   806,    -1,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,   752,    -1,    -1,    -1,    -1,
     110,    -1,    -1,    -1,   126,    -1,    -1,    -1,   130,    -1,
     132,   684,    -1,    -1,   269,    -1,   126,    -1,    -1,    -1,
     130,    -1,   132,   616,    -1,    -1,    -1,    -1,    -1,   702,
      -1,    -1,   853,    -1,   855,    -1,   709,    -1,    -1,   860,
     861,    -1,    -1,    -1,    -1,    -1,    -1,   804,    -1,   806,
      -1,    -1,    -1,    -1,   727,    -1,   729,    -1,    15,    16,
      17,    18,   436,    -1,    -1,   738,    -1,    -1,     0,    -1,
      -1,   892,    -1,   894,     9,    -1,    -1,    -1,    -1,   752,
      -1,   455,    -1,    40,    41,    -1,   907,   269,    -1,    46,
     436,   684,   913,   914,    26,    -1,   853,    -1,   855,    34,
      35,    36,    -1,   860,   861,    -1,    -1,    -1,    -1,   455,
      67,    -1,    -1,    -1,    -1,    47,   709,    -1,    -1,    54,
      55,    56,    57,    -1,    59,    60,     9,    -1,   949,    61,
      -1,   804,   953,   806,   727,   892,   729,   894,    -1,    -1,
     961,    -1,     0,    -1,   101,   738,   103,    -1,    -1,    -1,
     907,    34,    35,    36,    -1,    -1,   913,   914,    -1,   752,
      -1,    93,    -1,    -1,    -1,    -1,    -1,    -1,    26,    -1,
      -1,    54,    55,    56,    57,   110,    59,    60,    -1,    -1,
     853,   436,   855,    -1,    -1,    -1,    -1,   860,   861,    47,
      -1,   126,   949,    -1,    -1,   130,   953,   132,    -1,   573,
     455,   133,    -1,    61,   961,    -1,    -1,    -1,   140,    -1,
      -1,   804,    -1,   806,    -1,    -1,    -1,    -1,    -1,   892,
      -1,   894,    -1,    -1,    -1,    -1,    -1,   573,    -1,    -1,
      -1,    -1,    -1,    -1,   907,    93,    -1,    -1,    -1,    -1,
     913,   914,   616,   126,    -1,    -1,     9,   130,    -1,   132,
      -1,    -1,    -1,    -1,   436,    -1,    -1,    -1,    -1,    -1,
     853,     0,   855,    -1,    -1,    -1,    -1,   860,   861,    -1,
     616,    34,    35,   455,    -1,   133,   949,    49,    50,     9,
     953,    -1,   140,    -1,    -1,    -1,    58,    26,   961,    -1,
      -1,    54,    55,    56,    57,    -1,    59,    60,    -1,   892,
      -1,   894,    -1,    -1,    34,    35,    36,    -1,    47,    -1,
     684,    -1,    -1,    -1,   907,    -1,    -1,    -1,   573,    -1,
     913,   914,    61,     0,    54,    55,    56,    57,    -1,    59,
      60,    -1,    -1,    -1,    -1,   709,    -1,   269,   684,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,    26,
      -1,    -1,    -1,   727,    93,   729,   949,    -1,    -1,    -1,
     953,   616,    -1,   709,   738,    -1,    -1,   130,   961,   132,
      47,    -1,     9,    -1,    -1,    -1,    -1,    -1,   752,    -1,
     110,   727,    -1,   729,    61,    -1,    -1,    -1,     0,    -1,
      -1,   573,   738,    -1,   133,    -1,   126,    34,    35,    36,
     130,   140,   132,    -1,    -1,    -1,   752,    -1,    -1,    -1,
      -1,   269,    -1,    -1,    26,    -1,    93,    54,    55,    56,
      57,    -1,    59,    60,    -1,    -1,    -1,    -1,    -1,   684,
     804,    -1,   806,    -1,   616,    47,    15,    16,    17,    18,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    -1,    -1,   709,    -1,   133,    -1,   804,    -1,
     806,    40,    41,   140,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,   727,   110,   729,    -1,    -1,    -1,    -1,   853,
      -1,   855,    -1,   738,    -1,    -1,   860,   861,    67,   126,
      -1,    -1,    -1,   130,    -1,   132,    -1,   752,    -1,    -1,
      -1,    -1,   684,    -1,   436,    -1,    -1,   853,    -1,   855,
      -1,    -1,     9,    -1,   860,   861,    -1,    -1,   892,    -1,
     894,   133,   101,   455,   103,    -1,    -1,   709,   140,     0,
     269,    -1,    -1,   907,    -1,    -1,    -1,    34,    35,   913,
     914,    -1,    -1,    -1,    -1,   727,   892,   729,   894,   804,
      -1,   806,    -1,    -1,    -1,    26,   738,    54,    55,    56,
      57,   907,    59,    60,    31,    32,    33,   913,   914,    -1,
     752,    -1,    -1,    -1,    -1,   949,    47,    -1,   436,   953,
      -1,    -1,    49,    50,    -1,    -1,    -1,   961,    17,    18,
      61,    58,   269,    -1,    -1,    -1,    -1,   455,   853,    -1,
     855,    -1,    -1,   949,    -1,   860,   861,   953,    -1,     0,
      -1,    40,    41,    -1,    -1,   961,    -1,    46,    -1,    -1,
      -1,    -1,   804,    -1,   806,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   130,    -1,    26,    -1,   892,    67,   894,
       9,   573,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   907,    -1,    -1,    -1,    47,   269,   913,   914,
      -1,    -1,   133,    -1,    -1,    34,    35,    36,    -1,   140,
      61,   853,   101,   855,   103,    -1,    -1,    -1,   860,   861,
      -1,    -1,     0,    -1,   616,    54,    55,    56,    57,    -1,
      59,    60,    -1,    -1,   949,    -1,    -1,   436,   953,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   961,    -1,    26,    -1,
     892,    -1,   894,    -1,    -1,   573,   455,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   907,    -1,    -1,    -1,    47,
      -1,   913,   914,    17,    18,    -1,    -1,    -1,    -1,     9,
      -1,    -1,   133,    61,    -1,    -1,    -1,    -1,    -1,   140,
      -1,    -1,   684,    -1,    38,    39,    40,    41,   616,   436,
      -1,   130,    46,   132,    34,    35,    36,   949,    -1,    -1,
      -1,   953,    -1,    -1,    -1,    -1,    -1,   709,   455,   961,
      17,    18,    -1,    67,    54,    55,    56,    57,    -1,    59,
      60,    -1,    -1,    -1,    -1,   727,    -1,   729,   269,    -1,
      -1,    38,    39,    40,    41,    -1,   738,    -1,    -1,    46,
      -1,    -1,    -1,    17,    18,   133,    -1,   101,    -1,   103,
     752,    -1,   140,     0,   436,    -1,   684,    -1,    -1,    -1,
      67,    -1,    17,    18,   573,    -1,    40,    41,    -1,    -1,
      -1,    -1,    46,   455,    -1,   470,    -1,    -1,    -1,    26,
      -1,   709,    17,    18,    -1,    40,    41,    -1,    -1,    -1,
     130,    46,   132,    67,   101,    -1,   103,    -1,    -1,   727,
      47,   729,   804,    -1,   806,    40,    41,   616,   269,    -1,
     738,    46,    67,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   752,    -1,   573,   101,    -1,   103,
      -1,    -1,    67,   528,    -1,    -1,    -1,     9,   533,    -1,
      -1,    -1,    -1,    -1,   539,    -1,   101,    -1,   103,    -1,
      -1,   853,    -1,   855,    -1,    -1,    -1,    -1,   860,   861,
      -1,    -1,    34,    35,    36,   560,   101,    -1,   103,   616,
      -1,    -1,    -1,    -1,    -1,   684,   804,    -1,   806,    -1,
      -1,   269,    54,    55,    56,    57,   133,    59,    60,    -1,
     892,   573,   894,   140,    -1,   436,    -1,    -1,    -1,    -1,
     709,    -1,    -1,    -1,    -1,   907,    -1,    -1,    -1,    -1,
      -1,   913,   914,    -1,   455,    17,    18,    -1,   727,    -1,
     729,    -1,    -1,    -1,    -1,   853,    -1,   855,    -1,   738,
      -1,    -1,   860,   861,   616,    -1,    -1,   684,    40,    41,
      -1,    -1,    -1,   752,    46,    -1,    -1,   949,    -1,    -1,
      -1,   953,    -1,    -1,    17,    18,    -1,    -1,   130,   961,
     132,    -1,   709,    -1,   892,    67,   894,     0,    -1,    -1,
       0,    -1,    -1,    -1,    -1,   436,    -1,    40,    41,   907,
     727,    -1,   729,    46,    -1,   913,   914,    -1,    -1,    -1,
      -1,   738,    -1,    26,   455,   804,    26,   806,    -1,   101,
      -1,   103,   684,    -1,    67,   752,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    47,    -1,    -1,    47,    -1,    -1,
      -1,   949,   269,    -1,    -1,   953,    -1,   709,    61,    -1,
      -1,    61,   573,   961,    -1,    -1,    -1,    -1,   101,    -1,
     103,    -1,    -1,    -1,   853,   727,   855,   729,   436,    -1,
      -1,   860,   861,    -1,     0,    -1,   738,   804,    -1,   806,
      -1,    -1,   757,    -1,    -1,   760,    -1,   455,    -1,    -1,
     752,    -1,   767,    -1,    -1,   616,   771,    -1,    -1,    -1,
      26,    -1,    -1,   892,    -1,   894,    -1,    -1,   783,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   907,    -1,
     133,    47,    -1,   133,   913,   914,   853,   140,   855,    -1,
     140,    -1,   573,   860,   861,    61,    -1,    -1,    -1,    -1,
      -1,    -1,   804,    -1,   806,    -1,    -1,    -1,   823,   824,
      -1,   826,    -1,    -1,    -1,    -1,    -1,   832,    -1,    -1,
     949,    -1,    -1,   684,   953,   892,    -1,   894,    -1,    -1,
      -1,    -1,   961,    -1,    -1,   616,   851,    -1,    -1,    -1,
     907,    -1,    -1,    -1,    -1,    -1,   913,   914,   709,    -1,
      -1,   853,    -1,   855,    -1,    -1,    -1,   872,   860,   861,
      -1,    -1,    -1,   878,    -1,   573,   727,   133,   729,   436,
      -1,    -1,    -1,    -1,   140,     0,    -1,   738,    -1,    -1,
      -1,    -1,   949,    -1,    -1,    -1,   953,    -1,   455,    -1,
     892,   752,   894,    -1,   961,    -1,    -1,    -1,    -1,    -1,
      -1,    26,    -1,   684,    -1,   907,   921,    -1,   616,   924,
      -1,   913,   914,    -1,   929,    -1,   269,    -1,    -1,   269,
      -1,    -1,    47,    -1,    -1,    -1,    -1,     9,   709,    -1,
      -1,   946,    -1,    -1,    -1,     9,    61,    -1,    -1,    -1,
      -1,    -1,    -1,   804,    -1,   806,   727,   949,   729,    -1,
      -1,   953,    34,    35,    36,    -1,    -1,   738,    -1,   961,
      34,    35,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   752,    54,    55,    56,    57,   684,    59,    60,    -1,
      54,    55,    56,    57,    -1,    59,    60,    -1,    -1,    -1,
      -1,    -1,   853,    -1,   855,    -1,    -1,    -1,    -1,   860,
     861,   709,    -1,   269,    -1,    -1,   573,    -1,   133,    -1,
      -1,    -1,    -1,    -1,    -1,   140,    -1,    -1,    -1,   727,
       5,   729,    -1,   804,    -1,   806,    11,    12,    -1,    -1,
     738,   892,    -1,   894,     0,    -1,    -1,    22,    23,    24,
      -1,    26,    -1,    -1,   752,    30,   907,    -1,   130,   616,
     132,    -1,   913,   914,    -1,    -1,   130,    42,   132,    44,
      26,    -1,    47,    48,    -1,    -1,    -1,    52,    53,    -1,
      -1,    -1,   853,    -1,   855,    -1,    61,    -1,    -1,   860,
     861,    47,    -1,   436,    -1,    -1,   436,    -1,   949,    -1,
      -1,    -1,   953,    -1,    -1,    61,   804,    -1,   806,    -1,
     961,    -1,   455,    -1,    -1,   455,    -1,    92,    -1,    -1,
      95,   892,    -1,   894,    99,    -1,    -1,   684,    -1,    -1,
      -1,    -1,    -1,   108,    -1,    -1,   907,    -1,    -1,    -1,
      -1,    -1,   913,   914,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   709,   128,   269,   853,    -1,   855,    -1,    -1,
       0,    -1,   860,   861,    -1,    -1,    -1,    -1,    -1,    -1,
     727,    -1,   729,    -1,    -1,    -1,    -1,   133,   949,    -1,
     436,   738,   953,    -1,   140,    -1,    26,    -1,    -1,    -1,
     961,    -1,    -1,     9,   892,   752,   894,    -1,    -1,   455,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,   907,
      -1,    -1,    -1,    -1,    -1,   913,   914,    -1,    34,    35,
      36,    61,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,
     573,    -1,     9,   573,    -1,    -1,    -1,    -1,    54,    55,
      56,    57,    -1,    59,    60,    -1,    -1,   804,    -1,   806,
      -1,   949,    -1,    -1,    -1,   953,    -1,    34,    35,    36,
      -1,    -1,    -1,   961,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   616,    -1,    -1,   616,    54,    55,    56,
      57,    -1,    59,    60,    -1,    -1,    61,     0,    -1,    -1,
      -1,    -1,    -1,   133,    -1,    -1,   853,    -1,   855,    -1,
     140,    -1,    -1,   860,   861,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   269,   130,    -1,   132,   573,    -1,    -1,
      -1,   436,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   892,    -1,   894,    -1,    -1,
     455,   684,    -1,    -1,   684,    -1,    -1,    -1,    61,    -1,
     907,    -1,     0,   130,    -1,   132,   913,   914,   133,    -1,
     616,    -1,    -1,    -1,    -1,   140,   709,    -1,    -1,   709,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   727,     9,   729,   727,    -1,   729,
      -1,    -1,   949,     9,    -1,   738,   953,    -1,   738,    -1,
      -1,    -1,    -1,    -1,   961,    -1,    -1,    -1,    -1,   752,
      34,    35,   752,    61,    -1,    -1,    -1,    -1,    34,    35,
     133,    -1,    -1,    -1,    -1,    -1,    -1,   140,   684,   269,
      54,    55,    56,    57,    -1,    59,    60,    -1,    54,    55,
      56,    57,    -1,    59,    60,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   709,    -1,    -1,    -1,    -1,   573,    -1,
      -1,   804,    -1,   806,   804,    -1,   806,    -1,    -1,    -1,
      -1,   727,    -1,   729,    -1,    -1,    -1,     9,    -1,    -1,
     436,    -1,   738,    -1,    -1,   133,    -1,    -1,    -1,    -1,
      -1,    -1,   140,    -1,    -1,    -1,   752,    -1,    -1,   455,
      -1,   616,    34,    35,    -1,    -1,   130,    -1,   132,    -1,
     853,     9,   855,   853,   130,   855,   132,   860,   861,    -1,
     860,   861,    54,    55,    56,    57,    -1,    59,    60,    -1,
      -1,    -1,    -1,    -1,     0,    -1,    34,    35,    36,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   804,   892,
     806,   894,   892,    -1,   894,    -1,    54,    55,    56,    57,
      -1,    59,    60,    -1,   907,    -1,    -1,   907,    -1,   684,
     913,   914,    -1,   913,   914,    -1,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,   709,    61,   436,   853,   130,   855,
     132,    -1,    -1,    -1,   860,   861,   949,    -1,    -1,   949,
     953,    -1,   727,   953,   729,   455,    -1,   573,   961,    -1,
      -1,   961,    -1,   738,    -1,   123,   124,   125,    -1,    -1,
      -1,    -1,   130,    -1,   132,    -1,   892,   752,   894,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   907,    -1,    -1,    -1,    -1,    -1,   913,   914,    -1,
     616,   436,    -1,    -1,    -1,    -1,    -1,   133,    -1,     5,
      -1,    -1,    -1,    -1,   140,    11,    12,    -1,    -1,    -1,
     455,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,   804,
      26,   806,    -1,   949,    30,    -1,    -1,   953,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   961,    42,    -1,    44,    -1,
      -1,    47,    48,    -1,    -1,    -1,    52,    53,    -1,    -1,
      -1,    -1,    -1,   436,    -1,    61,    27,    28,   684,    -1,
      31,    32,    33,   573,    -1,    -1,    72,    73,   853,    -1,
     855,    -1,   455,    -1,    -1,   860,   861,    -1,    49,    50,
      -1,    -1,    -1,   709,    -1,    -1,    92,    58,    -1,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   727,   108,   729,    -1,    -1,   616,   892,    -1,   894,
      -1,    -1,   738,    -1,    -1,   121,    -1,    -1,   436,    -1,
     126,    -1,   907,    -1,    -1,    -1,   752,    -1,   913,   914,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
      -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   949,    -1,    -1,    -1,   953,    -1,
      -1,   616,    -1,    -1,   684,    -1,   961,    -1,   804,    -1,
     806,    -1,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,   709,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,   727,    -1,   729,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   853,   738,   855,
       5,    -1,    -1,   616,   860,   861,    11,    12,    -1,   684,
     132,    -1,   752,    -1,    -1,     0,     1,    22,    23,    24,
      -1,    26,   126,    -1,    -1,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   709,    -1,   892,    42,   894,    44,
      -1,    -1,    47,    48,    -1,    -1,    -1,    52,    53,    -1,
      -1,   907,   727,    -1,   729,    -1,    61,   913,   914,    -1,
      -1,    -1,    -1,   738,   804,    -1,   806,    -1,   616,    -1,
     436,   684,    -1,    -1,    -1,    -1,    61,   752,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    -1,   455,
      95,    -1,    -1,   949,    99,    -1,   709,   953,    -1,    -1,
      -1,    -1,    -1,   108,    -1,   961,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   853,   727,   855,   729,    -1,   123,   124,
     860,   861,    -1,    -1,    -1,   738,    -1,    -1,    -1,   804,
      -1,   806,    -1,    -1,   119,    -1,   684,    -1,    -1,   752,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   892,    -1,   894,    -1,    -1,    -1,    -1,    -1,
      -1,   709,    -1,    -1,   149,    -1,    -1,   907,    -1,    -1,
      -1,    -1,    -1,   913,   914,    -1,    -1,    -1,   853,   727,
     855,   729,    -1,    -1,    -1,   860,   861,    -1,    -1,    -1,
     738,   804,    -1,   806,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   752,    -1,    -1,    -1,    -1,   949,
      -1,    -1,    -1,   953,    -1,    -1,    -1,   892,    -1,   894,
      -1,   961,    -1,    -1,    -1,   210,    -1,   212,    -1,    -1,
      -1,    -1,   907,   218,    -1,    -1,    -1,    -1,   913,   914,
     853,    -1,   855,    -1,    -1,    -1,    -1,   860,   861,    -1,
     616,    -1,    -1,    -1,    -1,    -1,   804,    -1,   806,   244,
      -1,   246,    -1,    -1,   249,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   949,    -1,   261,    -1,   953,   892,
      -1,   894,    -1,    -1,    -1,    -1,   961,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   907,    -1,   281,    -1,    -1,    -1,
     913,   914,    -1,    -1,    -1,   853,    -1,   855,     5,    -1,
      -1,    -1,   860,   861,    11,    12,    -1,    -1,   684,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    -1,    26,
      -1,    -1,    -1,    30,    -1,    -1,   949,    -1,    -1,    -1,
     953,    -1,    -1,   709,   892,    42,   894,    44,   961,    -1,
      47,    48,    -1,    -1,    -1,    52,    53,    -1,    -1,   907,
      -1,   727,    -1,   729,    61,   913,   914,    -1,    -1,    -1,
      -1,    -1,   738,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     9,    -1,    -1,    -1,   752,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    92,    -1,    -1,    95,    -1,
      -1,   949,    99,    -1,    -1,   953,    -1,    34,    35,    36,
      -1,   108,    -1,   961,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   122,   411,    54,    55,    56,
      57,    10,    59,    60,    -1,    -1,    -1,    -1,   804,    -1,
     806,    20,    21,    -1,    -1,    -1,    -1,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    -1,    -1,    -1,    -1,   454,
      -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    57,    58,
      -1,    -1,    -1,   468,    -1,    -1,   471,   853,   473,   855,
      -1,    -1,    -1,    -1,   860,   861,    -1,    -1,    -1,   126,
      -1,    -1,    -1,   130,    -1,   132,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    -1,    -1,   892,    -1,   894,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,   523,    -1,
      -1,   907,    -1,    -1,    -1,    -1,    -1,   913,   914,   534,
      -1,    -1,     9,    -1,    -1,    -1,   541,   136,   126,   544,
     545,    -1,   547,    -1,    -1,    -1,   551,    -1,   147,    -1,
      -1,    -1,    -1,   558,    -1,   154,    -1,    34,    35,    36,
      -1,    -1,   161,   949,    -1,    -1,    -1,   953,    -1,   574,
      -1,   170,   171,    -1,    -1,   961,    -1,    54,    55,    56,
      57,    -1,    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    -1,    72,    -1,    74,    75,
     625,    77,    -1,    79,    -1,    81,    -1,    83,    -1,    85,
      -1,    87,    -1,    89,    -1,    91,    -1,    93,    94,    -1,
     239,    -1,    98,    -1,    -1,   101,    -1,    -1,   104,    -1,
     106,    -1,    -1,   130,   253,   132,    -1,    -1,    -1,    -1,
      -1,   260,    -1,    -1,   263,    -1,   122,   672,   124,    -1,
      -1,    -1,    -1,    -1,    -1,   680,    -1,   682,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   690,    -1,    -1,    -1,    -1,
      -1,    -1,   291,    -1,    -1,     9,    -1,    -1,    67,    68,
      69,    -1,    71,    -1,    73,   710,    -1,    76,    -1,    78,
     715,    80,   717,    -1,    -1,    84,    -1,    86,    -1,    -1,
      34,    35,    36,    92,    -1,   730,    -1,    96,   733,    -1,
      -1,   100,   737,   102,    -1,   740,   105,    -1,    -1,    -1,
      54,    55,    56,    57,    -1,    59,    60,    -1,    -1,    -1,
      -1,   120,   121,    -1,   123,    -1,    -1,    -1,    -1,   764,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    -1,    -1,
      -1,   380,    -1,    -1,   383,   384,   385,   386,   387,   388,
     389,    -1,    -1,    -1,    -1,    -1,    -1,   802,   397,    -1,
     805,    -1,    -1,   808,   173,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,    -1,   130,   186,   132,   188,
      -1,   190,    -1,   192,   193,    -1,   831,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   205,    -1,   207,   208,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   225,   862,   227,   228,
     229,    -1,    -1,   232,   233,   870,   871,    -1,    -1,    27,
      28,   876,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,   886,   887,    -1,    -1,   890,    -1,    -1,   257,    -1,
      -1,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      58,    -1,    -1,    -1,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     935,    -1,    -1,   938,    -1,    -1,    -1,    -1,   537,    -1,
      -1,    -1,    -1,    -1,   543,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,   563,   123,   124,    -1,    -1,    -1,
      -1,    -1,    -1,   572,    -1,    -1,    -1,   346,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   586,    -1,    -1,
      -1,    -1,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,   600,    10,    11,    12,    13,    14,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,   618,
      -1,    -1,    30,    -1,    -1,   624,    34,    35,    -1,    37,
      -1,    -1,    -1,   632,    42,    43,    44,    45,   637,    47,
      48,    -1,    -1,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    61,    62,    63,    -1,    -1,    -1,    -1,
      68,    -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    27,    28,    -1,    -1,
      31,    32,    33,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,    -1,   102,    -1,   104,   105,    49,    50,
     108,    -1,    -1,   702,    -1,    -1,    -1,    58,    -1,    -1,
      -1,    -1,    -1,   121,    -1,   123,   124,    -1,   126,    -1,
     128,    -1,   130,   722,    -1,    -1,   725,    -1,    -1,    -1,
      -1,    -1,   731,    -1,    -1,    -1,   735,    -1,    -1,    -1,
      -1,    -1,   741,    -1,    -1,    -1,    -1,    -1,    -1,   748,
      -1,    -1,    -1,    -1,   753,    -1,   107,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,   786,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     569,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   811,    -1,   813,    -1,   585,    -1,    -1,   818,
       0,     1,   126,     3,     4,     5,     6,     7,     8,    -1,
      10,    11,    12,    13,    14,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    -1,    -1,
      30,    -1,    -1,    -1,    34,    35,    -1,    37,    -1,    -1,
      -1,    -1,    42,    43,    44,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    62,    63,    -1,    -1,    -1,    -1,    68,    -1,
      70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     909,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,    -1,   102,    -1,   104,   105,    -1,    -1,   108,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   121,    -1,   123,   124,    -1,   126,    -1,   128,     1,
     130,     3,     4,     5,     6,     7,     8,    -1,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    -1,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    -1,    -1,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,
      -1,   123,   124,    -1,   126,    -1,   128,   129,   130,     1,
      -1,     3,     4,     5,     6,     7,     8,    -1,    10,    11,
      12,    13,    14,    -1,    -1,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    -1,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    37,    -1,    -1,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    -1,    -1,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,
      -1,   123,   124,    -1,   126,    -1,   128,     1,   130,     3,
       4,     5,     6,     7,     8,    -1,    10,    11,    12,    13,
      14,    -1,    -1,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    -1,    -1,    30,    -1,    -1,    -1,
      34,    35,    -1,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    -1,    -1,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,
      -1,    -1,    -1,    67,    68,    -1,    70,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,    -1,   123,
     124,    -1,   126,    -1,   128,     1,   130,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    -1,
      -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    -1,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    -1,    -1,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    62,    63,    -1,    -1,
      -1,    67,    68,    -1,    70,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
      -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   121,    -1,   123,   124,    -1,
     126,    -1,   128,     1,   130,     3,     4,     5,     6,     7,
       8,    -1,    10,    11,    12,    13,    14,    -1,    -1,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      -1,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    -1,    -1,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    61,    62,    63,    -1,    -1,    -1,    67,
      68,    -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   121,    -1,   123,   124,    -1,   126,    -1,
     128,     1,   130,     3,     4,     5,     6,     7,     8,    -1,
      10,    11,    12,    13,    14,    -1,    -1,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    -1,    -1,
      30,    -1,    -1,    -1,    34,    35,    -1,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    -1,
      -1,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    62,    63,    -1,    -1,    -1,    67,    68,    -1,
      70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,    -1,    -1,   108,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   121,    -1,   123,   124,    -1,   126,    -1,   128,     1,
     130,     3,     4,     5,     6,     7,     8,    -1,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    -1,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    37,    -1,    -1,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    -1,    -1,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      62,    63,    -1,    -1,    -1,    67,    68,    -1,    70,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,
      -1,   123,   124,    -1,   126,    -1,   128,     1,   130,     3,
       4,     5,     6,     7,     8,    -1,    10,    11,    12,    13,
      14,    -1,    -1,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    -1,    -1,    30,    -1,    -1,    -1,
      34,    35,    -1,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    -1,    -1,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,
      -1,    -1,    -1,    67,    68,    -1,    70,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,    -1,   123,
     124,    -1,   126,    -1,   128,     1,   130,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    -1,
      -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    -1,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    37,    -1,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    -1,    -1,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    62,    63,    -1,    -1,
      -1,    67,    68,    -1,    70,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
      -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   121,    -1,   123,   124,    -1,
     126,    -1,   128,     1,   130,     3,     4,     5,     6,     7,
       8,    -1,    10,    11,    12,    13,    14,    -1,    -1,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      -1,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,    37,
      -1,    -1,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    -1,    -1,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    61,    62,    63,    -1,    -1,    66,    67,
      68,    -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   121,    -1,   123,   124,    -1,   126,    -1,
     128,     1,   130,     3,     4,     5,     6,     7,     8,    -1,
      10,    11,    12,    13,    14,    -1,    -1,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    -1,    -1,
      30,    -1,    -1,    -1,    34,    35,    -1,    37,    -1,    -1,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    -1,
      -1,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    62,    63,    -1,    -1,    -1,    67,    68,    -1,
      70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,    -1,    -1,   108,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   121,    -1,   123,   124,    -1,   126,    -1,   128,     1,
     130,     3,     4,     5,     6,     7,     8,    -1,    10,    11,
      12,    13,    14,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    -1,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    37,    -1,    -1,    -1,    -1,
      42,    43,    44,    45,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      62,    63,    -1,    -1,    -1,    -1,    68,    -1,    70,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,    -1,
     102,    -1,   104,   105,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,
      -1,   123,   124,    -1,   126,    -1,   128,   129,   130,     5,
      -1,     7,     8,    -1,    10,    11,    12,    13,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    -1,
      26,    -1,    -1,    29,    30,    -1,    -1,    -1,    34,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    70,    -1,    72,    73,    -1,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    92,    -1,    -1,    95,
      96,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,    -1,    -1,    -1,    -1,    -1,   114,   115,
      -1,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
     126,   126,   128,     5,   130,     7,     8,    -1,    10,    11,
      12,    13,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    -1,    26,    -1,    -1,    29,    30,    -1,
      -1,    -1,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    -1,    44,    -1,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,
      72,    73,    -1,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      92,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,    -1,
      -1,    -1,   104,   105,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    -1,   114,   115,    -1,    -1,    -1,    -1,    -1,   121,
     122,    -1,    -1,   125,   126,    -1,   128,     5,   130,     7,
       8,    -1,    10,    11,    12,    13,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    -1,    26,    -1,
      -1,    29,    30,    -1,    -1,    -1,    34,    35,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    70,    -1,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    92,    -1,    -1,    95,    96,    -1,
      -1,    99,    -1,    -1,    -1,    -1,   104,   105,   106,    -1,
     108,    -1,    -1,    -1,    -1,    -1,   114,   115,    -1,    -1,
      -1,    -1,    -1,   121,   122,    -1,    -1,    -1,   126,    -1,
     128,     5,   130,     7,     8,    -1,    10,    11,    12,    13,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    -1,    26,    -1,    -1,    29,    30,    -1,    -1,    -1,
      34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
      44,    -1,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    -1,
      -1,    95,    96,    -1,    -1,    99,    -1,    -1,    -1,    -1,
     104,   105,   106,    -1,   108,    -1,    -1,    -1,    -1,    -1,
     114,   115,    -1,    -1,    -1,    -1,    -1,   121,   122,    -1,
      -1,    -1,   126,    -1,   128,     5,   130,     7,     8,    -1,
      10,    11,    12,    13,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    -1,    26,    -1,    -1,    29,
      30,    -1,    -1,    -1,    34,    35,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    -1,    44,    -1,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    -1,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    92,    -1,    -1,    95,    96,    -1,    -1,    99,
      -1,    -1,    -1,    -1,   104,   105,    -1,    -1,   108,    -1,
      -1,    -1,    -1,    -1,   114,   115,    -1,    -1,    -1,    -1,
      -1,   121,   122,    -1,    -1,    -1,   126,    -1,   128,     5,
     130,     7,     8,    -1,    10,    11,    12,    13,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    -1,
      26,    -1,    -1,    29,    30,    -1,    -1,    -1,    34,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    70,    -1,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    -1,    -1,    95,
      96,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,   105,
      -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,   114,   115,
      -1,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
     126,    -1,   128,     5,   130,     7,     8,    -1,    10,    11,
      12,    13,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    -1,    26,    -1,    -1,    29,    30,    -1,
      -1,    -1,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    -1,    44,    -1,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      92,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,    -1,
      -1,    -1,   104,   105,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    -1,   114,   115,    -1,    -1,    -1,    -1,    -1,   121,
     122,    -1,    -1,    -1,   126,    -1,   128,     5,   130,     7,
       8,    -1,    10,    11,    12,    13,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    -1,    26,    -1,
      -1,    29,    30,    -1,    -1,    -1,    34,    35,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    70,    -1,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    92,    -1,    -1,    95,    96,    -1,
      -1,    99,    -1,    -1,    -1,    -1,   104,   105,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,   114,   115,    -1,    -1,
      -1,    -1,    -1,   121,   122,    -1,    -1,    -1,   126,    -1,
     128,     5,   130,     7,     8,    -1,    10,    11,    12,    13,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    -1,    26,    -1,    -1,    -1,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
      44,    -1,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    27,    28,
      -1,    -1,    31,    32,    33,    -1,    70,    -1,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    92,    58,
      -1,    95,    96,    -1,    -1,    99,    -1,    -1,    -1,    -1,
     104,   105,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,   121,    10,    11,
      12,    13,   126,    -1,   128,    -1,   130,    19,    20,    21,
      22,    23,    24,    -1,    26,    -1,    -1,    -1,    30,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      42,    -1,    44,    -1,    -1,    47,    48,    -1,    -1,    -1,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    70,    -1,
      72,    73,    -1,    27,    28,    -1,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,
      92,    -1,    -1,    95,    96,    49,    50,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    58,    -1,   108,    54,    55,    56,
      57,    -1,    59,    60,    -1,    -1,    -1,    -1,    -1,   121,
      -1,     9,    -1,    -1,   126,    -1,   128,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    -1,    34,    35,    36,    -1,
      -1,    -1,    -1,   107,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    54,    55,    56,    57,
      -1,    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       9,    -1,    -1,   130,    -1,   132,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    -1,    34,    35,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    55,    56,    57,    -1,
      59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   130,    -1,   132,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,     5,    -1,    -1,    -1,    -1,    -1,    11,
      12,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    -1,    26,    -1,    -1,    -1,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,   130,    44,   132,    -1,    47,    48,    -1,    -1,    -1,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    -1,    26,    -1,    -1,
      92,    30,    -1,    95,    -1,    -1,    -1,    99,    -1,    -1,
      -1,    -1,    -1,    42,   106,    44,   108,    -1,    47,    48,
      -1,    -1,    -1,    52,    53,    -1,    -1,    -1,    -1,    -1,
     122,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    11,    12,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    -1,
      26,    -1,    -1,    92,    30,    -1,    95,    -1,    -1,    -1,
      99,    -1,    -1,    -1,    -1,    -1,    42,   106,    44,   108,
      -1,    47,    48,    -1,    -1,    -1,    52,    53,    -1,    -1,
      -1,    -1,    -1,   122,    -1,    61,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    -1,    26,    -1,
      -1,    -1,    30,    -1,    -1,    -1,    92,    -1,    -1,    95,
      -1,    -1,    -1,    99,    42,    -1,    44,    -1,    -1,    47,
      48,    -1,   108,    -1,    52,    53,    -1,    -1,    -1,    -1,
      -1,     5,    -1,    61,    -1,    -1,   122,    11,    12,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    -1,    26,    -1,    -1,    -1,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    92,    -1,    -1,    95,    42,    -1,
      44,    99,    -1,    47,    48,    -1,    -1,    -1,    52,    53,
     108,    -1,    -1,    -1,    -1,     5,    -1,    61,    -1,    -1,
      -1,    11,    12,    -1,   122,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    -1,    26,    -1,    -1,    -1,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    -1,
      -1,    95,    42,    -1,    44,    99,    -1,    47,    48,    -1,
      -1,    -1,    52,    53,   108,    -1,    -1,    -1,    -1,     5,
      -1,    61,    -1,    -1,    -1,    11,    12,    -1,   122,    -1,
      -1,    -1,    72,    73,    -1,    -1,    22,    23,    24,    -1,
      26,    -1,    -1,    -1,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    92,    -1,    -1,    95,    42,    -1,    44,    99,
      -1,    47,    48,    -1,    -1,    -1,    52,    53,   108,    -1,
      -1,    -1,    -1,     5,    -1,    61,    -1,    -1,    -1,    11,
      12,   121,    -1,    -1,    -1,    -1,    72,    73,    -1,    -1,
      22,    23,    24,    -1,    26,    -1,    -1,    -1,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    -1,    -1,    95,
      42,    -1,    44,    99,    -1,    47,    48,    -1,    -1,    -1,
      52,    53,   108,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    -1,    26,    -1,    -1,
      92,    30,    -1,    95,    -1,    -1,    -1,    99,    -1,    -1,
      -1,    -1,    -1,    42,   106,    44,   108,    -1,    47,    48,
      -1,    -1,    -1,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    11,    12,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    -1,
      26,    -1,    -1,    92,    30,    -1,    95,    -1,    -1,    -1,
      99,    -1,    -1,    -1,    -1,    -1,    42,   106,    44,   108,
      -1,    47,    48,    -1,    -1,    -1,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    -1,     5,    -1,    -1,    -1,    -1,    -1,    11,    12,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    -1,    26,    -1,    -1,    92,    30,    -1,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,    42,
     106,    44,   108,    -1,    47,    48,    -1,    -1,    -1,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,
      -1,    -1,    -1,    -1,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    11,    12,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    -1,    26,    -1,    -1,    92,
      30,    -1,    95,    -1,    -1,    -1,    99,    -1,    -1,    -1,
      -1,    -1,    42,   106,    44,   108,    -1,    47,    48,    -1,
      -1,    -1,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    92,    -1,    -1,    95,    -1,    -1,    -1,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     1,     5,     6,     7,     8,    10,    11,    12,    13,
      14,    19,    20,    21,    22,    23,    24,    25,    26,    30,
      34,    35,    37,    42,    43,    44,    45,    47,    48,    51,
      52,    53,    61,    62,    63,    68,    70,    71,    72,    73,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     102,   104,   105,   108,   121,   123,   124,   126,   128,   130,
     135,   136,   137,   138,   143,   150,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   197,   198,   199,   200,   201,
     202,   204,   209,   211,   212,   213,   214,   220,   222,   223,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   240,
     245,   250,   251,   252,   253,   254,   266,   270,   273,   289,
     297,   298,   310,   313,   315,   325,   328,   331,   343,   348,
     352,   354,   361,   373,   377,   380,   380,   152,   159,   160,
      36,    36,   255,   256,   126,    11,    12,    22,    23,    24,
      26,    29,    30,    42,    44,    51,    53,    61,    95,   108,
     114,   115,   122,   167,   168,   169,   171,   173,   176,   178,
     180,   182,   184,   187,   189,   191,   193,   197,   198,   199,
     202,   203,   209,   213,   215,   216,   220,   222,   223,   224,
     226,   233,   234,   235,   236,   245,   249,   250,   252,   166,
     164,   166,   165,   166,   159,   153,   216,   216,   314,   271,
     159,   166,   189,   191,   197,   198,   199,   202,   209,   213,
     219,   220,   250,   252,    36,   267,   258,   155,   362,   151,
     159,   189,   191,   193,    10,   166,   166,   128,   166,   279,
      19,   158,   241,    69,   374,   166,   197,   250,   339,   340,
     353,   216,    12,   126,   250,   122,   249,   106,   107,   122,
     186,   206,   207,   208,   216,   218,   239,   166,   193,   210,
       0,     1,   137,   138,   150,   273,   380,     3,     4,    36,
     126,   132,   237,   238,   237,   237,   166,   193,   196,   250,
      36,   237,   196,    36,   237,   196,   196,    36,   237,   196,
      36,   237,   196,    36,   237,   196,    36,   196,    36,   237,
     196,   237,   196,   250,    36,   196,   250,    36,   196,   250,
     126,   159,   237,     8,    10,   166,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   188,   190,   192,   196,   245,   250,   251,   252,
     253,   196,   237,   159,   237,    36,   196,    36,   159,   237,
     196,    36,   126,   237,   130,   196,    36,   159,   237,   196,
       9,    34,    35,    54,    55,    56,    57,    59,    60,   110,
     130,   221,   159,   159,   159,   159,   159,   246,   380,    36,
     237,    36,   159,   237,   196,   250,    36,   159,   237,   196,
     159,    15,    16,    17,    18,    40,    41,    46,    67,   101,
     103,   290,   291,   293,   294,   295,   296,   301,   303,   308,
     309,     1,   137,   138,   150,   161,   162,   273,   380,    17,
      18,    38,    39,    40,   290,   292,   293,   294,   295,   296,
     311,   312,   316,   321,   249,   162,    17,   101,   290,   291,
     292,   293,   294,   295,   349,   350,   351,   159,   216,   380,
     166,   259,   262,   259,   216,   216,   216,   216,   166,   201,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,   147,   148,   147,
     147,   147,   147,    27,    28,    31,    32,    33,    49,    50,
      58,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     125,   299,   147,   157,   125,   380,   125,   380,   189,   260,
     261,   262,   380,   166,   272,     9,   110,   335,   194,   166,
     268,   272,   260,    69,   367,   216,   374,    19,   380,   126,
     275,   166,   380,   145,   147,   126,   380,   114,   127,   106,
     166,   242,   243,   125,   166,   203,   207,   215,   216,   250,
     375,   376,    52,   125,   216,   380,   257,   166,   127,   129,
     166,   189,   197,   199,   201,   209,   125,   129,   107,   125,
     129,   380,   166,   166,   205,   208,   216,   106,   216,   217,
     125,   131,   205,   205,   210,   216,   216,   216,   216,   216,
     216,   216,   216,   210,   216,   244,   248,   380,   304,   308,
      16,   301,   308,   161,   317,   322,    38,   311,   321,    39,
     311,   380,    38,    39,   355,   358,   380,   132,   145,   264,
     265,   125,   380,   380,   125,   166,   166,   216,   216,   216,
     216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
     216,   216,   216,   216,   216,   380,   380,   166,   166,   145,
     264,   125,   154,   145,   125,   380,   216,   145,    52,   125,
     269,   380,   156,   216,   380,   380,   122,   380,   274,   166,
     278,   279,   281,   380,   276,   280,    19,   380,   145,   133,
     125,   376,   125,   122,   216,   341,   342,   339,   380,   378,
     259,   127,   216,   218,   208,   139,   141,   140,   142,   125,
     127,   217,   132,   127,   127,   125,   247,   162,   163,   302,
     249,   306,   308,   249,   380,   319,   311,   324,   326,   216,
     359,    38,   350,   358,   216,   263,   146,   148,   125,   131,
     262,   206,   300,     9,   146,   261,   380,   166,   332,   166,
     166,   380,   380,   163,    19,    92,   122,   166,   283,   287,
     288,   282,   279,   281,   380,   166,   277,   281,   106,   284,
     287,   288,   106,   166,   376,   166,   125,   344,   163,   380,
     107,   380,   126,   380,   126,   208,   217,   216,   129,   129,
     163,   380,   249,   380,   323,   249,   380,   163,   356,   380,
     216,     9,   216,   132,   125,   163,   216,   145,    47,   145,
     363,   380,   122,   166,   166,   145,   127,   125,   125,   145,
     125,   129,   127,   125,   145,   341,    99,   347,    17,   103,
     290,   291,   292,   294,   295,   296,   379,   218,   106,   144,
     149,   166,   144,   305,   380,   318,   163,   380,   163,   327,
     380,   360,   357,   216,   216,   206,   249,    64,    65,   370,
     371,   372,   166,   145,   126,   145,   145,   122,   166,   288,
      92,   281,   380,   145,   106,   288,   345,   127,   125,   145,
     127,   163,   307,   163,   320,    17,    41,   290,   291,   292,
     293,   294,   296,   329,   330,   163,   163,   380,   127,    48,
     336,   166,   364,   380,   380,   126,   145,   218,   285,   286,
     380,   166,   145,   122,   166,   125,   380,   380,   106,   166,
     380,   163,   163,   163,   249,   333,    66,   368,   369,   163,
     163,   285,   125,   127,   126,   145,   166,   145,   106,   346,
     145,   380,   365,   380,   127,   286,   285,   126,   145,   163,
     337,   334,    17,    67,   290,   291,   292,   293,   295,   296,
     366,   163,   127,   285,    17,    46,   291,   292,   293,   294,
     295,   296,   338,   337,   127,   166
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   134,   135,   135,   136,   136,   136,   136,   136,   136,
     136,   136,   136,   136,   136,   136,   137,   137,   137,   139,
     138,   140,   138,   141,   138,   142,   138,   143,   143,   143,
     143,   144,   144,   144,   144,   145,   145,   146,   146,   147,
     147,   147,   147,   147,   147,   147,   147,   147,   148,   148,
     148,   148,   148,   148,   148,   148,   148,   149,   149,   150,
     150,   150,   150,   150,   150,   150,   150,   150,   150,   150,
     150,   150,   150,   151,   150,   150,   150,   150,   152,   150,
     153,   154,   150,   155,   156,   150,   150,   150,   150,   150,
     150,   157,   150,   150,   158,   158,   160,   159,   161,   161,
     161,   161,   161,   161,   162,   162,   163,   163,   164,   164,
     165,   165,   166,   166,   166,   166,   166,   166,   166,   166,
     166,   166,   166,   166,   166,   166,   166,   166,   166,   166,
     166,   167,   167,   168,   169,   170,   170,   171,   172,   173,
     174,   175,   176,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   184,   185,   186,   186,   187,   188,   189,   189,
     190,   191,   192,   193,   193,   194,   194,   195,   195,   195,
     195,   195,   195,   195,   195,   195,   195,   195,   195,   195,
     195,   196,   196,   197,   197,   197,   197,   197,   197,   197,
     197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
     197,   197,   197,   198,   198,   198,   198,   198,   198,   199,
     199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   199,   200,   201,   202,
     202,   203,   204,   205,   205,   206,   206,   207,   207,   207,
     207,   207,   208,   208,   209,   209,   209,   210,   210,   211,
     212,   213,   214,   215,   215,   215,   215,   215,   215,   215,
     215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
     215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
     215,   215,   215,   215,   215,   216,   216,   216,   216,   216,
     216,   217,   217,   218,   218,   219,   219,   219,   219,   219,
     219,   219,   220,   220,   220,   220,   220,   220,   220,   220,
     220,   220,   220,   220,   220,   220,   220,   220,   220,   220,
     220,   220,   220,   221,   221,   222,   223,   223,   224,   224,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     233,   233,   233,   233,   233,   234,   234,   234,   234,   234,
     234,   235,   235,   236,   236,   236,   236,   236,   236,   236,
     236,   236,   237,   238,   238,   238,   239,   239,   241,   240,
     242,   242,   242,   242,   243,   243,   244,   244,   246,   247,
     245,   248,   245,   249,   249,   250,   251,   252,   253,   255,
     254,   256,   254,   257,   254,   258,   254,   259,   259,   260,
     260,   261,   261,   261,   261,   262,   263,   262,   262,   264,
     265,   265,   265,   267,   266,   268,   268,   269,   269,   271,
     270,   272,   272,   274,   273,   275,   273,   273,   273,   273,
     276,   273,   277,   277,   278,   278,   278,   278,   280,   279,
     282,   281,   283,   283,   283,   283,   284,   284,   284,   284,
     284,   284,   284,   285,   285,   286,   287,   287,   287,   287,
     287,   287,   288,   288,   288,   288,   288,   288,   289,   289,
     289,   289,   289,   289,   289,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   297,   297,   297,   299,   300,   298,
     302,   301,   304,   305,   303,   306,   307,   303,   308,   309,
     309,   309,   309,   309,   309,   309,   309,   310,   310,   310,
     310,   311,   312,   312,   312,   312,   312,   312,   312,   312,
     314,   313,   315,   315,   317,   318,   316,   319,   320,   316,
     322,   323,   321,   324,   321,   326,   327,   325,   328,   329,
     330,   330,   330,   330,   330,   330,   330,   330,   332,   333,
     334,   331,   335,   335,   336,   336,   337,   338,   338,   338,
     338,   338,   338,   338,   338,   338,   339,   339,   340,   340,
     341,   341,   342,   342,   344,   345,   346,   343,   347,   347,
     349,   348,   348,   350,   351,   351,   351,   351,   351,   351,
     351,   351,   353,   352,   354,   354,   356,   355,   357,   355,
     355,   355,   359,   360,   358,   362,   363,   364,   365,   361,
     366,   366,   366,   366,   366,   366,   366,   366,   367,   367,
     368,   368,   369,   370,   370,   370,   371,   372,   373,   373,
     374,   374,   375,   375,   375,   375,   375,   376,   376,   376,
     376,   376,   378,   377,   379,   379,   379,   379,   379,   379,
     379,   379,   380,   380
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     1,     1,     1,     1,     1,     2,
       2,     2,     2,     2,     2,     3,     3,     4,     6,     0,
       5,     0,     5,     0,     8,     0,     8,     0,     1,     1,
       1,     0,     1,     1,     3,     0,     1,     0,     1,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     4,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     0,     4,     2,     2,     2,     0,     4,
       0,     0,     5,     0,     0,     5,     1,     1,     1,     3,
       3,     0,     4,     4,     1,     3,     0,     2,     1,     1,
       1,     1,     1,     1,     1,     2,     0,     1,     1,     3,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     1,     2,     1,
       2,     2,     1,     1,     2,     1,     2,     3,     2,     2,
       2,     3,     3,     2,     3,     5,     1,     2,     1,     1,
       2,     2,     2,     1,     1,     2,     3,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     1,     1,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     4,     1,
       4,     2,     2,     1,     3,     1,     1,     2,     2,     2,
       2,     2,     1,     1,     3,     3,     2,     1,     1,     4,
       2,     4,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     1,     1,     2,     1,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     1,     1,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     2,     2,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     1,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     2,     2,     3,     4,     1,     3,     0,     4,
       0,     1,     1,     3,     2,     4,     1,     3,     0,     0,
       5,     0,     5,     1,     3,     3,     2,     8,     2,     0,
       4,     0,     4,     0,     5,     0,     4,     1,     3,     1,
       3,     1,     2,     4,     3,     2,     0,     5,     3,     2,
       2,     3,     4,     0,     5,     2,     4,     0,     2,     0,
       4,     2,     4,     0,     8,     0,     5,     3,     4,     3,
       0,     7,     1,     3,     1,     2,     1,     2,     0,     6,
       0,     3,     0,     1,     1,     3,     0,     1,     1,     1,
       3,     3,     5,     1,     3,     1,     2,     3,     5,     4,
       5,     7,     3,     4,     6,     5,     6,     8,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     3,     3,     4,     0,     0,     6,
       0,     4,     0,     0,     6,     0,     0,     7,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     3,     2,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     3,     1,     2,     0,     0,     6,     0,     0,     7,
       0,     0,     5,     0,     5,     0,     0,     7,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     0,
       0,    12,     1,     1,     0,     2,     2,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       2,     1,     1,     3,     0,     0,     0,    10,     0,     1,
       0,     4,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     4,     1,     2,     0,     5,     0,     6,
       1,     2,     0,     0,     5,     0,     0,     0,     0,    11,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     2,
       0,     3,     1,     0,     3,     3,     1,     2,     3,     2,
       0,     2,     1,     2,     1,     2,     3,     1,     1,     1,
       1,     1,     0,     6,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (pComp, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256



/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)

/* This macro is provided for backward compatibility. */
#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, pComp); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, PHB_COMP pComp)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (pComp);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, PHB_COMP pComp)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, pComp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, PHB_COMP pComp)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                                              , pComp);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, Rule, pComp); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, PHB_COMP pComp)
{
  YYUSE (yyvaluep);
  YYUSE (pComp);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  switch (yytype)
    {
          case 19: /* LITERAL  */
#line 287 "harbour.y" /* yacc.c:1257  */
      { if( ((*yyvaluep).valChar).dealloc ) hb_xfree( ((*yyvaluep).valChar).string ); }
#line 3512 "harboury.c" /* yacc.c:1257  */
        break;

    case 96: /* CBSTART  */
#line 286 "harbour.y" /* yacc.c:1257  */
      { if( ((*yyvaluep).asCodeblock).string )  hb_xfree( ((*yyvaluep).asCodeblock).string ); }
#line 3518 "harboury.c" /* yacc.c:1257  */
        break;


      default:
        break;
    }
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (PHB_COMP pComp)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);

        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, pComp);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 9:
#line 300 "harbour.y" /* yacc.c:1646  */
    { yyclearin; yyerrok; }
#line 3786 "harboury.c" /* yacc.c:1646  */
    break;

  case 15:
#line 306 "harbour.y" /* yacc.c:1646  */
    { yyclearin; yyerrok; }
#line 3792 "harboury.c" /* yacc.c:1646  */
    break;

  case 16:
#line 310 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->currLine = ( int ) (yyvsp[-1].valLong).lNumber;
                    HB_COMP_PARAM->pLex->fEol = HB_FALSE; }
#line 3799 "harboury.c" /* yacc.c:1646  */
    break;

  case 17:
#line 313 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->currModule = hb_compIdentifierNew( HB_COMP_PARAM, (yyvsp[-1].valChar).string, (yyvsp[-1].valChar).dealloc ? HB_IDENT_FREE : HB_IDENT_STATIC );
                    HB_COMP_PARAM->currLine = ( int ) (yyvsp[-2].valLong).lNumber;
                    HB_COMP_PARAM->pLex->fEol = HB_FALSE;
                    (yyvsp[-1].valChar).dealloc = HB_FALSE; }
#line 3808 "harboury.c" /* yacc.c:1646  */
    break;

  case 18:
#line 318 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->currModule = hb_compIdentifierNew( HB_COMP_PARAM, (yyvsp[-1].valChar).string, (yyvsp[-1].valChar).dealloc ? HB_IDENT_FREE : HB_IDENT_STATIC );
                    HB_COMP_PARAM->currLine = ( int ) (yyvsp[-4].valLong).lNumber;
                    HB_COMP_PARAM->pLex->fEol = HB_FALSE;
                    if( (yyvsp[-3].valChar).dealloc ) { hb_xfree( (yyvsp[-3].valChar).string ); (yyvsp[-3].valChar).dealloc = HB_FALSE; }
                    (yyvsp[-1].valChar).dealloc = HB_FALSE; }
#line 3818 "harboury.c" /* yacc.c:1646  */
    break;

  case 19:
#line 325 "harbour.y" /* yacc.c:1646  */
    { hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[0].string), ( HB_SYMBOLSCOPE ) (yyvsp[-2].iNumber), 0 ); }
#line 3824 "harboury.c" /* yacc.c:1646  */
    break;

  case 21:
#line 326 "harbour.y" /* yacc.c:1646  */
    { hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[0].string), ( HB_SYMBOLSCOPE ) (yyvsp[-2].iNumber), HB_FUNF_PROCEDURE ); }
#line 3830 "harboury.c" /* yacc.c:1646  */
    break;

  case 23:
#line 327 "harbour.y" /* yacc.c:1646  */
    { hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[0].string), ( HB_SYMBOLSCOPE ) (yyvsp[-2].iNumber), 0 ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_PARAMETER; }
#line 3836 "harboury.c" /* yacc.c:1646  */
    break;

  case 25:
#line 328 "harbour.y" /* yacc.c:1646  */
    { hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[0].string), ( HB_SYMBOLSCOPE ) (yyvsp[-2].iNumber), HB_FUNF_PROCEDURE ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_PARAMETER;}
#line 3842 "harboury.c" /* yacc.c:1646  */
    break;

  case 27:
#line 331 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber) = HB_FS_PUBLIC; }
#line 3848 "harboury.c" /* yacc.c:1646  */
    break;

  case 28:
#line 332 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber) = HB_FS_STATIC; }
#line 3854 "harboury.c" /* yacc.c:1646  */
    break;

  case 29:
#line 333 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber) = HB_FS_INIT; }
#line 3860 "harboury.c" /* yacc.c:1646  */
    break;

  case 30:
#line 334 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber) = HB_FS_EXIT; }
#line 3866 "harboury.c" /* yacc.c:1646  */
    break;

  case 31:
#line 337 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber) = 0; }
#line 3872 "harboury.c" /* yacc.c:1646  */
    break;

  case 32:
#line 338 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->functions.pLast->fVParams = HB_TRUE; (yyval.iNumber) = 0; }
#line 3878 "harboury.c" /* yacc.c:1646  */
    break;

  case 34:
#line 340 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->functions.pLast->fVParams = HB_TRUE; (yyval.iNumber) = (yyvsp[-2].iNumber); }
#line 3884 "harboury.c" /* yacc.c:1646  */
    break;

  case 35:
#line 343 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, ' ', NULL ); }
#line 3890 "harboury.c" /* yacc.c:1646  */
    break;

  case 37:
#line 347 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, ' ', NULL ); }
#line 3896 "harboury.c" /* yacc.c:1646  */
    break;

  case 39:
#line 351 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'N', NULL ); }
#line 3902 "harboury.c" /* yacc.c:1646  */
    break;

  case 40:
#line 352 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'C', NULL ); }
#line 3908 "harboury.c" /* yacc.c:1646  */
    break;

  case 41:
#line 353 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'D', NULL ); }
#line 3914 "harboury.c" /* yacc.c:1646  */
    break;

  case 42:
#line 354 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'L', NULL ); }
#line 3920 "harboury.c" /* yacc.c:1646  */
    break;

  case 43:
#line 355 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'B', NULL ); }
#line 3926 "harboury.c" /* yacc.c:1646  */
    break;

  case 44:
#line 356 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'O', NULL ); }
#line 3932 "harboury.c" /* yacc.c:1646  */
    break;

  case 45:
#line 357 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'S', (yyvsp[0].string) );   }
#line 3938 "harboury.c" /* yacc.c:1646  */
    break;

  case 46:
#line 358 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, ' ', NULL ); }
#line 3944 "harboury.c" /* yacc.c:1646  */
    break;

  case 48:
#line 362 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'A', NULL ); }
#line 3950 "harboury.c" /* yacc.c:1646  */
    break;

  case 49:
#line 363 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'n', NULL ); }
#line 3956 "harboury.c" /* yacc.c:1646  */
    break;

  case 50:
#line 364 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'c', NULL ); }
#line 3962 "harboury.c" /* yacc.c:1646  */
    break;

  case 51:
#line 365 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'd', NULL ); }
#line 3968 "harboury.c" /* yacc.c:1646  */
    break;

  case 52:
#line 366 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'l', NULL ); }
#line 3974 "harboury.c" /* yacc.c:1646  */
    break;

  case 53:
#line 367 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'a', NULL ); }
#line 3980 "harboury.c" /* yacc.c:1646  */
    break;

  case 54:
#line 368 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'b', NULL ); }
#line 3986 "harboury.c" /* yacc.c:1646  */
    break;

  case 55:
#line 369 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'o', NULL ); }
#line 3992 "harboury.c" /* yacc.c:1646  */
    break;

  case 56:
#line 370 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 's', (yyvsp[0].string) );   }
#line 3998 "harboury.c" /* yacc.c:1646  */
    break;

  case 57:
#line 373 "harbour.y" /* yacc.c:1646  */
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); (yyval.iNumber) = 1; }
#line 4004 "harboury.c" /* yacc.c:1646  */
    break;

  case 58:
#line 374 "harbour.y" /* yacc.c:1646  */
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); (yyval.iNumber)++; }
#line 4010 "harboury.c" /* yacc.c:1646  */
    break;

  case 60:
#line 383 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
#line 4016 "harboury.c" /* yacc.c:1646  */
    break;

  case 61:
#line 384 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
#line 4022 "harboury.c" /* yacc.c:1646  */
    break;

  case 62:
#line 385 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
#line 4028 "harboury.c" /* yacc.c:1646  */
    break;

  case 63:
#line 386 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
#line 4034 "harboury.c" /* yacc.c:1646  */
    break;

  case 64:
#line 387 "harbour.y" /* yacc.c:1646  */
    { if( HB_COMP_ISSUPPORTED( HB_COMPFLAG_XBASE ) )
                                         HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) );
                                      else
                                         HB_COMP_EXPR_FREE( HB_COMP_ERROR_SYNTAX( (yyvsp[-1].asExpr) ) );
                                      HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN;
                                    }
#line 4045 "harboury.c" /* yacc.c:1646  */
    break;

  case 65:
#line 393 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
#line 4051 "harboury.c" /* yacc.c:1646  */
    break;

  case 66:
#line 394 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
#line 4057 "harboury.c" /* yacc.c:1646  */
    break;

  case 67:
#line 395 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
#line 4063 "harboury.c" /* yacc.c:1646  */
    break;

  case 68:
#line 396 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
#line 4069 "harboury.c" /* yacc.c:1646  */
    break;

  case 69:
#line 397 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
#line 4075 "harboury.c" /* yacc.c:1646  */
    break;

  case 70:
#line 398 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
#line 4081 "harboury.c" /* yacc.c:1646  */
    break;

  case 71:
#line 399 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
#line 4087 "harboury.c" /* yacc.c:1646  */
    break;

  case 72:
#line 400 "harbour.y" /* yacc.c:1646  */
    { hb_compGenBreak( HB_COMP_PARAM ); hb_compGenPCode2( HB_P_DOSHORT, 0, HB_COMP_PARAM );
                                      HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_BREAK_CODE; }
#line 4094 "harboury.c" /* yacc.c:1646  */
    break;

  case 73:
#line 402 "harbour.y" /* yacc.c:1646  */
    { hb_compLinePushIfInside( HB_COMP_PARAM ); }
#line 4100 "harboury.c" /* yacc.c:1646  */
    break;

  case 74:
#line 403 "harbour.y" /* yacc.c:1646  */
    {
                                       hb_compGenBreak( HB_COMP_PARAM ); HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[-1].asExpr), HB_COMP_PARAM ) );
                                       hb_compGenPCode2( HB_P_DOSHORT, 1, HB_COMP_PARAM );
                                       HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_BREAK_CODE;
                                    }
#line 4110 "harboury.c" /* yacc.c:1646  */
    break;

  case 75:
#line 408 "harbour.y" /* yacc.c:1646  */
    { hb_compLoopExit( HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_BREAK_CODE; }
#line 4116 "harboury.c" /* yacc.c:1646  */
    break;

  case 76:
#line 409 "harbour.y" /* yacc.c:1646  */
    { hb_compLoopLoop( HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_BREAK_CODE; }
#line 4122 "harboury.c" /* yacc.c:1646  */
    break;

  case 77:
#line 410 "harbour.y" /* yacc.c:1646  */
    {
                        if( HB_COMP_PARAM->functions.pLast->wSeqCounter )
                        {
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "RETURN", NULL );
                        }
                        hb_compGenPCode1( HB_P_ENDPROC, HB_COMP_PARAM );
                        if( ( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_PROCEDURE ) == 0 )
                        {
                           /* return from a function without a return value */
                           hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_NO_RETURN_VALUE, NULL, NULL );
                        }
                        HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE;
                     }
#line 4140 "harboury.c" /* yacc.c:1646  */
    break;

  case 78:
#line 423 "harbour.y" /* yacc.c:1646  */
    {  hb_compLinePushIfInside( HB_COMP_PARAM ); }
#line 4146 "harboury.c" /* yacc.c:1646  */
    break;

  case 79:
#line 425 "harbour.y" /* yacc.c:1646  */
    {
                        if( HB_COMP_PARAM->functions.pLast->wSeqCounter )
                        {
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "RETURN", NULL );
                        }
                        /* TODO: check if return value agree with declared value */
                        HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[-1].asExpr), HB_COMP_PARAM ) );
                        if( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_EXTBLOCK )
                           /* extended clodeblock, use HB_P_ENDBLOCK to return value and stop execution */
                           hb_compGenPCode1( HB_P_ENDBLOCK, HB_COMP_PARAM );
                        else
                           hb_compGenPCode2( HB_P_RETVALUE, HB_P_ENDPROC, HB_COMP_PARAM );
                        if( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_PROCEDURE )
                        {
                           /* procedure returns a value */
                           hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_PROC_RETURN_VALUE, NULL, NULL );
                        }
                        HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE;
                     }
#line 4170 "harboury.c" /* yacc.c:1646  */
    break;

  case 80:
#line 444 "harbour.y" /* yacc.c:1646  */
    {  hb_compLinePushIfInside( HB_COMP_PARAM ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_PUBLIC; }
#line 4176 "harboury.c" /* yacc.c:1646  */
    break;

  case 81:
#line 446 "harbour.y" /* yacc.c:1646  */
    {  hb_compRTVariableGen( HB_COMP_PARAM, "__MVPUBLIC" );
                        HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE;
                        HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN;
                     }
#line 4185 "harboury.c" /* yacc.c:1646  */
    break;

  case 83:
#line 450 "harbour.y" /* yacc.c:1646  */
    {  hb_compLinePushIfInside( HB_COMP_PARAM ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_PRIVATE; }
#line 4191 "harboury.c" /* yacc.c:1646  */
    break;

  case 84:
#line 452 "harbour.y" /* yacc.c:1646  */
    {  hb_compRTVariableGen( HB_COMP_PARAM, "__MVPRIVATE" );
                        HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE;
                        HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN;
                     }
#line 4200 "harboury.c" /* yacc.c:1646  */
    break;

  case 91:
#line 461 "harbour.y" /* yacc.c:1646  */
    {
                  if( HB_COMP_PARAM->szAnnounce == NULL )
                     HB_COMP_PARAM->szAnnounce = (yyvsp[0].string);
                  else
                     hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_DUPL_ANNOUNCE, (yyvsp[0].string), NULL );
               }
#line 4211 "harboury.c" /* yacc.c:1646  */
    break;

  case 94:
#line 470 "harbour.y" /* yacc.c:1646  */
    {
               if( (yyvsp[0].valChar).dealloc )
               {
                  (yyvsp[0].valChar).string = ( char * ) HB_UNCONST( hb_compIdentifierNew( HB_COMP_PARAM, (yyvsp[0].valChar).string, HB_IDENT_FREE ) );
                  (yyvsp[0].valChar).dealloc = HB_FALSE;
               }
               hb_compModuleAdd( HB_COMP_PARAM, (yyvsp[0].valChar).string, HB_FALSE );
            }
#line 4224 "harboury.c" /* yacc.c:1646  */
    break;

  case 95:
#line 478 "harbour.y" /* yacc.c:1646  */
    {
               {
                  char szFileName[ HB_PATH_MAX ];
                  hb_strncat( hb_strncpy( szFileName, (yyvsp[-2].valChar).string, sizeof( szFileName ) - 1 ), (yyvsp[0].valChar).string, sizeof( szFileName ) - 1 );
                  hb_compModuleAdd( HB_COMP_PARAM, hb_compIdentifierNew( HB_COMP_PARAM, szFileName, HB_IDENT_COPY ), HB_FALSE );
                  if( (yyvsp[-2].valChar).dealloc )
                  {
                     hb_xfree( (yyvsp[-2].valChar).string );
                     (yyvsp[-2].valChar).dealloc = HB_FALSE;
                  }
                  if( (yyvsp[0].valChar).dealloc )
                  {
                     hb_xfree( (yyvsp[0].valChar).string );
                     (yyvsp[0].valChar).dealloc = HB_FALSE;
                  }
               }
            }
#line 4246 "harboury.c" /* yacc.c:1646  */
    break;

  case 96:
#line 497 "harbour.y" /* yacc.c:1646  */
    { hb_compLinePushIfInside( HB_COMP_PARAM ); }
#line 4252 "harboury.c" /* yacc.c:1646  */
    break;

  case 98:
#line 500 "harbour.y" /* yacc.c:1646  */
    { (yyval.lNumber) = 0; }
#line 4258 "harboury.c" /* yacc.c:1646  */
    break;

  case 99:
#line 501 "harbour.y" /* yacc.c:1646  */
    { (yyval.lNumber) = 1; }
#line 4264 "harboury.c" /* yacc.c:1646  */
    break;

  case 100:
#line 502 "harbour.y" /* yacc.c:1646  */
    { (yyval.lNumber) = 1; }
#line 4270 "harboury.c" /* yacc.c:1646  */
    break;

  case 101:
#line 503 "harbour.y" /* yacc.c:1646  */
    { (yyval.lNumber) = 0; }
#line 4276 "harboury.c" /* yacc.c:1646  */
    break;

  case 103:
#line 505 "harbour.y" /* yacc.c:1646  */
    { if( HB_COMP_PARAM->ilastLineErr && HB_COMP_PARAM->ilastLineErr == HB_COMP_PARAM->currLine )
                             {
                                yyclearin;
                             }
                             else
                             {
                                yyerrok;
                                HB_COMP_PARAM->ilastLineErr = HB_COMP_PARAM->currLine;
                             }
                             (yyval.lNumber) = 0;
                           }
#line 4292 "harboury.c" /* yacc.c:1646  */
    break;

  case 105:
#line 519 "harbour.y" /* yacc.c:1646  */
    { (yyval.lNumber) += (yyvsp[0].lNumber); }
#line 4298 "harboury.c" /* yacc.c:1646  */
    break;

  case 106:
#line 522 "harbour.y" /* yacc.c:1646  */
    { (yyval.lNumber) = 0; }
#line 4304 "harboury.c" /* yacc.c:1646  */
    break;

  case 108:
#line 526 "harbour.y" /* yacc.c:1646  */
    { hb_compExternAdd( HB_COMP_PARAM, (yyvsp[0].string), 0 ); }
#line 4310 "harboury.c" /* yacc.c:1646  */
    break;

  case 109:
#line 527 "harbour.y" /* yacc.c:1646  */
    { hb_compExternAdd( HB_COMP_PARAM, (yyvsp[0].string), 0 ); }
#line 4316 "harboury.c" /* yacc.c:1646  */
    break;

  case 110:
#line 530 "harbour.y" /* yacc.c:1646  */
    { hb_compExternAdd( HB_COMP_PARAM, (yyvsp[0].string), HB_FS_DEFERRED ); }
#line 4322 "harboury.c" /* yacc.c:1646  */
    break;

  case 111:
#line 531 "harbour.y" /* yacc.c:1646  */
    { hb_compExternAdd( HB_COMP_PARAM, (yyvsp[0].string), HB_FS_DEFERRED ); }
#line 4328 "harboury.c" /* yacc.c:1646  */
    break;

  case 113:
#line 535 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = "STEP"; }
#line 4334 "harboury.c" /* yacc.c:1646  */
    break;

  case 114:
#line 536 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = "TO"; }
#line 4340 "harboury.c" /* yacc.c:1646  */
    break;

  case 115:
#line 537 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = "LOOP"; }
#line 4346 "harboury.c" /* yacc.c:1646  */
    break;

  case 116:
#line 538 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = "EXIT"; }
#line 4352 "harboury.c" /* yacc.c:1646  */
    break;

  case 117:
#line 539 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = "IN"; }
#line 4358 "harboury.c" /* yacc.c:1646  */
    break;

  case 118:
#line 540 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4364 "harboury.c" /* yacc.c:1646  */
    break;

  case 119:
#line 541 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4370 "harboury.c" /* yacc.c:1646  */
    break;

  case 120:
#line 542 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4376 "harboury.c" /* yacc.c:1646  */
    break;

  case 121:
#line 543 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4382 "harboury.c" /* yacc.c:1646  */
    break;

  case 122:
#line 544 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4388 "harboury.c" /* yacc.c:1646  */
    break;

  case 123:
#line 545 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4394 "harboury.c" /* yacc.c:1646  */
    break;

  case 124:
#line 546 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4400 "harboury.c" /* yacc.c:1646  */
    break;

  case 125:
#line 547 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4406 "harboury.c" /* yacc.c:1646  */
    break;

  case 126:
#line 548 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4412 "harboury.c" /* yacc.c:1646  */
    break;

  case 127:
#line 549 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4418 "harboury.c" /* yacc.c:1646  */
    break;

  case 128:
#line 550 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4424 "harboury.c" /* yacc.c:1646  */
    break;

  case 129:
#line 551 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4430 "harboury.c" /* yacc.c:1646  */
    break;

  case 130:
#line 552 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4436 "harboury.c" /* yacc.c:1646  */
    break;

  case 131:
#line 557 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewDouble( (yyvsp[0].valDouble).dNumber, (yyvsp[0].valDouble).bWidth, (yyvsp[0].valDouble).bDec, HB_COMP_PARAM ); }
#line 4442 "harboury.c" /* yacc.c:1646  */
    break;

  case 132:
#line 558 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewLong( (yyvsp[0].valLong).lNumber, HB_COMP_PARAM ); }
#line 4448 "harboury.c" /* yacc.c:1646  */
    break;

  case 133:
#line 561 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewDate( ( long ) (yyvsp[0].valLong).lNumber, HB_COMP_PARAM ); }
#line 4454 "harboury.c" /* yacc.c:1646  */
    break;

  case 134:
#line 564 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewTimeStamp( (yyvsp[0].valTimeStamp).date, (yyvsp[0].valTimeStamp).time, HB_COMP_PARAM ); }
#line 4460 "harboury.c" /* yacc.c:1646  */
    break;

  case 135:
#line 567 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewLong( (yyvsp[-1].valLong).lNumber, HB_COMP_PARAM ); }
#line 4466 "harboury.c" /* yacc.c:1646  */
    break;

  case 136:
#line 568 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, hb_compExprNewDouble( (yyvsp[-1].valDouble).dNumber, (yyvsp[-1].valDouble).bWidth, (yyvsp[-1].valDouble).bDec, HB_COMP_PARAM ) ); }
#line 4472 "harboury.c" /* yacc.c:1646  */
    break;

  case 137:
#line 573 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewNil( HB_COMP_PARAM ); }
#line 4478 "harboury.c" /* yacc.c:1646  */
    break;

  case 139:
#line 581 "harbour.y" /* yacc.c:1646  */
    {
                                 (yyval.asExpr) = hb_compExprNewString( (yyvsp[0].valChar).string, (yyvsp[0].valChar).length, (yyvsp[0].valChar).dealloc, HB_COMP_PARAM );
                                 (yyvsp[0].valChar).dealloc = HB_FALSE;
                              }
#line 4487 "harboury.c" /* yacc.c:1646  */
    break;

  case 142:
#line 597 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewLogical( HB_TRUE, HB_COMP_PARAM ); }
#line 4493 "harboury.c" /* yacc.c:1646  */
    break;

  case 143:
#line 598 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewLogical( HB_FALSE, HB_COMP_PARAM ); }
#line 4499 "harboury.c" /* yacc.c:1646  */
    break;

  case 145:
#line 606 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewSelf( HB_COMP_PARAM ); }
#line 4505 "harboury.c" /* yacc.c:1646  */
    break;

  case 147:
#line 620 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewArray( (yyvsp[-1].asExpr), HB_COMP_PARAM ); }
#line 4511 "harboury.c" /* yacc.c:1646  */
    break;

  case 149:
#line 628 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4517 "harboury.c" /* yacc.c:1646  */
    break;

  case 151:
#line 634 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewHash( NULL, HB_COMP_PARAM ); }
#line 4523 "harboury.c" /* yacc.c:1646  */
    break;

  case 152:
#line 635 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewHash( (yyvsp[-1].asExpr), HB_COMP_PARAM ); }
#line 4529 "harboury.c" /* yacc.c:1646  */
    break;

  case 154:
#line 641 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprNewList( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr) ); }
#line 4535 "harboury.c" /* yacc.c:1646  */
    break;

  case 155:
#line 642 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprAddListExpr( (yyvsp[-4].asExpr), (yyvsp[-2].asExpr) ), (yyvsp[0].asExpr) ); }
#line 4541 "harboury.c" /* yacc.c:1646  */
    break;

  case 156:
#line 647 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewVar( (yyvsp[0].string), HB_COMP_PARAM ); }
#line 4547 "harboury.c" /* yacc.c:1646  */
    break;

  case 157:
#line 650 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAlias( (yyvsp[-1].string), HB_COMP_PARAM ); }
#line 4553 "harboury.c" /* yacc.c:1646  */
    break;

  case 158:
#line 655 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewMacro( NULL, '&', (yyvsp[0].string), HB_COMP_PARAM ); }
#line 4559 "harboury.c" /* yacc.c:1646  */
    break;

  case 159:
#line 656 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewMacro( NULL, 0, (yyvsp[0].string), HB_COMP_PARAM ); }
#line 4565 "harboury.c" /* yacc.c:1646  */
    break;

  case 161:
#line 664 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewMacro( (yyvsp[0].asExpr), 0, NULL, HB_COMP_PARAM ); }
#line 4571 "harboury.c" /* yacc.c:1646  */
    break;

  case 165:
#line 678 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAlias( "FIELD", HB_COMP_PARAM ); }
#line 4577 "harboury.c" /* yacc.c:1646  */
    break;

  case 166:
#line 679 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4583 "harboury.c" /* yacc.c:1646  */
    break;

  case 167:
#line 684 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4589 "harboury.c" /* yacc.c:1646  */
    break;

  case 168:
#line 685 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4595 "harboury.c" /* yacc.c:1646  */
    break;

  case 169:
#line 686 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4601 "harboury.c" /* yacc.c:1646  */
    break;

  case 170:
#line 687 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4607 "harboury.c" /* yacc.c:1646  */
    break;

  case 171:
#line 688 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4613 "harboury.c" /* yacc.c:1646  */
    break;

  case 172:
#line 689 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4619 "harboury.c" /* yacc.c:1646  */
    break;

  case 173:
#line 690 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4625 "harboury.c" /* yacc.c:1646  */
    break;

  case 174:
#line 691 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4631 "harboury.c" /* yacc.c:1646  */
    break;

  case 175:
#line 692 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4637 "harboury.c" /* yacc.c:1646  */
    break;

  case 176:
#line 693 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4643 "harboury.c" /* yacc.c:1646  */
    break;

  case 177:
#line 694 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4649 "harboury.c" /* yacc.c:1646  */
    break;

  case 178:
#line 695 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4655 "harboury.c" /* yacc.c:1646  */
    break;

  case 179:
#line 696 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4661 "harboury.c" /* yacc.c:1646  */
    break;

  case 180:
#line 697 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4667 "harboury.c" /* yacc.c:1646  */
    break;

  case 181:
#line 700 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewVar( (yyvsp[0].string), HB_COMP_PARAM ); }
#line 4673 "harboury.c" /* yacc.c:1646  */
    break;

  case 183:
#line 704 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4679 "harboury.c" /* yacc.c:1646  */
    break;

  case 184:
#line 705 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4685 "harboury.c" /* yacc.c:1646  */
    break;

  case 185:
#line 706 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4691 "harboury.c" /* yacc.c:1646  */
    break;

  case 186:
#line 707 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4697 "harboury.c" /* yacc.c:1646  */
    break;

  case 187:
#line 708 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4703 "harboury.c" /* yacc.c:1646  */
    break;

  case 188:
#line 709 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4709 "harboury.c" /* yacc.c:1646  */
    break;

  case 189:
#line 710 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4715 "harboury.c" /* yacc.c:1646  */
    break;

  case 190:
#line 711 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4721 "harboury.c" /* yacc.c:1646  */
    break;

  case 191:
#line 712 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4727 "harboury.c" /* yacc.c:1646  */
    break;

  case 192:
#line 713 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4733 "harboury.c" /* yacc.c:1646  */
    break;

  case 193:
#line 714 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4739 "harboury.c" /* yacc.c:1646  */
    break;

  case 194:
#line 715 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4745 "harboury.c" /* yacc.c:1646  */
    break;

  case 195:
#line 716 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4751 "harboury.c" /* yacc.c:1646  */
    break;

  case 196:
#line 717 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4757 "harboury.c" /* yacc.c:1646  */
    break;

  case 197:
#line 718 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4763 "harboury.c" /* yacc.c:1646  */
    break;

  case 198:
#line 719 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4769 "harboury.c" /* yacc.c:1646  */
    break;

  case 199:
#line 720 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4775 "harboury.c" /* yacc.c:1646  */
    break;

  case 200:
#line 721 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4781 "harboury.c" /* yacc.c:1646  */
    break;

  case 201:
#line 722 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4787 "harboury.c" /* yacc.c:1646  */
    break;

  case 202:
#line 723 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4793 "harboury.c" /* yacc.c:1646  */
    break;

  case 203:
#line 732 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4799 "harboury.c" /* yacc.c:1646  */
    break;

  case 204:
#line 733 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4805 "harboury.c" /* yacc.c:1646  */
    break;

  case 205:
#line 734 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4811 "harboury.c" /* yacc.c:1646  */
    break;

  case 206:
#line 735 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4817 "harboury.c" /* yacc.c:1646  */
    break;

  case 207:
#line 736 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4823 "harboury.c" /* yacc.c:1646  */
    break;

  case 208:
#line 737 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4829 "harboury.c" /* yacc.c:1646  */
    break;

  case 209:
#line 742 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4835 "harboury.c" /* yacc.c:1646  */
    break;

  case 210:
#line 743 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4841 "harboury.c" /* yacc.c:1646  */
    break;

  case 211:
#line 744 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4847 "harboury.c" /* yacc.c:1646  */
    break;

  case 212:
#line 745 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4853 "harboury.c" /* yacc.c:1646  */
    break;

  case 213:
#line 746 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4859 "harboury.c" /* yacc.c:1646  */
    break;

  case 214:
#line 747 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4865 "harboury.c" /* yacc.c:1646  */
    break;

  case 215:
#line 748 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4871 "harboury.c" /* yacc.c:1646  */
    break;

  case 216:
#line 749 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4877 "harboury.c" /* yacc.c:1646  */
    break;

  case 217:
#line 750 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4883 "harboury.c" /* yacc.c:1646  */
    break;

  case 218:
#line 751 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4889 "harboury.c" /* yacc.c:1646  */
    break;

  case 219:
#line 752 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4895 "harboury.c" /* yacc.c:1646  */
    break;

  case 220:
#line 753 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4901 "harboury.c" /* yacc.c:1646  */
    break;

  case 221:
#line 754 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4907 "harboury.c" /* yacc.c:1646  */
    break;

  case 222:
#line 755 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4913 "harboury.c" /* yacc.c:1646  */
    break;

  case 223:
#line 756 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4919 "harboury.c" /* yacc.c:1646  */
    break;

  case 224:
#line 757 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4925 "harboury.c" /* yacc.c:1646  */
    break;

  case 225:
#line 758 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4931 "harboury.c" /* yacc.c:1646  */
    break;

  case 226:
#line 759 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4937 "harboury.c" /* yacc.c:1646  */
    break;

  case 228:
#line 766 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewFunCall( hb_compExprNewFunName( (yyvsp[-3].string), HB_COMP_PARAM ), (yyvsp[-1].asExpr), HB_COMP_PARAM ); }
#line 4943 "harboury.c" /* yacc.c:1646  */
    break;

  case 230:
#line 770 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewFunCall( (yyvsp[-3].asExpr), (yyvsp[-1].asExpr), HB_COMP_PARAM ); }
#line 4949 "harboury.c" /* yacc.c:1646  */
    break;

  case 231:
#line 774 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4955 "harboury.c" /* yacc.c:1646  */
    break;

  case 233:
#line 780 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4961 "harboury.c" /* yacc.c:1646  */
    break;

  case 234:
#line 781 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[-2].asExpr), (yyvsp[0].asExpr) ); }
#line 4967 "harboury.c" /* yacc.c:1646  */
    break;

  case 237:
#line 788 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewVarRef( (yyvsp[0].string), HB_COMP_PARAM ) ); }
#line 4973 "harboury.c" /* yacc.c:1646  */
    break;

  case 238:
#line 789 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewRef( (yyvsp[0].asExpr), HB_COMP_PARAM ) ); }
#line 4979 "harboury.c" /* yacc.c:1646  */
    break;

  case 239:
#line 790 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewRef( (yyvsp[0].asExpr), HB_COMP_PARAM ) ); }
#line 4985 "harboury.c" /* yacc.c:1646  */
    break;

  case 240:
#line 791 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewRef( (yyvsp[0].asExpr), HB_COMP_PARAM ) ); }
#line 4991 "harboury.c" /* yacc.c:1646  */
    break;

  case 241:
#line 792 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, (yyvsp[0].asExpr) ); (yyval.asExpr)->value.asList.reference = HB_TRUE; }
#line 4997 "harboury.c" /* yacc.c:1646  */
    break;

  case 242:
#line 795 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewArgRef( HB_COMP_PARAM ); }
#line 5003 "harboury.c" /* yacc.c:1646  */
    break;

  case 244:
#line 801 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compCheckMethod( HB_COMP_PARAM, hb_compExprNewMethodObject( (yyvsp[0].asExpr), (yyvsp[-2].asExpr) ) ); }
#line 5009 "harboury.c" /* yacc.c:1646  */
    break;

  case 245:
#line 802 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewMethodObject( (yyvsp[0].asExpr), (yyvsp[-2].asExpr) ); }
#line 5015 "harboury.c" /* yacc.c:1646  */
    break;

  case 246:
#line 803 "harbour.y" /* yacc.c:1646  */
    {  if( HB_COMP_PARAM->functions.pLast->wWithObjectCnt == 0 )
                                                hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_WITHOBJECT, NULL, NULL );
                                             (yyval.asExpr) = (yyvsp[0].asExpr);
                                          }
#line 5024 "harboury.c" /* yacc.c:1646  */
    break;

  case 247:
#line 809 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewSend( (yyvsp[0].string), HB_COMP_PARAM ); }
#line 5030 "harboury.c" /* yacc.c:1646  */
    break;

  case 248:
#line 810 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewMacroSend( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5036 "harboury.c" /* yacc.c:1646  */
    break;

  case 249:
#line 813 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[-1].string), HB_COMP_PARAM ); }
#line 5042 "harboury.c" /* yacc.c:1646  */
    break;

  case 251:
#line 821 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewMethodCall( (yyvsp[-3].asExpr), (yyvsp[-1].asExpr) ); }
#line 5048 "harboury.c" /* yacc.c:1646  */
    break;

  case 261:
#line 841 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-1].asExpr); }
#line 5054 "harboury.c" /* yacc.c:1646  */
    break;

  case 271:
#line 851 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-1].asExpr); }
#line 5060 "harboury.c" /* yacc.c:1646  */
    break;

  case 274:
#line 854 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-1].asExpr); }
#line 5066 "harboury.c" /* yacc.c:1646  */
    break;

  case 276:
#line 856 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-1].asExpr); }
#line 5072 "harboury.c" /* yacc.c:1646  */
    break;

  case 288:
#line 870 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-1].asExpr); }
#line 5078 "harboury.c" /* yacc.c:1646  */
    break;

  case 289:
#line 871 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-1].asExpr); }
#line 5084 "harboury.c" /* yacc.c:1646  */
    break;

  case 291:
#line 875 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewArgRef( HB_COMP_PARAM ); }
#line 5090 "harboury.c" /* yacc.c:1646  */
    break;

  case 293:
#line 879 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewEmpty( HB_COMP_PARAM ); }
#line 5096 "harboury.c" /* yacc.c:1646  */
    break;

  case 295:
#line 883 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewVar( (yyvsp[0].string), HB_COMP_PARAM ); }
#line 5102 "harboury.c" /* yacc.c:1646  */
    break;

  case 301:
#line 889 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprListStrip( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5108 "harboury.c" /* yacc.c:1646  */
    break;

  case 323:
#line 922 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewPostInc( (yyvsp[-1].asExpr), HB_COMP_PARAM ); }
#line 5114 "harboury.c" /* yacc.c:1646  */
    break;

  case 324:
#line 923 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewPostDec( (yyvsp[-1].asExpr), HB_COMP_PARAM ); }
#line 5120 "harboury.c" /* yacc.c:1646  */
    break;

  case 325:
#line 926 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 5126 "harboury.c" /* yacc.c:1646  */
    break;

  case 326:
#line 929 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewPreInc( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5132 "harboury.c" /* yacc.c:1646  */
    break;

  case 327:
#line 930 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewPreDec( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5138 "harboury.c" /* yacc.c:1646  */
    break;

  case 328:
#line 933 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewNot( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5144 "harboury.c" /* yacc.c:1646  */
    break;

  case 329:
#line 934 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewNegate( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5150 "harboury.c" /* yacc.c:1646  */
    break;

  case 330:
#line 935 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 5156 "harboury.c" /* yacc.c:1646  */
    break;

  case 331:
#line 938 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[-2].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5162 "harboury.c" /* yacc.c:1646  */
    break;

  case 332:
#line 941 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[-2].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5168 "harboury.c" /* yacc.c:1646  */
    break;

  case 333:
#line 944 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5174 "harboury.c" /* yacc.c:1646  */
    break;

  case 334:
#line 947 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5180 "harboury.c" /* yacc.c:1646  */
    break;

  case 335:
#line 950 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5186 "harboury.c" /* yacc.c:1646  */
    break;

  case 336:
#line 953 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5192 "harboury.c" /* yacc.c:1646  */
    break;

  case 337:
#line 956 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5198 "harboury.c" /* yacc.c:1646  */
    break;

  case 338:
#line 959 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5204 "harboury.c" /* yacc.c:1646  */
    break;

  case 345:
#line 970 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlus( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5210 "harboury.c" /* yacc.c:1646  */
    break;

  case 346:
#line 971 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinus( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5216 "harboury.c" /* yacc.c:1646  */
    break;

  case 347:
#line 972 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMult( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5222 "harboury.c" /* yacc.c:1646  */
    break;

  case 348:
#line 973 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDiv( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5228 "harboury.c" /* yacc.c:1646  */
    break;

  case 349:
#line 974 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMod( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5234 "harboury.c" /* yacc.c:1646  */
    break;

  case 350:
#line 975 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPower( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5240 "harboury.c" /* yacc.c:1646  */
    break;

  case 351:
#line 978 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewAnd( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5246 "harboury.c" /* yacc.c:1646  */
    break;

  case 352:
#line 979 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewOr( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5252 "harboury.c" /* yacc.c:1646  */
    break;

  case 353:
#line 982 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewEQ( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5258 "harboury.c" /* yacc.c:1646  */
    break;

  case 354:
#line 983 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewLT( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5264 "harboury.c" /* yacc.c:1646  */
    break;

  case 355:
#line 984 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewGT( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5270 "harboury.c" /* yacc.c:1646  */
    break;

  case 356:
#line 985 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewLE( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5276 "harboury.c" /* yacc.c:1646  */
    break;

  case 357:
#line 986 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewGE( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5282 "harboury.c" /* yacc.c:1646  */
    break;

  case 358:
#line 987 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewNE( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5288 "harboury.c" /* yacc.c:1646  */
    break;

  case 359:
#line 988 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewNE( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5294 "harboury.c" /* yacc.c:1646  */
    break;

  case 360:
#line 989 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewIN( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5300 "harboury.c" /* yacc.c:1646  */
    break;

  case 361:
#line 990 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewEqual( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5306 "harboury.c" /* yacc.c:1646  */
    break;

  case 363:
#line 999 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewArrayAt( (yyvsp[-2].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5312 "harboury.c" /* yacc.c:1646  */
    break;

  case 364:
#line 1000 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewArrayAt( (yyvsp[-2].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5318 "harboury.c" /* yacc.c:1646  */
    break;

  case 365:
#line 1001 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewArrayAt( (yyvsp[-3].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5324 "harboury.c" /* yacc.c:1646  */
    break;

  case 366:
#line 1004 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewList( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5330 "harboury.c" /* yacc.c:1646  */
    break;

  case 367:
#line 1005 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[-2].asExpr), (yyvsp[0].asExpr) ); }
#line 5336 "harboury.c" /* yacc.c:1646  */
    break;

  case 368:
#line 1008 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewCodeBlock( (yyvsp[0].asCodeblock).string, (yyvsp[0].asCodeblock).length, (yyvsp[0].asCodeblock).flags, HB_COMP_PARAM ); (yyvsp[0].asCodeblock).string = NULL; }
#line 5342 "harboury.c" /* yacc.c:1646  */
    break;

  case 369:
#line 1009 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-2].asExpr); }
#line 5348 "harboury.c" /* yacc.c:1646  */
    break;

  case 370:
#line 1014 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = NULL; }
#line 5354 "harboury.c" /* yacc.c:1646  */
    break;

  case 371:
#line 1015 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = NULL; (yyvsp[-1].asExpr)->value.asCodeblock.flags |= HB_BLOCK_VPARAMS; }
#line 5360 "harboury.c" /* yacc.c:1646  */
    break;

  case 372:
#line 1016 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr);   }
#line 5366 "harboury.c" /* yacc.c:1646  */
    break;

  case 373:
#line 1017 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-2].asExpr);   (yyvsp[-3].asExpr)->value.asCodeblock.flags |= HB_BLOCK_VPARAMS; }
#line 5372 "harboury.c" /* yacc.c:1646  */
    break;

  case 374:
#line 1020 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_LOCAL; (yyval.asExpr) = hb_compExprCBVarAdd( (yyvsp[-2].asExpr), (yyvsp[-1].string), (yyvsp[0].asVarType)->cVarType, HB_COMP_PARAM ); }
#line 5378 "harboury.c" /* yacc.c:1646  */
    break;

  case 375:
#line 1021 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_LOCAL; (yyval.asExpr) = hb_compExprCBVarAdd( (yyvsp[-4].asExpr), (yyvsp[-1].string), (yyvsp[0].asVarType)->cVarType, HB_COMP_PARAM ); }
#line 5384 "harboury.c" /* yacc.c:1646  */
    break;

  case 376:
#line 1024 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddCodeblockExpr( (yyvsp[(-1) - (1)].asExpr), (yyvsp[0].asExpr) ); }
#line 5390 "harboury.c" /* yacc.c:1646  */
    break;

  case 377:
#line 1025 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddCodeblockExpr( (yyvsp[(-1) - (3)].asExpr), (yyvsp[0].asExpr) ); }
#line 5396 "harboury.c" /* yacc.c:1646  */
    break;

  case 378:
#line 1029 "harbour.y" /* yacc.c:1646  */
    { (yyval.bTrue) = HB_COMP_PARAM->functions.pLast->bBlock;
                HB_COMP_PARAM->functions.pLast->bBlock = HB_TRUE; }
#line 5403 "harboury.c" /* yacc.c:1646  */
    break;

  case 379:
#line 1032 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->functions.pLast->bBlock = (yyvsp[-1].bTrue); }
#line 5409 "harboury.c" /* yacc.c:1646  */
    break;

  case 381:
#line 1035 "harbour.y" /* yacc.c:1646  */
    {  /* 3 */
               PHB_CBVAR pVar;
               (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
               (yyvsp[0].sNumber) = HB_COMP_PARAM->lastLine;
               hb_compCodeBlockStart( HB_COMP_PARAM, 0 );
               HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_EXTBLOCK;
               HB_COMP_PARAM->functions.pLast->fVParams =
                  ( (yyvsp[-1].asExpr)->value.asCodeblock.flags & HB_BLOCK_VPARAMS ) != 0;

               (yyvsp[-1].asExpr)->value.asCodeblock.flags |= HB_BLOCK_EXT;
               if( (yyvsp[-1].asExpr)->value.asCodeblock.string )
               {
                  hb_xfree( (yyvsp[-1].asExpr)->value.asCodeblock.string );
                  (yyvsp[-1].asExpr)->value.asCodeblock.string = NULL;
                  (yyvsp[-1].asExpr)->nLength = 0;
               }

               HB_COMP_PARAM->iVarScope = HB_VSCOMP_PARAMETER;
               pVar = (yyvsp[-1].asExpr)->value.asCodeblock.pLocals;
               while( pVar )
               {
                  hb_compVariableAdd( HB_COMP_PARAM, pVar->szName, hb_compVarTypeNew( HB_COMP_PARAM, pVar->bType, NULL ) );
                  pVar =pVar->pNext;
               }
            }
#line 5439 "harboury.c" /* yacc.c:1646  */
    break;

  case 382:
#line 1061 "harbour.y" /* yacc.c:1646  */
    {  /* 6 */
               /* protection against nested function/procedure inside extended block */
               if( HB_COMP_PARAM->iErrorCount == 0 ||
                   HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_EXTBLOCK )
               {
                  hb_compCodeBlockEnd( HB_COMP_PARAM );
                  (yyval.asExpr) = hb_compExprSetCodeblockBody( (yyvsp[-4].asExpr),
                          HB_COMP_PARAM->functions.pLast->pCode + (yyvsp[-2].sNumber),
                          HB_COMP_PARAM->functions.pLast->nPCodePos - (yyvsp[-2].sNumber) );
                  HB_COMP_PARAM->functions.pLast->nPCodePos = (yyvsp[-2].sNumber);
                  HB_COMP_PARAM->lastLine = (yyvsp[-3].sNumber);
               }
            }
#line 5457 "harboury.c" /* yacc.c:1646  */
    break;

  case 383:
#line 1076 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewList( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5463 "harboury.c" /* yacc.c:1646  */
    break;

  case 384:
#line 1077 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[-2].asExpr), (yyvsp[0].asExpr) ); }
#line 5469 "harboury.c" /* yacc.c:1646  */
    break;

  case 385:
#line 1079 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-1].asExpr); }
#line 5475 "harboury.c" /* yacc.c:1646  */
    break;

  case 387:
#line 1092 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewIIF( hb_compExprAddListExpr( hb_compExprAddListExpr( hb_compExprNewList( (yyvsp[-5].asExpr), HB_COMP_PARAM ), (yyvsp[-3].asExpr) ), (yyvsp[-1].asExpr) ) ); }
#line 5481 "harboury.c" /* yacc.c:1646  */
    break;

  case 389:
#line 1098 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_LOCAL; hb_compLinePush( HB_COMP_PARAM ); }
#line 5487 "harboury.c" /* yacc.c:1646  */
    break;

  case 391:
#line 1100 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_STATIC; hb_compLinePush( HB_COMP_PARAM ); }
#line 5493 "harboury.c" /* yacc.c:1646  */
    break;

  case 393:
#line 1102 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_TH_STATIC; hb_compLinePush( HB_COMP_PARAM ); }
#line 5499 "harboury.c" /* yacc.c:1646  */
    break;

  case 395:
#line 1104 "harbour.y" /* yacc.c:1646  */
    { if( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_USES_LOCAL_PARAMS )
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_PARAMETERS_NOT_ALLOWED, NULL, NULL );
                        else
                        {
                           HB_COMP_PARAM->functions.pLast->wParamNum = 0;
                           HB_COMP_PARAM->iVarScope = ( HB_VSCOMP_PRIVATE | HB_VSCOMP_PARAMETER );
                        }
                      }
#line 5512 "harboury.c" /* yacc.c:1646  */
    break;

  case 396:
#line 1111 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; }
#line 5518 "harboury.c" /* yacc.c:1646  */
    break;

  case 397:
#line 1114 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber) = 1; }
#line 5524 "harboury.c" /* yacc.c:1646  */
    break;

  case 398:
#line 1115 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber)++; }
#line 5530 "harboury.c" /* yacc.c:1646  */
    break;

  case 399:
#line 1118 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber) = 1; }
#line 5536 "harboury.c" /* yacc.c:1646  */
    break;

  case 400:
#line 1119 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber)++; }
#line 5542 "harboury.c" /* yacc.c:1646  */
    break;

  case 402:
#line 1129 "harbour.y" /* yacc.c:1646  */
    { hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( NULL, (yyvsp[-1].asExpr), HB_COMP_PARAM ), HB_FALSE ); }
#line 5548 "harboury.c" /* yacc.c:1646  */
    break;

  case 403:
#line 1131 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[0].asExpr), HB_COMP_PARAM ) );
                 hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( NULL, (yyvsp[-3].asExpr), HB_COMP_PARAM ), HB_TRUE );
               }
#line 5556 "harboury.c" /* yacc.c:1646  */
    break;

  case 404:
#line 1135 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_EXPR_FREE( hb_compArrayDimPush( (yyvsp[-1].asExpr), HB_COMP_PARAM ) );
                  hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( NULL, (yyvsp[-2].asExpr), HB_COMP_PARAM ), HB_TRUE );
               }
#line 5565 "harboury.c" /* yacc.c:1646  */
    break;

  case 405:
#line 1142 "harbour.y" /* yacc.c:1646  */
    {
                  hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) );
                  if( HB_COMP_PARAM->iVarScope & HB_VSCOMP_STATIC )
                  {
                     hb_compStaticDefStart( HB_COMP_PARAM );   /* switch to statics pcode buffer */
                     hb_compStaticDefEnd( HB_COMP_PARAM, (yyvsp[-1].string) );
                  }
                  else if( HB_COMP_PARAM->iVarScope == HB_VSCOMP_PUBLIC || HB_COMP_PARAM->iVarScope == HB_VSCOMP_PRIVATE )
                  {
                     hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( (yyvsp[-1].string), NULL, HB_COMP_PARAM ), HB_FALSE );
                  }
                  else if( HB_COMP_PARAM->iVarScope == HB_VSCOMP_LOCAL &&
                           ( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_EXTBLOCK ) )
                  {
                     HB_COMP_EXPR_FREE( hb_compExprGenPush( hb_compExprNewNil( HB_COMP_PARAM ), HB_COMP_PARAM ) );
                  }
               }
#line 5587 "harboury.c" /* yacc.c:1646  */
    break;

  case 406:
#line 1159 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber) = HB_COMP_PARAM->iVarScope;
                                hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) );
                              }
#line 5595 "harboury.c" /* yacc.c:1646  */
    break;

  case 407:
#line 1163 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_PARAM->iVarScope = (yyvsp[-2].iNumber);
                  if( HB_COMP_PARAM->iVarScope & HB_VSCOMP_STATIC )
                  {
                     hb_compStaticDefStart( HB_COMP_PARAM );   /* switch to statics pcode buffer */
                     HB_COMP_EXPR_FREE( hb_compExprGenStatement( hb_compExprAssignStatic( hb_compExprNewVar( (yyvsp[-4].string), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ) );
                     hb_compStaticDefEnd( HB_COMP_PARAM, (yyvsp[-4].string) );
                  }
                  else if( HB_COMP_PARAM->iVarScope == HB_VSCOMP_PUBLIC || HB_COMP_PARAM->iVarScope == HB_VSCOMP_PRIVATE )
                  {
                     HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[0].asExpr), HB_COMP_PARAM ) );
                     hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( (yyvsp[-4].string), NULL, HB_COMP_PARAM ), HB_TRUE );
                  }
                  else if( HB_COMP_PARAM->iVarScope == HB_VSCOMP_LOCAL &&
                           ( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_EXTBLOCK ) )
                  {
                     HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[0].asExpr), HB_COMP_PARAM ) );
                  }
                  else
                  {
                     HB_COMP_EXPR_FREE( hb_compExprGenStatement( hb_compExprAssign( hb_compExprNewVar( (yyvsp[-4].string), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ) );
                  }
                  HB_COMP_PARAM->iVarScope = (yyvsp[-2].iNumber);
               }
#line 5624 "harboury.c" /* yacc.c:1646  */
    break;

  case 408:
#line 1188 "harbour.y" /* yacc.c:1646  */
    { hb_compVariableDim( (yyvsp[-2].string), (yyvsp[-1].asExpr), HB_COMP_PARAM ); }
#line 5630 "harboury.c" /* yacc.c:1646  */
    break;

  case 410:
#line 1197 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5636 "harboury.c" /* yacc.c:1646  */
    break;

  case 411:
#line 1198 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[-2].asExpr), (yyvsp[0].asExpr) ); }
#line 5642 "harboury.c" /* yacc.c:1646  */
    break;

  case 412:
#line 1199 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[-3].asExpr), (yyvsp[0].asExpr) ); }
#line 5648 "harboury.c" /* yacc.c:1646  */
    break;

  case 413:
#line 1202 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_FIELD; }
#line 5654 "harboury.c" /* yacc.c:1646  */
    break;

  case 414:
#line 1204 "harbour.y" /* yacc.c:1646  */
    {
               if( (yyvsp[-1].string) ) hb_compFieldSetAlias( HB_COMP_PARAM, (yyvsp[-1].string), (yyvsp[-2].iNumber) );
             }
#line 5662 "harboury.c" /* yacc.c:1646  */
    break;

  case 415:
#line 1209 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber) = hb_compFieldsCount( HB_COMP_PARAM ); hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); }
#line 5668 "harboury.c" /* yacc.c:1646  */
    break;

  case 416:
#line 1210 "harbour.y" /* yacc.c:1646  */
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); }
#line 5674 "harboury.c" /* yacc.c:1646  */
    break;

  case 417:
#line 1213 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = NULL; }
#line 5680 "harboury.c" /* yacc.c:1646  */
    break;

  case 418:
#line 1214 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 5686 "harboury.c" /* yacc.c:1646  */
    break;

  case 419:
#line 1217 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_MEMVAR; }
#line 5692 "harboury.c" /* yacc.c:1646  */
    break;

  case 421:
#line 1220 "harbour.y" /* yacc.c:1646  */
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); }
#line 5698 "harboury.c" /* yacc.c:1646  */
    break;

  case 422:
#line 1221 "harbour.y" /* yacc.c:1646  */
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); }
#line 5704 "harboury.c" /* yacc.c:1646  */
    break;

  case 423:
#line 1224 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredAdd( HB_COMP_PARAM, (yyvsp[-1].string) ); HB_COMP_PARAM->szDeclaredFun = (yyvsp[-1].string); }
#line 5710 "harboury.c" /* yacc.c:1646  */
    break;

  case 424:
#line 1225 "harbour.y" /* yacc.c:1646  */
    {
               if( HB_COMP_PARAM->pLastDeclared )
               {
                 HB_COMP_PARAM->pLastDeclared->cType = (yyvsp[-1].asVarType)->cVarType;

                 if( HB_TOUPPER( (yyvsp[-1].asVarType)->cVarType ) == 'S' )
                 {
                   HB_COMP_PARAM->pLastDeclared->pClass = hb_compClassFind( HB_COMP_PARAM, (yyvsp[-1].asVarType)->szFromClass );
                   if( ! HB_COMP_PARAM->pLastDeclared->pClass )
                   {
                     hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_CLASS_NOT_FOUND, (yyvsp[-1].asVarType)->szFromClass, HB_COMP_PARAM->pLastDeclared->szName );
                     HB_COMP_PARAM->pLastDeclared->cType = ( HB_ISUPPER( ( HB_UCHAR ) (yyvsp[-1].asVarType)->cVarType ) ? 'O' : 'o' );
                   }
                 }
               }
               HB_COMP_PARAM->szDeclaredFun = NULL;
               HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE;
             }
#line 5733 "harboury.c" /* yacc.c:1646  */
    break;

  case 425:
#line 1243 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->pLastClass = hb_compClassAdd( HB_COMP_PARAM, (yyvsp[0].string), NULL ); }
#line 5739 "harboury.c" /* yacc.c:1646  */
    break;

  case 426:
#line 1243 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; }
#line 5745 "harboury.c" /* yacc.c:1646  */
    break;

  case 427:
#line 1244 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->pLastClass = hb_compClassAdd( HB_COMP_PARAM, (yyvsp[-1].string), NULL ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; }
#line 5751 "harboury.c" /* yacc.c:1646  */
    break;

  case 428:
#line 1245 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->pLastClass = hb_compClassAdd( HB_COMP_PARAM, (yyvsp[-2].string), (yyvsp[-1].string) ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; }
#line 5757 "harboury.c" /* yacc.c:1646  */
    break;

  case 429:
#line 1246 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; }
#line 5763 "harboury.c" /* yacc.c:1646  */
    break;

  case 430:
#line 1247 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->cDataListType = (yyvsp[0].asVarType)->cVarType; }
#line 5769 "harboury.c" /* yacc.c:1646  */
    break;

  case 431:
#line 1247 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->cDataListType = 0; HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; }
#line 5775 "harboury.c" /* yacc.c:1646  */
    break;

  case 438:
#line 1260 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->pLastMethod = hb_compMethodAdd( HB_COMP_PARAM, HB_COMP_PARAM->pLastClass, (yyvsp[-1].string) ); }
#line 5781 "harboury.c" /* yacc.c:1646  */
    break;

  case 439:
#line 1261 "harbour.y" /* yacc.c:1646  */
    {
               if( HB_COMP_PARAM->pLastMethod )
               {
                 HB_COMP_PARAM->pLastMethod->cType = (yyvsp[0].asVarType)->cVarType;
                 if( HB_TOUPPER( (yyvsp[0].asVarType)->cVarType ) == 'S' )
                 {
                   HB_COMP_PARAM->pLastMethod->pClass = hb_compClassFind( HB_COMP_PARAM, (yyvsp[0].asVarType)->szFromClass );
                   if( ! HB_COMP_PARAM->pLastMethod->pClass )
                   {
                     hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_CLASS_NOT_FOUND, (yyvsp[0].asVarType)->szFromClass, HB_COMP_PARAM->pLastMethod->szName );
                     HB_COMP_PARAM->pLastMethod->cType = ( HB_ISUPPER( ( HB_UCHAR ) (yyvsp[0].asVarType)->cVarType ) ? 'O' : 'o' );
                   }
                 }
               }
               HB_COMP_PARAM->pLastMethod = NULL;
             }
#line 5802 "harboury.c" /* yacc.c:1646  */
    break;

  case 440:
#line 1279 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->pLastMethod = hb_compMethodAdd( HB_COMP_PARAM, HB_COMP_PARAM->pLastClass, (yyvsp[0].string) ); }
#line 5808 "harboury.c" /* yacc.c:1646  */
    break;

  case 441:
#line 1280 "harbour.y" /* yacc.c:1646  */
    {
               if( HB_COMP_PARAM->pLastMethod )
               {
                  PHB_HCLASS pClass;
                  char       szSetData[ HB_SYMBOL_NAME_LEN + 1 ];
                  int        iLen;
                  HB_BYTE    cVarType = (yyvsp[0].asVarType)->cVarType;

                  /* List Type overrides if exists. */
                  if( HB_COMP_PARAM->cDataListType )
                     cVarType = HB_COMP_PARAM->cDataListType;

                  HB_COMP_PARAM->pLastMethod->cType = cVarType;
                  if( HB_TOUPPER( cVarType ) == 'S' )
                  {
                     pClass = hb_compClassFind( HB_COMP_PARAM, (yyvsp[0].asVarType)->szFromClass );
                     HB_COMP_PARAM->pLastMethod->pClass = pClass;
                     if( ! HB_COMP_PARAM->pLastMethod->pClass )
                     {
                        hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_CLASS_NOT_FOUND, (yyvsp[0].asVarType)->szFromClass, HB_COMP_PARAM->pLastMethod->szName );
                        HB_COMP_PARAM->pLastMethod->cType = ( HB_ISUPPER( ( HB_UCHAR ) cVarType ) ? 'O' :'o' );
                     }
                  }
                  else
                     pClass = NULL;

                  iLen = ( int ) strlen( (yyvsp[-2].string) );
                  if( iLen >= HB_SYMBOL_NAME_LEN )
                     iLen = HB_SYMBOL_NAME_LEN - 1;
                  szSetData[ 0 ] = '_';
                  memcpy( szSetData + 1, (yyvsp[-2].string), iLen );
                  szSetData[ iLen + 1 ] = '\0';

                  HB_COMP_PARAM->pLastMethod = hb_compMethodAdd( HB_COMP_PARAM, HB_COMP_PARAM->pLastClass,
                     hb_compIdentifierNew( HB_COMP_PARAM, szSetData, HB_IDENT_COPY ) );
                  HB_COMP_PARAM->pLastMethod->cType = cVarType;
                  HB_COMP_PARAM->pLastMethod->iParamCount = 1;

                  HB_COMP_PARAM->pLastMethod->cParamTypes = ( HB_BYTE * ) hb_xgrab( 1 );
                  HB_COMP_PARAM->pLastMethod->pParamClasses = ( PHB_HCLASS * ) hb_xgrab( sizeof( HB_HCLASS ) );

                  HB_COMP_PARAM->pLastMethod->cParamTypes[ 0 ] = cVarType;
                  HB_COMP_PARAM->pLastMethod->pParamClasses[ 0 ] = pClass;

                  if( HB_TOUPPER( cVarType ) == 'S' )
                  {
                     HB_COMP_PARAM->pLastMethod->pClass = pClass;
                  }
               }

               HB_COMP_PARAM->pLastMethod = NULL;
             }
#line 5865 "harboury.c" /* yacc.c:1646  */
    break;

  case 455:
#line 1353 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); }
#line 5871 "harboury.c" /* yacc.c:1646  */
    break;

  case 456:
#line 1356 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); }
#line 5877 "harboury.c" /* yacc.c:1646  */
    break;

  case 457:
#line 1357 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-1].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[0].asVarType)->cVarType + HB_VT_OFFSET_BYREF, NULL ) ); }
#line 5883 "harboury.c" /* yacc.c:1646  */
    break;

  case 458:
#line 1358 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-3].string), hb_compVarTypeNew( HB_COMP_PARAM, 'F', NULL ) ); }
#line 5889 "harboury.c" /* yacc.c:1646  */
    break;

  case 459:
#line 1359 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); }
#line 5895 "harboury.c" /* yacc.c:1646  */
    break;

  case 460:
#line 1360 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-1].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[0].asVarType)->cVarType + HB_VT_OFFSET_BYREF, NULL ) ); }
#line 5901 "harboury.c" /* yacc.c:1646  */
    break;

  case 461:
#line 1361 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-3].string), hb_compVarTypeNew( HB_COMP_PARAM, 'F', NULL ) ); }
#line 5907 "harboury.c" /* yacc.c:1646  */
    break;

  case 462:
#line 1364 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-1].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[0].asVarType)->cVarType + HB_VT_OFFSET_OPTIONAL, NULL ) ); }
#line 5913 "harboury.c" /* yacc.c:1646  */
    break;

  case 463:
#line 1365 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-1].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[0].asVarType)->cVarType + HB_VT_OFFSET_OPTIONAL + HB_VT_OFFSET_BYREF, NULL ) ); }
#line 5919 "harboury.c" /* yacc.c:1646  */
    break;

  case 464:
#line 1366 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-3].string), hb_compVarTypeNew( HB_COMP_PARAM, 'F' + HB_VT_OFFSET_OPTIONAL + HB_VT_OFFSET_BYREF, NULL ) ); }
#line 5925 "harboury.c" /* yacc.c:1646  */
    break;

  case 465:
#line 1367 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-1].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[0].asVarType)->cVarType + HB_VT_OFFSET_OPTIONAL, NULL ) ); }
#line 5931 "harboury.c" /* yacc.c:1646  */
    break;

  case 466:
#line 1368 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-1].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[0].asVarType)->cVarType + HB_VT_OFFSET_OPTIONAL + HB_VT_OFFSET_BYREF, NULL ) ); }
#line 5937 "harboury.c" /* yacc.c:1646  */
    break;

  case 467:
#line 1369 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-3].string), hb_compVarTypeNew( HB_COMP_PARAM, 'F' + HB_VT_OFFSET_OPTIONAL + HB_VT_OFFSET_BYREF, NULL ) ); }
#line 5943 "harboury.c" /* yacc.c:1646  */
    break;

  case 476:
#line 1382 "harbour.y" /* yacc.c:1646  */
    { hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_NEXTFOR ); }
#line 5949 "harboury.c" /* yacc.c:1646  */
    break;

  case 477:
#line 1385 "harbour.y" /* yacc.c:1646  */
    { hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDCASE ); }
#line 5955 "harboury.c" /* yacc.c:1646  */
    break;

  case 478:
#line 1388 "harbour.y" /* yacc.c:1646  */
    { hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDIF ); }
#line 5961 "harboury.c" /* yacc.c:1646  */
    break;

  case 479:
#line 1391 "harbour.y" /* yacc.c:1646  */
    { hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDWITH ); }
#line 5967 "harboury.c" /* yacc.c:1646  */
    break;

  case 480:
#line 1394 "harbour.y" /* yacc.c:1646  */
    { hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDSEQ ); }
#line 5973 "harboury.c" /* yacc.c:1646  */
    break;

  case 481:
#line 1397 "harbour.y" /* yacc.c:1646  */
    { hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDDO ); }
#line 5979 "harboury.c" /* yacc.c:1646  */
    break;

  case 482:
#line 1400 "harbour.y" /* yacc.c:1646  */
    { hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDSWITCH ); }
#line 5985 "harboury.c" /* yacc.c:1646  */
    break;

  case 483:
#line 1403 "harbour.y" /* yacc.c:1646  */
    { hb_compGenJumpHere( (yyvsp[-1].sNumber), HB_COMP_PARAM ); }
#line 5991 "harboury.c" /* yacc.c:1646  */
    break;

  case 484:
#line 1404 "harbour.y" /* yacc.c:1646  */
    { hb_compGenJumpHere( (yyvsp[-2].sNumber), HB_COMP_PARAM ); }
#line 5997 "harboury.c" /* yacc.c:1646  */
    break;

  case 485:
#line 1405 "harbour.y" /* yacc.c:1646  */
    { hb_compGenJumpHere( (yyvsp[-2].sNumber), HB_COMP_PARAM ); hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[-1].pVoid) ); }
#line 6003 "harboury.c" /* yacc.c:1646  */
    break;

  case 486:
#line 1406 "harbour.y" /* yacc.c:1646  */
    { hb_compGenJumpHere( (yyvsp[-3].sNumber), HB_COMP_PARAM ); hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[-2].pVoid) ); }
#line 6009 "harboury.c" /* yacc.c:1646  */
    break;

  case 487:
#line 1410 "harbour.y" /* yacc.c:1646  */
    { ++HB_COMP_PARAM->functions.pLast->wIfCounter; hb_compLinePushIfInside( HB_COMP_PARAM ); }
#line 6015 "harboury.c" /* yacc.c:1646  */
    break;

  case 488:
#line 1412 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[-2].asExpr), HB_COMP_PARAM ) ); (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM ); }
#line 6021 "harboury.c" /* yacc.c:1646  */
    break;

  case 489:
#line 1414 "harbour.y" /* yacc.c:1646  */
    { (yyval.sNumber) = hb_compGenJump( 0, HB_COMP_PARAM ); hb_compGenJumpHere( (yyvsp[-1].sNumber), HB_COMP_PARAM ); }
#line 6027 "harboury.c" /* yacc.c:1646  */
    break;

  case 490:
#line 1417 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; }
#line 6033 "harboury.c" /* yacc.c:1646  */
    break;

  case 492:
#line 1421 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; hb_compLinePush( HB_COMP_PARAM ); }
#line 6039 "harboury.c" /* yacc.c:1646  */
    break;

  case 493:
#line 1423 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[-1].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               }
#line 6047 "harboury.c" /* yacc.c:1646  */
    break;

  case 494:
#line 1427 "harbour.y" /* yacc.c:1646  */
    { (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, NULL, hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[-1].sNumber), HB_COMP_PARAM );
               }
#line 6055 "harboury.c" /* yacc.c:1646  */
    break;

  case 495:
#line 1431 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; hb_compLinePush( HB_COMP_PARAM ); }
#line 6061 "harboury.c" /* yacc.c:1646  */
    break;

  case 496:
#line 1433 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[-1].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               }
#line 6069 "harboury.c" /* yacc.c:1646  */
    break;

  case 497:
#line 1437 "harbour.y" /* yacc.c:1646  */
    { (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, (yyvsp[-6].pVoid), hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[-1].sNumber), HB_COMP_PARAM );
               }
#line 6077 "harboury.c" /* yacc.c:1646  */
    break;

  case 498:
#line 1443 "harbour.y" /* yacc.c:1646  */
    {
                  if( HB_COMP_PARAM->functions.pLast->wIfCounter )
                     --HB_COMP_PARAM->functions.pLast->wIfCounter;
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
               }
#line 6087 "harboury.c" /* yacc.c:1646  */
    break;

  case 507:
#line 1462 "harbour.y" /* yacc.c:1646  */
    { hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[-1].pVoid) ); }
#line 6093 "harboury.c" /* yacc.c:1646  */
    break;

  case 510:
#line 1474 "harbour.y" /* yacc.c:1646  */
    { hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[-2].pVoid) ); }
#line 6099 "harboury.c" /* yacc.c:1646  */
    break;

  case 511:
#line 1478 "harbour.y" /* yacc.c:1646  */
    {  if( HB_COMP_PARAM->functions.pLast->wCaseCounter )
                     --HB_COMP_PARAM->functions.pLast->wCaseCounter;
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
               }
#line 6108 "harboury.c" /* yacc.c:1646  */
    break;

  case 520:
#line 1494 "harbour.y" /* yacc.c:1646  */
    { ++HB_COMP_PARAM->functions.pLast->wCaseCounter; hb_compLinePushIfDebugger( HB_COMP_PARAM );}
#line 6114 "harboury.c" /* yacc.c:1646  */
    break;

  case 523:
#line 1498 "harbour.y" /* yacc.c:1646  */
    {
                        if( (yyvsp[0].lNumber) > 0 )
                        {
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL );
                        }
                     }
#line 6125 "harboury.c" /* yacc.c:1646  */
    break;

  case 524:
#line 1506 "harbour.y" /* yacc.c:1646  */
    { hb_compLinePushIfInside( HB_COMP_PARAM ); }
#line 6131 "harboury.c" /* yacc.c:1646  */
    break;

  case 525:
#line 1507 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[-1].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               }
#line 6140 "harboury.c" /* yacc.c:1646  */
    break;

  case 526:
#line 1512 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE;
                  (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, NULL, hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[-1].sNumber), HB_COMP_PARAM );
               }
#line 6150 "harboury.c" /* yacc.c:1646  */
    break;

  case 527:
#line 1518 "harbour.y" /* yacc.c:1646  */
    { hb_compLinePushIfInside( HB_COMP_PARAM ); }
#line 6156 "harboury.c" /* yacc.c:1646  */
    break;

  case 528:
#line 1519 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[-1].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               }
#line 6165 "harboury.c" /* yacc.c:1646  */
    break;

  case 529:
#line 1524 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE;
                  (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, (yyvsp[-6].pVoid), hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[-1].sNumber), HB_COMP_PARAM );
               }
#line 6175 "harboury.c" /* yacc.c:1646  */
    break;

  case 530:
#line 1531 "harbour.y" /* yacc.c:1646  */
    {hb_compLinePushIfDebugger( HB_COMP_PARAM ); }
#line 6181 "harboury.c" /* yacc.c:1646  */
    break;

  case 531:
#line 1531 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; }
#line 6187 "harboury.c" /* yacc.c:1646  */
    break;

  case 533:
#line 1533 "harbour.y" /* yacc.c:1646  */
    { hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL ); }
#line 6193 "harboury.c" /* yacc.c:1646  */
    break;

  case 535:
#line 1538 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[-1].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               }
#line 6202 "harboury.c" /* yacc.c:1646  */
    break;

  case 536:
#line 1543 "harbour.y" /* yacc.c:1646  */
    {
                  hb_compLoopHere( HB_COMP_PARAM );
                  hb_compGenJump( (yyvsp[-4].sNumber) - HB_COMP_PARAM->functions.pLast->nPCodePos, HB_COMP_PARAM );
               }
#line 6211 "harboury.c" /* yacc.c:1646  */
    break;

  case 537:
#line 1548 "harbour.y" /* yacc.c:1646  */
    {
                  hb_compGenJumpHere( (yyvsp[-3].sNumber), HB_COMP_PARAM );
                  if( HB_COMP_PARAM->functions.pLast->wWhileCounter )
                     --HB_COMP_PARAM->functions.pLast->wWhileCounter;
                  hb_compLoopEnd( HB_COMP_PARAM );
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN;
               }
#line 6223 "harboury.c" /* yacc.c:1646  */
    break;

  case 538:
#line 1558 "harbour.y" /* yacc.c:1646  */
    {
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  ++HB_COMP_PARAM->functions.pLast->wWhileCounter;
                  hb_compLoopStart( HB_COMP_PARAM, HB_TRUE );
               }
#line 6234 "harboury.c" /* yacc.c:1646  */
    break;

  case 539:
#line 1567 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; }
#line 6240 "harboury.c" /* yacc.c:1646  */
    break;

  case 548:
#line 1581 "harbour.y" /* yacc.c:1646  */
    {                                      /* 5 */
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  (yyvsp[-3].iNumber) = HB_COMP_PARAM->currLine;
                  hb_compDebugStart();
                  ++HB_COMP_PARAM->functions.pLast->wForCounter;
                  (yyvsp[-2].asExpr) = hb_compExprReduce( (yyvsp[-2].asExpr), HB_COMP_PARAM );
                  (yyval.asExpr) = hb_compExprGenPush( hb_compExprAssign( (yyvsp[-2].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                  if( hb_compExprAsSymbol( (yyvsp[-2].asExpr) ) )
                  {
                     hb_compForStart( HB_COMP_PARAM, hb_compExprAsSymbol( (yyvsp[-2].asExpr) ), 0 );
                  }
               }
#line 6257 "harboury.c" /* yacc.c:1646  */
    break;

  case 549:
#line 1594 "harbour.y" /* yacc.c:1646  */
    {                                      /* 9 */
                  hb_compLoopStart( HB_COMP_PARAM, HB_TRUE );
                  (yyval.sNumber) = hb_compGenJump( 0, HB_COMP_PARAM );
               }
#line 6266 "harboury.c" /* yacc.c:1646  */
    break;

  case 550:
#line 1599 "harbour.y" /* yacc.c:1646  */
    {                                      /* 11 */
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
               }
#line 6274 "harboury.c" /* yacc.c:1646  */
    break;

  case 551:
#line 1603 "harbour.y" /* yacc.c:1646  */
    {
                  int iSign, iLine;

                  hb_compLoopHere( HB_COMP_PARAM );

                  iLine = HB_COMP_PARAM->currLine;
                  HB_COMP_PARAM->currLine = (yyvsp[-11].iNumber);
                  hb_compLinePush( HB_COMP_PARAM );
                  HB_COMP_PARAM->currLine = iLine;

                  if( (yyvsp[-4].asExpr) )
                  {
                     (yyvsp[-4].asExpr) = hb_compExprReduce( (yyvsp[-4].asExpr), HB_COMP_PARAM );
                     iSign = hb_compExprAsNumSign( (yyvsp[-4].asExpr) );
                     HB_COMP_EXPR_CLEAR( hb_compExprGenPush( hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[-10].asExpr), HB_COMP_PARAM ), (yyvsp[-4].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ) );
                  }
                  else
                  {
                     iSign = 1;
                     HB_COMP_EXPR_CLEAR( hb_compExprGenPush( hb_compExprNewPreInc( (yyvsp[-10].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ) );
                  }
                  hb_compGenJumpHere( (yyvsp[-3].sNumber), HB_COMP_PARAM );
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[-5].asExpr), HB_COMP_PARAM ) );   /* end */
                  if( iSign )
                  {
                     hb_compGenPCode1( ( HB_BYTE ) ( iSign > 0 ? HB_P_GREATER : HB_P_LESS ), HB_COMP_PARAM );
                     if( (yyvsp[-4].asExpr) )
                        HB_COMP_EXPR_FREE( (yyvsp[-4].asExpr) );
                  }
                  else
                  {
                     HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[-4].asExpr), HB_COMP_PARAM ) );   /* step */
                     hb_compGenPCode1( HB_P_FORTEST, HB_COMP_PARAM );
                  }

                  hb_compGenJumpFalse( (yyvsp[-1].sNumber) - HB_COMP_PARAM->functions.pLast->nPCodePos, HB_COMP_PARAM );
                  hb_compLoopEnd( HB_COMP_PARAM );
                  if( hb_compExprAsSymbol( (yyvsp[-10].asExpr) ) )
                     hb_compForEnd( HB_COMP_PARAM, hb_compExprAsSymbol( (yyvsp[-10].asExpr) ) );
                  HB_COMP_EXPR_FREE( (yyvsp[-7].asExpr) );  /* deletes $5, $2, $4 */
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
               }
#line 6321 "harboury.c" /* yacc.c:1646  */
    break;

  case 554:
#line 1651 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = NULL; }
#line 6327 "harboury.c" /* yacc.c:1646  */
    break;

  case 555:
#line 1652 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprReduce( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 6333 "harboury.c" /* yacc.c:1646  */
    break;

  case 556:
#line 1656 "harbour.y" /* yacc.c:1646  */
    {
                     hb_compLinePush( HB_COMP_PARAM );
                     if( HB_COMP_PARAM->functions.pLast->wForCounter )
                        --HB_COMP_PARAM->functions.pLast->wForCounter;
                  }
#line 6343 "harboury.c" /* yacc.c:1646  */
    break;

  case 566:
#line 1674 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[0].string), HB_COMP_PARAM ); }
#line 6349 "harboury.c" /* yacc.c:1646  */
    break;

  case 567:
#line 1675 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewRef( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 6355 "harboury.c" /* yacc.c:1646  */
    break;

  case 568:
#line 1678 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 6361 "harboury.c" /* yacc.c:1646  */
    break;

  case 569:
#line 1679 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[-2].asExpr), (yyvsp[0].asExpr) ); }
#line 6367 "harboury.c" /* yacc.c:1646  */
    break;

  case 570:
#line 1682 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[0].string), HB_COMP_PARAM ); }
#line 6373 "harboury.c" /* yacc.c:1646  */
    break;

  case 572:
#line 1686 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 6379 "harboury.c" /* yacc.c:1646  */
    break;

  case 573:
#line 1687 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[-2].asExpr), (yyvsp[0].asExpr) ); }
#line 6385 "harboury.c" /* yacc.c:1646  */
    break;

  case 574:
#line 1692 "harbour.y" /* yacc.c:1646  */
    {
                ++HB_COMP_PARAM->functions.pLast->wForCounter;    /* 5 */
                hb_compLinePushIfInside( HB_COMP_PARAM );
                hb_compDebugStart();
             }
#line 6395 "harboury.c" /* yacc.c:1646  */
    break;

  case 575:
#line 1698 "harbour.y" /* yacc.c:1646  */
    {
                /* 7 */
                (yyvsp[-4].asExpr) = hb_compExprReduce( (yyvsp[-4].asExpr), HB_COMP_PARAM );
                (yyvsp[-2].asExpr) = hb_compExprReduce( (yyvsp[-2].asExpr), HB_COMP_PARAM );
                hb_compEnumStart( HB_COMP_PARAM, (yyvsp[-4].asExpr), (yyvsp[-2].asExpr), (yyvsp[0].iNumber) );

                hb_compLoopStart( HB_COMP_PARAM, HB_TRUE );
                (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
             }
#line 6409 "harboury.c" /* yacc.c:1646  */
    break;

  case 576:
#line 1708 "harbour.y" /* yacc.c:1646  */
    {
                /* 9 */
                (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
             }
#line 6418 "harboury.c" /* yacc.c:1646  */
    break;

  case 577:
#line 1713 "harbour.y" /* yacc.c:1646  */
    {
                hb_compLoopHere( HB_COMP_PARAM );
                hb_compEnumNext( HB_COMP_PARAM, (yyvsp[-8].asExpr), (yyvsp[-4].iNumber) );
                hb_compGenJump( (yyvsp[-3].sNumber) - HB_COMP_PARAM->functions.pLast->nPCodePos, HB_COMP_PARAM );

                hb_compGenJumpHere( (yyvsp[-1].sNumber), HB_COMP_PARAM );
                hb_compLoopEnd( HB_COMP_PARAM );
                HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
                hb_compEnumEnd( HB_COMP_PARAM, (yyvsp[-8].asExpr) );
                HB_COMP_EXPR_FREE( (yyvsp[-8].asExpr) );
                HB_COMP_EXPR_FREE( (yyvsp[-6].asExpr) );
             }
#line 6435 "harboury.c" /* yacc.c:1646  */
    break;

  case 578:
#line 1727 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber) =  1; }
#line 6441 "harboury.c" /* yacc.c:1646  */
    break;

  case 579:
#line 1728 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber) = -1; }
#line 6447 "harboury.c" /* yacc.c:1646  */
    break;

  case 580:
#line 1732 "harbour.y" /* yacc.c:1646  */
    {
                  hb_compLoopStart( HB_COMP_PARAM, HB_FALSE );
                  hb_compSwitchStart( HB_COMP_PARAM, (yyvsp[0].asExpr) );
                  hb_compGenJump( 0, HB_COMP_PARAM );
               }
#line 6457 "harboury.c" /* yacc.c:1646  */
    break;

  case 581:
#line 1739 "harbour.y" /* yacc.c:1646  */
    {
                  hb_compSwitchEnd( HB_COMP_PARAM );
                  hb_compLoopEnd( HB_COMP_PARAM );
               }
#line 6466 "harboury.c" /* yacc.c:1646  */
    break;

  case 582:
#line 1746 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) );
               }
#line 6474 "harboury.c" /* yacc.c:1646  */
    break;

  case 583:
#line 1752 "harbour.y" /* yacc.c:1646  */
    {
                  if( HB_COMP_PARAM->functions.pLast->wSwitchCounter )
                     --HB_COMP_PARAM->functions.pLast->wSwitchCounter;
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
               }
#line 6484 "harboury.c" /* yacc.c:1646  */
    break;

  case 592:
#line 1770 "harbour.y" /* yacc.c:1646  */
    {
                  ++HB_COMP_PARAM->functions.pLast->wSwitchCounter;
                  hb_compLinePushIfInside( HB_COMP_PARAM );
               }
#line 6493 "harboury.c" /* yacc.c:1646  */
    break;

  case 593:
#line 1775 "harbour.y" /* yacc.c:1646  */
    {
                  (yyval.asExpr) = hb_compExprReduce( (yyvsp[-1].asExpr), HB_COMP_PARAM );
               }
#line 6501 "harboury.c" /* yacc.c:1646  */
    break;

  case 595:
#line 1782 "harbour.y" /* yacc.c:1646  */
    {
                  if( (yyvsp[0].lNumber) > 0 )
                  {
                     hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL );
                  }
               }
#line 6512 "harboury.c" /* yacc.c:1646  */
    break;

  case 596:
#line 1790 "harbour.y" /* yacc.c:1646  */
    { hb_compSwitchAdd( HB_COMP_PARAM, (yyvsp[0].asExpr) ); hb_compLinePush( HB_COMP_PARAM ); }
#line 6518 "harboury.c" /* yacc.c:1646  */
    break;

  case 598:
#line 1793 "harbour.y" /* yacc.c:1646  */
    { hb_compSwitchAdd( HB_COMP_PARAM, (yyvsp[0].asExpr) ); hb_compLinePush( HB_COMP_PARAM ); }
#line 6524 "harboury.c" /* yacc.c:1646  */
    break;

  case 602:
#line 1801 "harbour.y" /* yacc.c:1646  */
    { hb_compSwitchAdd( HB_COMP_PARAM, NULL ); hb_compLinePush( HB_COMP_PARAM ); }
#line 6530 "harboury.c" /* yacc.c:1646  */
    break;

  case 603:
#line 1801 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; }
#line 6536 "harboury.c" /* yacc.c:1646  */
    break;

  case 605:
#line 1806 "harbour.y" /* yacc.c:1646  */
    {              /* 2 */
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  ++HB_COMP_PARAM->functions.pLast->wSeqCounter;
                  (yyval.sNumber) = hb_compSequenceBegin( HB_COMP_PARAM );
               }
#line 6546 "harboury.c" /* yacc.c:1646  */
    break;

  case 606:
#line 1814 "harbour.y" /* yacc.c:1646  */
    {              /* 6 */
                  /* Set jump address for HB_P_SEQBEGIN opcode - this address
                   * will be used in BREAK code if there is no RECOVER clause
                   */
                  if( (yyvsp[-2].sNumber) )
                     hb_compGenPCode1( HB_P_POP, HB_COMP_PARAM );
                  hb_compGenJumpHere( (yyvsp[-3].sNumber), HB_COMP_PARAM );
                  (yyval.sNumber) = hb_compSequenceEnd( HB_COMP_PARAM );
                  (yyvsp[-1].lNumber) = hb_compLoopCount( HB_COMP_PARAM );
               }
#line 6561 "harboury.c" /* yacc.c:1646  */
    break;

  case 607:
#line 1825 "harbour.y" /* yacc.c:1646  */
    {              /* 8 */
                  /* Replace END address with RECOVER address in
                   * HB_P_SEQBEGIN opcode if there is RECOVER clause
                   */
                  if( (yyvsp[0].sNumber) )
                     hb_compGenJumpThere( (yyvsp[-5].sNumber), (yyvsp[0].sNumber), HB_COMP_PARAM );
                  else if( HB_COMP_PARAM->functions.pLast->wSeqCounter )
                     --HB_COMP_PARAM->functions.pLast->wSeqCounter;
               }
#line 6575 "harboury.c" /* yacc.c:1646  */
    break;

  case 608:
#line 1835 "harbour.y" /* yacc.c:1646  */
    {              /* 10 */
                  long lLoopCount = hb_compLoopCount( HB_COMP_PARAM );
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
                  if( (yyvsp[0].sNumber) )
                  {
                     if( (yyvsp[-5].lNumber) != lLoopCount )
                     {
                        /* ALWAYS statement after RECOVER with EXIT/LOOP statments */
                        hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_ALWAYS_AFTER_EXIT, "EXIT/LOOP", NULL );
                     }
                     --HB_COMP_PARAM->functions.pLast->wAlwaysCounter;
                     /* replace END address with ALWAYS address in
                        HB_P_SEQEND opcode */
                     hb_compGenJumpThere( (yyvsp[-3].sNumber), (yyvsp[0].sNumber), HB_COMP_PARAM );
                     /* Fix ALWAYS address in HB_P_SEQALWAYS opcode */
                     hb_compGenJumpThere( (yyvsp[-7].sNumber) - 4, (yyvsp[0].sNumber), HB_COMP_PARAM );
                     /* Fix ALWAYSEND address in HB_P_ALWAYSBEGIN opcode */
                     hb_compGenJumpHere( (yyvsp[0].sNumber) + 1, HB_COMP_PARAM );
                     hb_compGenPCode1( HB_P_ALWAYSEND, HB_COMP_PARAM );
                  }
                  else
                  {
                     /* Fix END address in HB_P_SEQEND opcode */
                     hb_compGenJumpHere( (yyvsp[-3].sNumber), HB_COMP_PARAM );
                  }
                  hb_compSequenceFinish( HB_COMP_PARAM, (yyvsp[-7].sNumber), (yyvsp[-3].sNumber), (yyvsp[0].sNumber),
                                         (yyvsp[-4].lNumber) != 0, (yyvsp[-2].sNumber) != 0, (yyvsp[-5].lNumber) == lLoopCount );
               }
#line 6608 "harboury.c" /* yacc.c:1646  */
    break;

  case 618:
#line 1876 "harbour.y" /* yacc.c:1646  */
    { (yyval.sNumber) = 0; }
#line 6614 "harboury.c" /* yacc.c:1646  */
    break;

  case 619:
#line 1878 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[0].asExpr), HB_COMP_PARAM ) );
                  hb_compGenPCode1( HB_P_SEQBLOCK, HB_COMP_PARAM );
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
               }
#line 6624 "harboury.c" /* yacc.c:1646  */
    break;

  case 620:
#line 1885 "harbour.y" /* yacc.c:1646  */
    { (yyval.sNumber) = 0; }
#line 6630 "harboury.c" /* yacc.c:1646  */
    break;

  case 622:
#line 1890 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
                  ++HB_COMP_PARAM->functions.pLast->wAlwaysCounter;
                  hb_compSequenceAlways( HB_COMP_PARAM );
               }
#line 6641 "harboury.c" /* yacc.c:1646  */
    break;

  case 623:
#line 1898 "harbour.y" /* yacc.c:1646  */
    { (yyval.sNumber) = 0; HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; }
#line 6647 "harboury.c" /* yacc.c:1646  */
    break;

  case 626:
#line 1904 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE;
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
                  if( HB_COMP_PARAM->functions.pLast->wSeqCounter )
                     --HB_COMP_PARAM->functions.pLast->wSeqCounter;
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  hb_compGenPCode2( HB_P_SEQRECOVER, HB_P_POP, HB_COMP_PARAM );
               }
#line 6660 "harboury.c" /* yacc.c:1646  */
    break;

  case 627:
#line 1915 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE;
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
                  if( HB_COMP_PARAM->functions.pLast->wSeqCounter )
                     --HB_COMP_PARAM->functions.pLast->wSeqCounter;
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  hb_compGenPCode1( HB_P_SEQRECOVER, HB_COMP_PARAM );
                  hb_compGenPopVar( (yyvsp[0].string), HB_COMP_PARAM );
               }
#line 6674 "harboury.c" /* yacc.c:1646  */
    break;

  case 628:
#line 1933 "harbour.y" /* yacc.c:1646  */
    {
                  (yyval.asExpr) = hb_compExprNewFunCall( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM );
               }
#line 6682 "harboury.c" /* yacc.c:1646  */
    break;

  case 629:
#line 1937 "harbour.y" /* yacc.c:1646  */
    {
                  hb_compModuleAdd( HB_COMP_PARAM, (yyvsp[-1].string), HB_FALSE );
                  /* DOIDENT is the only one identifier which can be returned in lower letters */
                  (yyval.asExpr) = hb_compExprNewFunCall( hb_compExprNewFunName( hb_compIdentifierNew( HB_COMP_PARAM, hb_strupr( hb_strdup( (yyvsp[-1].string) ) ), HB_IDENT_FREE ), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM );
               }
#line 6692 "harboury.c" /* yacc.c:1646  */
    break;

  case 630:
#line 1944 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = NULL; }
#line 6698 "harboury.c" /* yacc.c:1646  */
    break;

  case 631:
#line 1945 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 6704 "harboury.c" /* yacc.c:1646  */
    break;

  case 632:
#line 1948 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprNewArgList( hb_compExprNewNil( HB_COMP_PARAM ), HB_COMP_PARAM ), hb_compExprNewNil( HB_COMP_PARAM ) ); }
#line 6710 "harboury.c" /* yacc.c:1646  */
    break;

  case 633:
#line 1949 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprNewArgList( hb_compExprNewNil( HB_COMP_PARAM ), HB_COMP_PARAM ), (yyvsp[0].asExpr) ); }
#line 6716 "harboury.c" /* yacc.c:1646  */
    break;

  case 634:
#line 1950 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 6722 "harboury.c" /* yacc.c:1646  */
    break;

  case 635:
#line 1951 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[-1].asExpr), hb_compExprNewNil( HB_COMP_PARAM ) ); }
#line 6728 "harboury.c" /* yacc.c:1646  */
    break;

  case 636:
#line 1952 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[-2].asExpr), (yyvsp[0].asExpr) ); }
#line 6734 "harboury.c" /* yacc.c:1646  */
    break;

  case 637:
#line 1955 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[0].string), HB_COMP_PARAM ); }
#line 6740 "harboury.c" /* yacc.c:1646  */
    break;

  case 642:
#line 1963 "harbour.y" /* yacc.c:1646  */
    {
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[-1].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
                  hb_compGenPCode1( HB_P_WITHOBJECTSTART, HB_COMP_PARAM );
                  HB_COMP_PARAM->functions.pLast->wWithObjectCnt++;
               }
#line 6752 "harboury.c" /* yacc.c:1646  */
    break;

  case 643:
#line 1972 "harbour.y" /* yacc.c:1646  */
    {  if( HB_COMP_PARAM->functions.pLast->wWithObjectCnt )
                    --HB_COMP_PARAM->functions.pLast->wWithObjectCnt;
                  if( (yyvsp[-1].lNumber) )
                     hb_compGenPCode1( HB_P_WITHOBJECTEND, HB_COMP_PARAM );
                  else
                  {
                     hb_compNOOPfill( HB_COMP_PARAM->functions.pLast,
                                      (yyvsp[-2].sNumber), 1, HB_FALSE, HB_TRUE );
                     hb_compGenPCode1( HB_P_POP, HB_COMP_PARAM );
                  }
               }
#line 6768 "harboury.c" /* yacc.c:1646  */
    break;

  case 652:
#line 1995 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->fError = HB_FALSE; }
#line 6774 "harboury.c" /* yacc.c:1646  */
    break;


#line 6778 "harboury.c" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (pComp, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (pComp, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, pComp);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, pComp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (pComp, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, pComp);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, pComp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 1999 "harbour.y" /* yacc.c:1906  */


/*
 ** ------------------------------------------------------------------------ **
 */

/*
 * Avoid tracing in preprocessor/compiler.
 */
#if ! defined( HB_TRACE_UTILS )
   #if defined( HB_TRACE_LEVEL )
      #undef HB_TRACE_LEVEL
   #endif
#endif


/* ************************************************************************* */

/*
 * This function stores the position in pcode buffer where the FOR/WHILE
 * loop starts. It will be used to fix any LOOP/EXIT statements
 */
static void hb_compLoopStart( HB_COMP_DECL, HB_BOOL fCanLoop )
{
   PHB_LOOPEXIT pLoop = ( PHB_LOOPEXIT ) hb_xgrab( sizeof( HB_LOOPEXIT ) );
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   if( pFunc->pLoops )
   {
      PHB_LOOPEXIT pLast = pFunc->pLoops;

      while( pLast->pNext )
         pLast = pLast->pNext;
      pLast->pNext = pLoop;
   }
   else
      pFunc->pLoops = pLoop;

   pLoop->nOffset          = pFunc->nPCodePos;  /* store the start position */
   pLoop->fCanLoop         = fCanLoop;    /* can we use LOOP inside */
   pLoop->wSeqCounter      = pFunc->wSeqCounter;      /* store current SEQUENCE counter */
   pLoop->wWithObjectCnt   = pFunc->wWithObjectCnt;   /* store current WITH OBJECT counter */
   pLoop->wAlwaysCounter   = pFunc->wAlwaysCounter;   /* store current ALWAYS counter */
   pLoop->pExitList        = NULL;
   pLoop->pLoopList        = NULL;
   pLoop->pNext            = NULL;
}

/*
 * return number of LOOP of EXIT statement in the top most structure
 */
static long hb_compLoopCount( HB_COMP_DECL )
{
   PHB_LOOPEXIT pLastLoop, pLastExit, pLoop;
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;
   long lCount = 0;

   pLastLoop = pLastExit = NULL;
   pLoop = pFunc->pLoops;
   while( pLoop )
   {
      if( pLoop->fCanLoop )
         pLastLoop = pLoop;
      pLastExit = pLoop;
      pLoop = pLoop->pNext;
   }

   if( pLastLoop )
   {
      while( pLastLoop->pLoopList )
      {
         ++lCount;
         pLastLoop = pLastLoop->pLoopList;
      }
   }
   if( pLastExit )
   {
      while( pLastExit->pExitList )
      {
         ++lCount;
         pLastExit = pLastExit->pExitList;
      }
   }

   return lCount;
}

/*
 * Stores the position of LOOP statement to fix it later at the end of loop
 */
static void hb_compLoopLoop( HB_COMP_DECL )
{
   PHB_LOOPEXIT pLast = NULL, pLoop;
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   pLoop = pFunc->pLoops;
   while( pLoop )
   {
      if( pLoop->fCanLoop )
         pLast = pLoop;
      pLoop = pLoop->pNext;
   }

   if( ! pLast )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNMATCHED_EXIT, "LOOP", NULL );
   }
   else
   {
      if( pLast->wSeqCounter != pFunc->wSeqCounter )
      {
         /* Attempt to LOOP from BEGIN/END sequence
          * Current SEQUENCE counter is different then at the beginning of loop
          * Notice that LOOP is allowed in RECOVER code when there is no
          * ALWAYS block
          */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "LOOP", NULL );
      }
      else if( pLast->wAlwaysCounter != pFunc->wAlwaysCounter )
      {
         /* Attempt to LOOP from ALWAYS block of BEGIN/END sequence
          */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "LOOP", NULL );
      }
      else
      {
         HB_USHORT wWithObjectCnt = pLast->wWithObjectCnt;

         pLoop = ( PHB_LOOPEXIT ) hb_xgrab( sizeof( HB_LOOPEXIT ) );
         pLoop->pLoopList = NULL;
         while( pLast->pLoopList )
            pLast = pLast->pLoopList;
         pLast->pLoopList = pLoop;

         while( wWithObjectCnt < pFunc->wWithObjectCnt )
         {
            hb_compGenPCode1( HB_P_WITHOBJECTEND, HB_COMP_PARAM );
            wWithObjectCnt++;
         }
         /* store the position to fix */
         pLoop->nOffset = pFunc->nPCodePos;
         hb_compGenJump( 0, HB_COMP_PARAM );
      }
   }
}

/*
 * Stores the position of EXIT statement to fix it later at the end of loop
 */
static void hb_compLoopExit( HB_COMP_DECL )
{
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   if( ! pFunc->pLoops )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNMATCHED_EXIT, "EXIT", NULL );
   }
   else
   {
      PHB_LOOPEXIT pLast, pLoop;

      pLast = pFunc->pLoops;
      while( pLast->pNext )
         pLast = pLast->pNext;

      if( pLast->wSeqCounter != pFunc->wSeqCounter )
      {
         /* Attempt to EXIT from BEGIN/END sequence
          * Current SEQUENCE counter is different then at the beginning of loop
          * Notice that EXIT is allowed in RECOVER code when there is no
          * ALWAYS block
          */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "EXIT", NULL );
      }
      else if( pLast->wAlwaysCounter != pFunc->wAlwaysCounter )
      {
         /* Attempt to EXIT from ALWAYS block of BEGIN/END sequence
          */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "EXIT", NULL );
      }
      else
      {
         HB_USHORT wWithObjectCnt = pLast->wWithObjectCnt;

         pLoop = ( PHB_LOOPEXIT ) hb_xgrab( sizeof( HB_LOOPEXIT ) );
         pLoop->pExitList = NULL;
         while( pLast->pExitList )
            pLast = pLast->pExitList;
         pLast->pExitList = pLoop;

         while( wWithObjectCnt < pFunc->wWithObjectCnt )
         {
            hb_compGenPCode1( HB_P_WITHOBJECTEND, HB_COMP_PARAM );
            wWithObjectCnt++;
         }
         /* store the position to fix */
         pLoop->nOffset = pFunc->nPCodePos;
         hb_compGenJump( 0, HB_COMP_PARAM );
      }
   }
}

/*
 * Fixes the LOOP statement
 */
static void hb_compLoopHere( HB_COMP_DECL )
{
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;
   PHB_LOOPEXIT pLoop = pFunc->pLoops, pFree, pLast;

   if( pLoop )
   {
      while( pLoop->pNext )
         pLoop = pLoop->pNext;

      pLast = pLoop;
      pLoop = pLoop->pLoopList;
      while( pLoop )
      {
         hb_compGenJumpHere( pLoop->nOffset + 1, HB_COMP_PARAM );
         pFree = pLoop;
         pLoop = pLoop->pLoopList;
         hb_xfree( pFree );
      }
      pLast->pLoopList = NULL;
   }
}

/*
 * Fixes the EXIT statements and releases memory allocated for current loop
 */
static void hb_compLoopEnd( HB_COMP_DECL )
{
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;
   PHB_LOOPEXIT pLoop = pFunc->pLoops, pLast = pFunc->pLoops, pExit, pFree;

   if( pLoop )
   {
      while( pLoop->pNext )
      {
         pLast = pLoop;
         pLoop = pLoop->pNext;
      }

      pExit = pLoop->pExitList;
      while( pExit )
      {
         hb_compGenJumpHere( pExit->nOffset + 1, HB_COMP_PARAM );
         pFree = pExit;
         pExit = pExit->pExitList;
         hb_xfree( pFree );
      }

      pLast->pNext = NULL;
      if( pLoop == pFunc->pLoops )
         pFunc->pLoops = NULL;
      hb_xfree( pLoop );
   }
}

void hb_compLoopKill( PHB_HFUNC pFunc )
{
   PHB_LOOPEXIT pLoop, pFree;

   while( pFunc->pLoops )
   {
      pLoop = pFunc->pLoops;
      while( pLoop->pExitList )
      {
         pFree = pLoop->pExitList;
         pLoop->pExitList = pFree->pExitList;
         hb_xfree( pFree );
      }
      while( pLoop->pLoopList )
      {
         pFree = pLoop->pLoopList;
         pLoop->pLoopList = pFree->pLoopList;
         hb_xfree( pFree );
      }
      pFunc->pLoops = pLoop->pNext;
      hb_xfree( pLoop );
   }
}

static void * hb_compElseIfGen( HB_COMP_DECL, void * pFirst, HB_SIZE nOffset )
{
   PHB_ELSEIF pElseIf = ( PHB_ELSEIF ) hb_xgrab( sizeof( HB_ELSEIF ) ), pLast;
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   pElseIf->nOffset = nOffset;
   pElseIf->pPrev   = NULL;
   pElseIf->pElseif = NULL;

   if( pFirst )
   {
      pLast = ( PHB_ELSEIF ) pFirst;
      while( pLast->pElseif )
         pLast = pLast->pElseif;
      pLast->pElseif = pElseIf;
   }
   else
   {
      if( pFunc->elseif )
      {
         pElseIf->pPrev = pFunc->elseif;
      }
      pFirst = pElseIf;
      pFunc->elseif = pElseIf;
   }
   return pFirst;
}


static void hb_compElseIfFix( HB_COMP_DECL, void * pFixElseIfs )
{
   PHB_ELSEIF pFix = ( PHB_ELSEIF ) pFixElseIfs;
   PHB_ELSEIF pDel;

   HB_COMP_PARAM->functions.pLast->elseif = pFix->pPrev;
   while( pFix )
   {
      hb_compGenJumpHere( pFix->nOffset, HB_COMP_PARAM );
      pDel = pFix;
      pFix = pFix->pElseif;
      hb_xfree( pDel );
   }
}

void hb_compElseIfKill( PHB_HFUNC pFunc )
{
   PHB_ELSEIF pFix;
   PHB_ELSEIF pDel;

   while( pFunc->elseif )
   {
      pFix = pFunc->elseif;
      pFunc->elseif = pFix->pPrev;
      while( pFix )
      {
         pDel = pFix;
         pFix = pFix->pElseif;
         hb_xfree( pDel );
      }
   }
}

static void hb_compRTVariableAdd( HB_COMP_DECL, PHB_EXPR pVar, HB_BOOL bPopInitValue )
{
   PHB_RTVAR pRTvar = ( PHB_RTVAR ) hb_xgrab( sizeof( HB_RTVAR ) );
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   pRTvar->pVar = pVar;
   pRTvar->bPopValue = bPopInitValue;
   pRTvar->pNext = NULL;
   pRTvar->pPrev = NULL;

   if( pFunc->rtvars )
   {
      PHB_RTVAR pLast = pFunc->rtvars;
      while( pLast->pNext )
         pLast = pLast->pNext;
      pLast->pNext = pRTvar;
      pRTvar->pPrev = pLast;
   }
   else
      pFunc->rtvars = pRTvar;
}

static void hb_compRTVariableGen( HB_COMP_DECL, const char * szCreateFun )
{
   HB_USHORT usCount = 0;
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;
   PHB_RTVAR pVar = pFunc->rtvars;
   PHB_RTVAR pDel;

   /* generate the function call frame */
   hb_compGenPushFunCall( szCreateFun, HB_FN_UDF, HB_COMP_PARAM );

   /* push variable names to create */
   while( pVar->pNext )
   {
      pVar->pVar = hb_compExprGenPush( pVar->pVar, HB_COMP_PARAM );
      pVar = pVar->pNext;
      ++usCount;
   }
   pVar->pVar = hb_compExprGenPush( pVar->pVar, HB_COMP_PARAM );
   ++usCount;

   /* call function that will create either PUBLIC or PRIVATE variables */
   if( usCount > 255 )
      hb_compGenPCode3( HB_P_DO, HB_LOBYTE( usCount ), HB_HIBYTE( usCount ), HB_COMP_PARAM );
   else
      hb_compGenPCode2( HB_P_DOSHORT, ( HB_BYTE ) usCount, HB_COMP_PARAM );

   /* pop initial values */
   while( pVar )
   {
      if( pVar->bPopValue )
         HB_COMP_EXPR_FREE( hb_compExprGenPop( pVar->pVar, HB_COMP_PARAM ) );
      else
         HB_COMP_EXPR_FREE( pVar->pVar );
      pDel = pVar;
      pVar = pVar->pPrev;
      hb_xfree( pDel );
   }
   pFunc->rtvars = NULL;
}

void hb_compRTVariableKill( HB_COMP_DECL, PHB_HFUNC pFunc )
{
   PHB_RTVAR pVar;

   while( pFunc->rtvars )
   {
      pVar = pFunc->rtvars;

      HB_COMP_EXPR_FREE( pVar->pVar );
      pFunc->rtvars = pVar->pPrev;
      hb_xfree( pVar );
   }
   pFunc->rtvars = NULL;
}

static PHB_EXPR hb_compArrayDimPush( PHB_EXPR pInitValue, HB_COMP_DECL )
{
   HB_USHORT uCount = ( HB_USHORT ) hb_compExprListLen( pInitValue );

   if( uCount == 1 && hb_compExprIsInteger( pInitValue->value.asList.pExprList ) &&
       hb_compExprAsInteger( pInitValue->value.asList.pExprList ) == 0 )
   {
      hb_compGenPCode3( HB_P_ARRAYGEN, 0, 0, HB_COMP_PARAM );
   }
   else
   {
      pInitValue = hb_compExprGenPush( pInitValue, HB_COMP_PARAM );
      hb_compGenPCode3( HB_P_ARRAYDIM, HB_LOBYTE( uCount ), HB_HIBYTE( uCount ), HB_COMP_PARAM );
   }
   return pInitValue;
}

static void hb_compVariableDim( const char * szName, PHB_EXPR pInitValue, HB_COMP_DECL )
{
   if( HB_COMP_PARAM->iVarScope == HB_VSCOMP_PUBLIC || HB_COMP_PARAM->iVarScope == HB_VSCOMP_PRIVATE )
   {
      hb_compVariableAdd( HB_COMP_PARAM, szName, hb_compVarTypeNew( HB_COMP_PARAM, 'A', NULL ) );
      HB_COMP_EXPR_FREE( hb_compArrayDimPush( pInitValue, HB_COMP_PARAM ) );
      hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( szName, NULL, HB_COMP_PARAM ), HB_TRUE );
   }
   else if( HB_COMP_PARAM->iVarScope & HB_VSCOMP_STATIC )
   {
      PHB_EXPR pVar = hb_compExprNewVar( szName, HB_COMP_PARAM );
      PHB_EXPR pAssign;

      /* create a static variable */
      hb_compVariableAdd( HB_COMP_PARAM, szName, hb_compVarTypeNew( HB_COMP_PARAM, 'A', NULL ) );

      hb_compStaticDefStart( HB_COMP_PARAM );   /* switch to statics pcode buffer */
      /* create an array */
      pInitValue = hb_compArrayDimPush( pInitValue, HB_COMP_PARAM );
      /* now pop an array */
      pVar = hb_compExprGenPop( pVar, HB_COMP_PARAM );
      /* check if valid initializers were used but don't generate any code */
      pAssign = hb_compExprAssignStatic( pVar, pInitValue, HB_COMP_PARAM );
      /* delete all used expressions */
      HB_COMP_EXPR_FREE( pAssign );
      hb_compStaticDefEnd( HB_COMP_PARAM, szName );
   }
   else
   {
      hb_compVariableAdd( HB_COMP_PARAM, szName, hb_compVarTypeNew( HB_COMP_PARAM, 'A', NULL ) );
      HB_COMP_EXPR_FREE( hb_compArrayDimPush( pInitValue, HB_COMP_PARAM ) );
      if( HB_COMP_PARAM->iVarScope != HB_VSCOMP_LOCAL ||
          !( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_EXTBLOCK ) )
      {
         HB_COMP_EXPR_FREE( hb_compExprGenPop( hb_compExprNewVar( szName, HB_COMP_PARAM ), HB_COMP_PARAM ) );
      }
   }
}

static void hb_compForStart( HB_COMP_DECL, const char *szVarName, int iForEachDir )
{
   PHB_ENUMERATOR pEnumVar;

   pEnumVar = HB_COMP_PARAM->functions.pLast->pEnum;
   if( pEnumVar == NULL )
   {
      HB_COMP_PARAM->functions.pLast->pEnum = ( PHB_ENUMERATOR ) hb_xgrab( sizeof( HB_ENUMERATOR ) );
      pEnumVar = HB_COMP_PARAM->functions.pLast->pEnum;
   }
   else
   {
      HB_BOOL bWarn = HB_TRUE;
      PHB_ENUMERATOR pLast = pEnumVar;

      while( pEnumVar )
      {
         if( strcmp( pEnumVar->szName, szVarName ) == 0 )
         {
            /* Enumerator variable exists already - throw warning */
            if( bWarn )
            {
               hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_FORVAR_DUPL, szVarName, NULL );
               bWarn = HB_FALSE;
            }
         }
         pLast = pEnumVar;
         pEnumVar = pEnumVar->pNext;
      }
      pLast->pNext = ( PHB_ENUMERATOR ) hb_xgrab( sizeof( HB_ENUMERATOR ) );
      pEnumVar = pLast->pNext;
   }
   pEnumVar->szName      = szVarName;
   pEnumVar->iForEachDir = iForEachDir;
   pEnumVar->pNext       = NULL;
}

static HB_BOOL hb_compForEachVarError( HB_COMP_DECL, const char *szVarName, int * piDir )
{
   PHB_ENUMERATOR pEnumVar;

   pEnumVar = HB_COMP_PARAM->functions.pLast->pEnum;
   if( pEnumVar && ! HB_COMP_PARAM->functions.pLast->bBlock )
   {
      while( pEnumVar )
      {
         if( strcmp( pEnumVar->szName, szVarName ) == 0 )
         {
            * piDir = pEnumVar->iForEachDir;
            if( * piDir != 0 )
            {
               /* only if it is FOR EACH enumerator
                * generate warning if it is FOR/NEXT loop
               */
               return HB_FALSE;
            }
         }
         pEnumVar = pEnumVar->pNext;
      }
   }

   hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_ENUM_INVALID, szVarName, NULL );
   return HB_TRUE;
}

static void hb_compForEnd( HB_COMP_DECL, const char *szVar )
{
   PHB_ENUMERATOR * pEnumVar;

   HB_SYMBOL_UNUSED( szVar );

   pEnumVar = &HB_COMP_PARAM->functions.pLast->pEnum;
   if( *pEnumVar )
   {
      while( ( *pEnumVar )->pNext )
         pEnumVar = &( *pEnumVar )->pNext;

      hb_xfree( *pEnumVar );
      *pEnumVar = NULL;
   }
}

static HB_COMP_CARGO2_FUNC( hb_compEnumEvalStart )
{
   const char * szName = hb_compExprAsSymbol( ( PHB_EXPR ) cargo );

   if( szName )
      hb_compForStart( HB_COMP_PARAM, szName, HB_COMP_PARAM->fDescend ? -1 : 1 );

   hb_compExprGenPush( ( PHB_EXPR ) dummy, HB_COMP_PARAM );  /* expression */
   hb_compExprGenPush( ( PHB_EXPR ) cargo, HB_COMP_PARAM );  /* variable */
}

static void hb_compEnumStart( HB_COMP_DECL, PHB_EXPR pVars, PHB_EXPR pExprs, int descend )
{
   HB_SIZE ulLen;

   if( hb_compExprListLen( pVars ) != hb_compExprListLen( pExprs ) )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_FORVAR_DIFF, NULL, NULL );
   }

   HB_COMP_PARAM->fDescend = descend < 0;
   ulLen = hb_compExprListEval2( HB_COMP_PARAM, pVars, pExprs, hb_compEnumEvalStart );

   if( ulLen > 255 )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_FORVAR_TOOMANY, NULL, NULL );
   }
   else
   {
      hb_compGenPCode3( HB_P_ENUMSTART, ( HB_BYTE ) ( ulLen & 0xFF ), ( HB_BYTE ) ( descend > 0 ? 1 : 0 ), HB_COMP_PARAM );
   }
}

static void hb_compEnumNext( HB_COMP_DECL, PHB_EXPR pExpr, int descend )
{
   HB_SYMBOL_UNUSED( pExpr );
   if( descend > 0 )
   {
      hb_compGenPCode1( HB_P_ENUMNEXT, HB_COMP_PARAM );
   }
   else
   {
      hb_compGenPCode1( HB_P_ENUMPREV, HB_COMP_PARAM );
   }
}

static HB_COMP_CARGO_FUNC( hb_compEnumEvalEnd )
{
   const char * szName = hb_compExprAsSymbol( ( PHB_EXPR ) cargo );

   if( szName )
      hb_compForEnd( HB_COMP_PARAM, szName );
}

static void hb_compEnumEnd( HB_COMP_DECL, PHB_EXPR pExpr )
{
   hb_compExprListEval( HB_COMP_PARAM, pExpr, hb_compEnumEvalEnd );
   hb_compGenPCode1( HB_P_ENUMEND, HB_COMP_PARAM );
}

static void hb_compSwitchStart( HB_COMP_DECL, PHB_EXPR pExpr )
{
   PHB_SWITCHCMD pSwitch = ( PHB_SWITCHCMD ) hb_xgrab( sizeof( HB_SWITCHCMD ) );
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   pSwitch->pCases = NULL;
   pSwitch->pLast  = NULL;
   pSwitch->nDefault = 0;
   pSwitch->nOffset = pFunc->nPCodePos;
   pSwitch->pExpr = pExpr;
   pSwitch->pPrev = pFunc->pSwitch;
   pFunc->pSwitch = pSwitch;
}

static void hb_compSwitchAdd( HB_COMP_DECL, PHB_EXPR pExpr )
{
   PHB_SWITCHCASE pCase;
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   pFunc->funFlags &= ~HB_FUNF_BREAK_CODE;

   if( pExpr )
   {
      /* normal CASE */
      pCase = ( PHB_SWITCHCASE ) hb_xgrab( sizeof( HB_SWITCHCASE ) );
      pCase->nOffset = pFunc->nPCodePos;
      pCase->pNext = NULL;
      pCase->pExpr = pExpr = hb_compExprReduce( pExpr, HB_COMP_PARAM );
      if( !( hb_compExprIsLong( pExpr ) || hb_compExprIsString( pExpr ) ) )
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_NOT_LITERAL_CASE, NULL, NULL );
      else if( pFunc->pSwitch->pCases )
      {
         PHB_SWITCHCASE pCases = pFunc->pSwitch->pCases;
         while( pCases )
         {
            HB_BOOL fEqual = HB_FALSE;

            if( hb_compExprIsLong( pExpr ) )
            {
               if( hb_compExprIsLong( pCases->pExpr ) )
                  fEqual = hb_compExprAsLongNum( pExpr ) == hb_compExprAsLongNum( pCases->pExpr );
            }
            else
            {
               if( hb_compExprIsString( pCases->pExpr ) )
                  fEqual = hb_compExprAsStringLen( pExpr ) == hb_compExprAsStringLen( pCases->pExpr ) &&
                           memcmp( hb_compExprAsString( pExpr ),
                                   hb_compExprAsString( pCases->pExpr ),
                                   hb_compExprAsStringLen( pExpr ) ) == 0;
            }
            if( fEqual )
               hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_DUPL_CASE, NULL, NULL );
            pCases = pCases->pNext;
         }
      }

      if( pFunc->pSwitch->pLast )
      {
         pFunc->pSwitch->pLast->pNext = pCase;
         pFunc->pSwitch->pLast = pCase;
      }
      else
      {
         pFunc->pSwitch->pCases = pFunc->pSwitch->pLast = pCase;
      }
      if( hb_compExprIsString( pExpr ) && hb_compExprAsStringLen( pExpr ) > 255 )
      {
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_INVALID_STR, NULL, NULL );
      }
   }
   else
   {
      /* DEFAULT */
      if( pFunc->pSwitch->nDefault )
      {
         /* more than one default clause */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL );
      }
      else
      {
         pFunc->pSwitch->nDefault = pFunc->nPCodePos;
      }
   }
}

static void hb_compSwitchEnd( HB_COMP_DECL )
{
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;
   PHB_SWITCHCMD pSwitch = pFunc->pSwitch;
   PHB_EXPR pExpr = pSwitch->pExpr;
   PHB_SWITCHCASE pCase, pTmp;
   HB_SIZE ulExitPos, ulCountPos;
   int iCount = 0;

   /* skip switch pcode if there was no EXIT in the last CASE
    * or in the DEFAULT case
   */
   ulExitPos = hb_compGenJump( 0, HB_COMP_PARAM );
   hb_compGenJumpHere( pSwitch->nOffset + 1, HB_COMP_PARAM );

   pCase = pSwitch->pCases;
   if( hb_compExprIsLong( pExpr ) || hb_compExprIsString( pExpr ) )
   {
      HB_BOOL fGen = HB_FALSE;
      while( pCase )
      {
         if( hb_compExprIsLong( pCase->pExpr ) )
         {
            fGen = hb_compExprIsLong( pExpr ) &&
                   hb_compExprAsLongNum( pExpr ) ==
                   hb_compExprAsLongNum( pCase->pExpr );
         }
         else if( hb_compExprIsString( pCase->pExpr ) )
         {
            fGen = hb_compExprIsString( pExpr ) &&
                   hb_compExprAsStringLen( pExpr ) ==
                   hb_compExprAsStringLen( pCase->pExpr ) &&
                   memcmp( hb_compExprAsString( pExpr ),
                           hb_compExprAsString( pCase->pExpr ),
                           hb_compExprAsStringLen( pExpr ) ) == 0;
         }
         if( fGen )
         {
            hb_compGenJumpThere( hb_compGenJump( 0, HB_COMP_PARAM ),
                                 pCase->nOffset, HB_COMP_PARAM );
            break;
         }
         pCase = pCase->pNext;
      }
      if( pSwitch->nDefault && ! fGen )
      {
         hb_compGenJumpThere( hb_compGenJump( 0, HB_COMP_PARAM ),
                              pSwitch->nDefault, HB_COMP_PARAM );
      }
   }
   else
   {
      HB_BOOL fSwitchCase = HB_COMP_PARAM->fSwitchCase;
      HB_BOOL fMacroText = ( HB_COMP_PARAM->supported & HB_COMPFLAG_MACROTEXT ) != 0;

      pExpr = hb_compExprGenPush( pExpr, HB_COMP_PARAM );
      ulCountPos = pFunc->nPCodePos + 1;
      hb_compGenPCode3( HB_P_SWITCH, 0, 0, HB_COMP_PARAM );
      HB_COMP_PARAM->fSwitchCase = HB_TRUE;
      HB_COMP_PARAM->supported &= ~HB_COMPFLAG_MACROTEXT;
      while( pCase )
      {
         if( hb_compExprIsLong( pCase->pExpr ) || hb_compExprIsString( pCase->pExpr ) )
         {
            iCount++;
            pCase->pExpr = hb_compExprGenPush( pCase->pExpr, HB_COMP_PARAM );
            hb_compGenJumpThere( hb_compGenJump( 0, HB_COMP_PARAM ),
                                 pCase->nOffset, HB_COMP_PARAM );
         }
         pCase = pCase->pNext;
      }
      if( pSwitch->nDefault )
      {
         iCount++;
         hb_compGenPCode1( HB_P_PUSHNIL, HB_COMP_PARAM );
         hb_compGenJumpThere( hb_compGenJump( 0, HB_COMP_PARAM ),
                              pSwitch->nDefault, HB_COMP_PARAM );
      }
      HB_PUT_LE_UINT16( pFunc->pCode + ulCountPos, iCount );

      HB_COMP_PARAM->fSwitchCase = fSwitchCase;
      if( fMacroText )
         HB_COMP_PARAM->supported |= HB_COMPFLAG_MACROTEXT;
   }

   hb_compGenJumpHere( ulExitPos, HB_COMP_PARAM );

   if( pExpr )
      HB_COMP_EXPR_FREE( pExpr );

   pCase = pSwitch->pCases;
   while( pCase )
   {
      HB_COMP_EXPR_FREE( pCase->pExpr );
      pTmp = pCase->pNext;
      hb_xfree( pCase );
      pCase = pTmp;
   }
   pFunc->pSwitch = pSwitch->pPrev;
   hb_xfree( pSwitch );
}

/* Release all switch statements
*/
void hb_compSwitchKill( HB_COMP_DECL, PHB_HFUNC pFunc )
{
   PHB_SWITCHCASE pCase;
   PHB_SWITCHCMD pSwitch;

   while( pFunc->pSwitch )
   {
      while( pFunc->pSwitch->pCases )
      {
         pCase = pFunc->pSwitch->pCases;
         HB_COMP_EXPR_FREE( pCase->pExpr );
         pFunc->pSwitch->pCases = pCase->pNext;
         hb_xfree( pCase );
      }
      pSwitch = pFunc->pSwitch;
      pFunc->pSwitch = pSwitch->pPrev;
      if( pSwitch->pExpr )
         HB_COMP_EXPR_FREE( pSwitch->pExpr );
      hb_xfree( pSwitch );
   }
}

static PHB_EXPR hb_compCheckPassByRef( HB_COMP_DECL, PHB_EXPR pExpr )
{
   if( pExpr->ExprType == HB_ET_FUNCALL )
   {
      if( hb_compExprParamListLen( pExpr->value.asFunCall.pParms ) == 0 )
      {
         PHB_EXPR pDelExpr = pExpr;
         if( pExpr->value.asFunCall.pFunName->ExprType == HB_ET_MACRO )
         {
            pExpr = pExpr->value.asFunCall.pFunName;
            HB_COMP_EXPR_CLEAR( pDelExpr );
         }
         else
         {
            pExpr = hb_compExprNewFunRef( hb_compExprAsSymbol( pExpr ), HB_COMP_PARAM );
            HB_COMP_EXPR_FREE( pDelExpr );
         }
         return pExpr;
      }
      else
      {
         const char * szDesc;

         szDesc = hb_compExprAsSymbol( pExpr );
         if( ! szDesc )
            szDesc = hb_compExprDescription( pExpr );

         return hb_compErrorRefer( HB_COMP_PARAM, pExpr, szDesc );
      }
   }

   return pExpr;
}

static PHB_EXPR hb_compCheckMethod( HB_COMP_DECL, PHB_EXPR pExpr )
{
   if( pExpr->value.asMessage.szMessage &&
       pExpr->value.asMessage.pObject &&
       pExpr->value.asMessage.pObject->ExprType == HB_ET_VARIABLE &&
       pExpr->value.asMessage.szMessage[ 0 ] == '_' &&
       strncmp( "__ENUM", pExpr->value.asMessage.szMessage, 6 ) == 0 )
   {
      const char * szMessage = pExpr->value.asMessage.szMessage + 6;

      if( strcmp( "INDEX",   szMessage ) == 0 ||
          strcmp( "KEY",     szMessage ) == 0 ||
          strcmp( "BASE",    szMessage ) == 0 ||
          strcmp( "VALUE",   szMessage ) == 0 ||
          strcmp( "ISFIRST", szMessage ) == 0 ||
          strcmp( "ISLAST",  szMessage ) == 0 )
      {
         int iDir = 0;
         if( ! hb_compForEachVarError( HB_COMP_PARAM, pExpr->value.asMessage.pObject->value.asSymbol.name, &iDir ) )
         {
            pExpr->value.asMessage.pObject->ExprType = HB_ET_VARREF;
#if 0
            if( iDir < 0 )
            {
               if( strcmp( "ISFIRST", szMessage ) == 0 )
                  pExpr->value.asMessage.szMessage = "__ENUMISLAST";
               else if( strcmp( "ISLAST",  szMessage ) == 0 )
                  pExpr->value.asMessage.szMessage = "__ENUMISFIRST";
            }
#endif
         }
      }
   }

   return pExpr;
}

static void hb_compErrStru( HB_COMP_DECL, int iError )
{
   hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', iError, NULL, NULL );
}

/* ************************************************************************* */

HB_BOOL hb_compCheckUnclosedStru( HB_COMP_DECL, PHB_HFUNC pFunc )
{
   HB_BOOL fUnclosed = HB_TRUE;

   if( pFunc->wIfCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "IF", NULL );
      pFunc->wIfCounter = 0;
   }
   else if( pFunc->wForCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "FOR", NULL );
      pFunc->wForCounter = 0;
   }
   else if( pFunc->wWhileCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "WHILE", NULL );
      pFunc->wWhileCounter = 0;
   }
   else if( pFunc->wCaseCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "CASE", NULL );
      pFunc->wCaseCounter = 0;
   }
   else if( pFunc->wSwitchCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "SWITCH", NULL );
      pFunc->wSwitchCounter = 0;
   }
   else if( pFunc->wWithObjectCnt )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "WITH OBJECT", NULL );
      pFunc->wWithObjectCnt = 0;
   }
   else if( pFunc->wSeqCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "BEGIN SEQUENCE", NULL );
      pFunc->wSeqCounter = 0;
   }
   else if( pFunc->funFlags & HB_FUNF_EXTBLOCK )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "{||...}", NULL );
      pFunc->funFlags &= ~HB_FUNF_EXTBLOCK;
   }
   else
      fUnclosed = HB_FALSE;

   return fUnclosed;
}

void yyerror( HB_COMP_DECL, const char * s )
{
   if( ! HB_COMP_PARAM->pLex->lasttok || HB_COMP_PARAM->pLex->lasttok[ 0 ] == '\n' )
   {
      if( HB_COMP_PARAM->iErrorCount == 0 || ! hb_pp_eof( HB_COMP_PARAM->pLex->pPP ) )
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_INCOMPLETE_STMT, NULL, NULL );
   }
   else if( HB_COMP_PARAM->pLex->iState == NEXT )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_NEXTFOR );
   else if( HB_COMP_PARAM->pLex->iState == ELSE )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_UNMATCHED_ELSE );
   else if( HB_COMP_PARAM->pLex->iState == ELSEIF )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_UNMATCHED_ELSEIF );
   else if( HB_COMP_PARAM->pLex->iState == ENDIF || HB_COMP_PARAM->pLex->iState == END )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDIF );
   else if( HB_COMP_PARAM->pLex->iState == CASE || HB_COMP_PARAM->pLex->iState == OTHERWISE )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_CASE );
   else if( HB_COMP_PARAM->pLex->iState == ENDCASE )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDCASE );
   else if( HB_COMP_PARAM->pLex->iState == ENDDO )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDDO );
   else if( HB_COMP_PARAM->pLex->iState == ENDWITH )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDWITH );
   else if( HB_COMP_PARAM->pLex->iState == ENDSEQ )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDSEQ );
   else if( HB_COMP_PARAM->pLex->iState == ENDSWITCH )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDSWITCH );
   else
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_YACC, s, HB_COMP_PARAM->pLex->lasttok );
}
