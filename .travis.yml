# https://lint.travis-ci.org/
branches:
  only:
  - master
  - prod
  - test-travis
notifications:
  email: false
git:
  depth: 10
language: c

addons:
  apt:
    packages: &hb-linux-common
      - firebird2.5-dev
      - libbz2-dev
    # - libcairo2-dev
      - libcups2-dev
      - libcurl4-openssl-dev
      - libexpat1-dev
      - libfreeimage-dev
      - libgd2-xpm-dev
      - libgpm-dev
      - libgs-dev
      - libicu-dev
      - liblzo2-dev
      - libmagic-dev
    # - libminizip-dev (requires Ubuntu 'xenial')
      - libmxml-dev
      - libmysqlclient-dev
    # - libpcre2-dev (requires Ubuntu 'xenial')
      - libpcre3-dev
      - libpng12-dev
      - libncurses5-dev
      - libpq-dev
    # - libqt5-dev
      - librabbitmq-dev
      - libsqlite3-dev
    # - libslang2-dev
    # - libx11-dev
      - libyaml-dev
      - unixodbc-dev
    # - zlib1g-dev

matrix:
  include:
    - os: linux
      # https://docs.travis-ci.com/user/reference/trusty/
      dist: trusty
      sudo: false
      compiler: clang
      env: [ HB_CCSUFFIX=-5.0 ]
      addons:
        apt:
          packages: [ *hb-linux-common, clang-5.0 ]
          sources: llvm-toolchain-trusty-5.0
    - os: linux
      dist: trusty
      sudo: false
      compiler: clang
      addons:
        apt:
          packages: [ *hb-linux-common ]
    - os: linux
      dist: trusty
      sudo: false
      compiler: gcc
      env: [ HB_CCSUFFIX=-7 ]
      addons:
        apt:
          packages: [ *hb-linux-common, gcc-7, g++-7 ]
          sources: ubuntu-toolchain-r-test
    - os: linux
      dist: trusty
      sudo: required
      group: edge
      compiler: gcc
      services: [ docker ]
      env: [ 'DOCKER_IMAGE=amazonlinux:latest' ]
    - os: linux
      dist: trusty
      sudo: required
      group: edge
      compiler: i686-w64-mingw32-gcc
      services: [ docker ]
      # https://hub.docker.com/_/ubuntu/
      env: [ 'DOCKER_IMAGE=ubuntu:rolling' ]
    - os: osx
      # https://docs.travis-ci.com/user/reference/osx/
      osx_image: xcode9
      compiler: clang
    - os: osx
      osx_image: xcode9
      compiler: i686-w64-mingw32-gcc

before_install:
  - |
    export HB_CI_THREADS=4
    export HB_BUILD_3RD_DYN=yes
    if [ -n "${DOCKER_IMAGE}" ]; then
      if [ "${CC}" = 'i686-w64-mingw32-gcc' ]; then
        DOCKER_SCRIPT=./package/mpkg_win_docker.sh
      elif [ "${TRAVIS_OS_NAME}" = 'linux' ]; then
        DOCKER_SCRIPT=./package/mpkg_rpm_docker.sh
      fi
      time docker pull "${DOCKER_IMAGE}"
      time docker run -it -v "${PWD}:${PWD}" -w "${PWD}" \
        --env-file <(env | grep -E '^(HB|TRAVIS|GITHUB)_') \
        "${DOCKER_IMAGE}" \
        sh -c "${DOCKER_SCRIPT}"
    elif [ "${TRAVIS_OS_NAME}" = 'osx' ]; then
      if [ "${CC}" = 'i686-w64-mingw32-gcc' ]; then
        time travis_retry brew install --force-bottle p7zip mingw-w64 jq osslsigncode dos2unix gpg coreutils || true
        time travis_retry brew install --force-bottle --build-bottle wine || true
        export DISPLAY=:1
        time wineboot
        export MXE_DONT_INSTALL=gcc
      # travis_wait time ./package/mpkg_win_dl_mxe.sh \
      #   mxe-{i686,x86-64}-w64-mingw32.static-{bzip2,expat,libharu,libpng,lzo,minizip,mxml,pcre,sqlite,zlib}
      # travis_wait time ./package/mpkg_win_dl_mxe.sh \
      #   mxe-{i686,x86-64}-w64-mingw32.shared-{cairo,file,ghostscript,icu4c,libmysqlclient,postgresql} \
      #   mxe-{i686,x86-64}-w64-mingw32.static-{freeimage,gd}
        travis_wait time ./package/mpkg_win_dl_mxe.sh \
          mxe-{i686,x86-64}-w64-mingw32.shared-pcre2
      else
      # travis_retry brew install pcre zlib
        travis_retry brew install --force-bottle --build-bottle fontconfig || true
        travis_retry brew install --force-bottle \
          bzip2 expat libharu libmxml libpng lzo minizip pcre2 sqlite \
          cairo curl freeimage gd ghostscript icu4c libmagic libyaml mariadb ncurses openssl@1.1 postgresql qt rabbitmq-c s-lang unixodbc
      fi
      export MACOSX_DEPLOYMENT_TARGET=10.11
    fi

script:
  - |
    if [ -z "${DOCKER_IMAGE}" ]; then
      if [ "${CC}" = 'i686-w64-mingw32-gcc' ]; then
        ./package/mpkg_win_ci.sh
      else
        ls -lA "$(dirname "$(which "${CC}${HB_CCSUFFIX}")")/${CC}"*
        [ "${CC#*clang*}" != "${CC}" ] && ls -lA "$(dirname "$(which "${CC}${HB_CCSUFFIX}")")/llvm"*
        "${CC}${HB_CCSUFFIX}" -v
        [ "${CC}" = 'gcc' ] && "${CC}${HB_CCSUFFIX}" -dumpversion && "${CC}${HB_CCSUFFIX}" -dumpfullversion
        HB_COMPILER="${CC}" make -j "${HB_CI_THREADS}"
      fi
    fi

deploy:
  skip_cleanup: true
  provider: releases
  api_key: ${GITHUB_TOKEN}
  file_glob: true
  file: harbour-snapshot-win-built-on-*.7z
  tag_name: v3.4.0dev
  target_commitish: ${TRAVIS_COMMIT}
  draft: false
  prerelease: true
  overwrite: true
  on:
    tag: true
    branch: master
    condition: "${CC} = i686-w64-mingw32-gcc"
